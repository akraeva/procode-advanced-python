import pytest
from src.module_10 import (
    m_10_2_1,
    m_10_2_2,
    m_10_2_3,
    m_10_2_4,
    m_10_2_5,
)


# === Тест для задачи 10.2.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example
        ("Гол, Ассист, Пас, Гол, Блок, Пас", ["Ассист", "Блок", "Гол", "Пас"]),
        # Test 2
        ("Гол, Ассист, Пас, Гол, Блок, Пас", ["Ассист", "Блок", "Гол", "Пас"]),
        # Test 3
        ("Фол, Пас, Фол, Желтая карточка", ["Желтая карточка", "Пас", "Фол"]),
        # Test 4
        ("Пас, Пас, Пас", ["Пас"]),
        # Test 5
        ("Ассист, Ассист, Гол, Блок, Ассист, Блок", ["Ассист", "Блок", "Гол"]),
        # Sample
        (
            "Ассист, Гол, Ассист, Блок, Пас, Дриблинг, Гол",
            ["Ассист", "Блок", "Гол", "Дриблинг", "Пас"],
        ),
    ],
    ids=["Example", "Test2", "Test3", "Test4", "Test5", "Sample"],
)
def test_10_2_1(data, expected):
    assert m_10_2_1(data) == expected


# === Тест для задачи 10.2.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example
        (
            "Гол, Ассист, Блок, Пас\nГол, Сэйв, Пас, Сейшн",
            "Общие достижения: ['Гол', 'Пас']\nДостижения только в матче 1: ['Ассист', 'Блок']\nДостижения только в матче 2: ['Сейшн', 'Сэйв']",
        ),
        # Test 2
        (
            "Гол, Ассист, Гол, Дриблинг\nГол, Ассист, Гол, Дриблинг",
            "Общие достижения: ['Ассист', 'Гол', 'Дриблинг']\nДостижения только в матче 1: []\nДостижения только в матче 2: []",
        ),
        # Test 3
        (
            "Офсайд, Удар, Пас\nОфсайд, Удар, Передача, Ассист",
            "Общие достижения: ['Офсайд', 'Удар']\nДостижения только в матче 1: ['Пас']\nДостижения только в матче 2: ['Ассист', 'Передача']",
        ),
        # Test 4
        (
            "Гол, Гол, Ассист, Дриблинг\nАссист, Дриблинг, Передача, Гол",
            "Общие достижения: ['Ассист', 'Гол', 'Дриблинг']\nДостижения только в матче 1: []\nДостижения только в матче 2: ['Передача']",
        ),
        # Test 5
        (
            "Пас, Блок, Гол, Ассист\nПас, Блок, Фол, Сэйв",
            "Общие достижения: ['Блок', 'Пас']\nДостижения только в матче 1: ['Ассист', 'Гол']\nДостижения только в матче 2: ['Сэйв', 'Фол']",
        ),
        # Sample
        (
            "Удар, Блок, Отбор, Пас, Дриблинг\nБлок, Пас, Ассист, Финт, Удар",
            "Общие достижения: ['Блок', 'Пас', 'Удар']\nДостижения только в матче 1: ['Дриблинг', 'Отбор']\nДостижения только в матче 2: ['Ассист', 'Финт']",
        ),
    ],
    ids=["Example", "Test2", "Test3", "Test4", "Test5", "Sample"],
)
def test_10_2_2(data, expected):
    assert m_10_2_2(data) == expected


# === Тест для задачи 10.2.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example
        (
            "Гол, Пас, Блок, Ассист\nСэйв, Дриблинг\nПас",
            "{Ассист, Блок, Гол, Дриблинг, Сэйв}",
        ),
        # Test 2
        (
            "Пас, Передача, Фол, Блок\nГол, Дриблинг\nФол, Блок",
            "{Гол, Дриблинг, Пас, Передача}",
        ),
        # Test 3
        (
            "Офсайд, Удар, Пас\nПередача, Ассист\nОфсайд",
            "{Ассист, Пас, Передача, Удар}",
        ),
        # Test 4
        ("Гол, Сэйв, Ассист\nБлок, Дриблинг\nСэйв", "{Ассист, Блок, Гол, Дриблинг}"),
        # Test 5
        (
            "Гол, Ассист, Дриблинг\nСэйв, Офсайд\nГол, Дриблинг",
            "{Ассист, Офсайд, Сэйв}",
        ),
        # Sample
        (
            "Гол, Пас, Блок, Ассист\nСэйв, Дриблинг\nПас",
            "{Ассист, Блок, Гол, Дриблинг, Сэйв}",
        ),
    ],
    ids=["Example", "Test2", "Test3", "Test4", "Test5", "Sample"],
)
def test_10_2_3(data, expected):
    assert m_10_2_3(data) == expected


# === Тест для задачи 10.2.4 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example 1
        (
            "скорость, техника, выносливость\n3\n"
            "Иван: скорость, техника, выносливость, видение поля\n"
            "Алексей: скорость, техника\n"
            "Михаил: техника, выносливость, скорость",
            "Игроки с полным набором навыков: Иван, Михаил",
        ),
        # Example 2
        (
            "реакция, сила\n2\nАндрей: скорость, реакция, сила\nВладимир: реакция, техника",
            "Игроки с полным набором навыков: Андрей",
        ),
        # Example 3
        (
            "головной удар, выносливость\n2\nЕгор: дриблинг, передача\nПавел: скорость, реакция",
            "Нет игроков с полным набором навыков",
        ),
        # Test 2
        (
            "защита, агрессия, контроль мяча\n2\nГлеб: защита, агрессия\n"
            "Станислав: защита, агрессия, контроль мяча, выносливость",
            "Игроки с полным набором навыков: Станислав",
        ),
        # Test 3
        (
            "передача, дриблинг\n3\nНикита: передача, дриблинг, удар\n"
            "Сергей: передача\nРоман: дриблинг, выносливость",
            "Игроки с полным набором навыков: Никита",
        ),
        # Test 4
        (
            "реакция, сила\n2\nАндрей: скорость, реакция, сила\n"
            "Владимир: реакция, техника",
            "Игроки с полным набором навыков: Андрей",
        ),
        # Test 5
        (
            "скорость, техника, выносливость\n10\n"
            "Иван: скорость, техника, выносливость, видение поля\n"
            "Алексей: скорость, техника\n"
            "Михаил: техника, выносливость, скорость\n"
            "Артем: скорость, техника, выносливость, удар\n"
            "Василий: выносливость, дриблинг, реакция\n"
            "Дмитрий: скорость, передача, выносливость\n"
            "Егор: техника, реакция, контроль мяча\n"
            "Сергей: скорость, техника, выносливость, контроль мяча\n"
            "Максим: защита, выносливость, техника, скорость\n"
            "Павел: скорость, техника, дриблинг",
            "Игроки с полным набором навыков: Иван, Михаил, Артем, Сергей, Максим",
        ),
        # Sample
        (
            "головной удар, выносливость\n2\n"
            "Егор: дриблинг, передача\n"
            "Павел: скорость, реакция",
            "Нет игроков с полным набором навыков",
        ),
    ],
    ids=[
        "Example1",
        "Example2",
        "Example3",
        "Test2",
        "Test3",
        "Test4",
        "Test5",
        "Sample",
    ],
)
def test_10_2_4(data, expected):
    assert m_10_2_4(data) == expected


# === Тест для задачи 10.2.5 ===

# === Тест для задачи 10.2.5 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Пример 1
        (
            "Гол, Ассист, Блок, Сэйв, Дриблинг, Фол\nГол, Ассист, Сэйв",
            (
                {"Гол", "Ассист", "Сэйв"},  # found_best
                set(),  # missing_best
                {"Блок", "Дриблинг", "Фол"},  # extra_stats
            ),
        ),
        # Тест №2
        (
            "Фол, Офсайд, Реакция\nСкорость, Техника, Реакция, Выносливость",
            (
                {"Реакция"},  # есть и там, и там
                {
                    "Скорость",
                    "Техника",
                    "Выносливость",
                },  # есть в эталоне, но нет в отчёте
                {"Фол", "Офсайд"},  # есть в отчёте, но не в эталоне
            ),
        ),
        # Тест №3
        (
            "Пас, Блок, Ассист, Сэйв\nПас, Блок, Ассист, Сэйв",
            (
                {"Пас", "Блок", "Ассист", "Сэйв"},  # всё совпало
                set(),  # ничего не отсутствует
                set(),  # лишнего нет
            ),
        ),
        # Тест №4
        (
            "Передача, Защита, Удар\nПередача, Удар, Дриблинг, Гол",
            (
                {"Передача", "Удар"},  # пересечение
                {"Дриблинг", "Гол"},  # эталон, которого нет в отчёте
                {"Защита"},  # лишнее из отчёта
            ),
        ),
    ],
    ids=["example1", "test2", "test3", "test4"],
)
def test_10_2_5(data, expected):
    assert m_10_2_5(data) == expected
