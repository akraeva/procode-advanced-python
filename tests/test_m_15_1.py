import pytest
from src.module_15 import (
    m_15_1_1,
    m_15_1_2,
    m_15_1_3,
    m_15_1_4,
    m_15_1_5,
    m_15_1_6,
    m_15_1_7,
    m_15_1_8,
    m_15_1_9,
    m_15_1_10,
)

# –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pytest -k "test_15_1_" -q --tb=short -x


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ (–∏–∑ —É—Å–ª–æ–≤–∏—è)
        # "–ú–æ–π —Å—Ç–∏–ª—å ‚Äî –∫–∞–∫ –±—É—Ä—è"
        ("–ú–æ–π —Å—Ç–∏–ª—å ‚Äî –∫–∞–∫ –±—É—Ä—è", 5),
        # –¢–µ—Å—Ç ‚Ññ2 ‚Äî Drop the mic and feel the vibe
        ("Drop the mic and feel the vibe", 9),
        # –¢–µ—Å—Ç ‚Ññ3 ‚Äî –Ø –≤ –∫–æ–¥–µ –∂–∏–≤—É, –∫–∞–∫ –≤ –±–∏—Ç–µ
        ("–Ø –≤ –∫–æ–¥–µ –∂–∏–≤—É, –∫–∞–∫ –≤ –±–∏—Ç–µ", 8),
        # –¢–µ—Å—Ç ‚Ññ4 ‚Äî Flow so smooth, like Python groove
        ("Flow so smooth, like Python groove", 10),
        # –¢–µ—Å—Ç ‚Ññ5 ‚Äî –ö–æ–¥ –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–æ
        ("–ö–æ–¥ –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–æ", 5),
        # –¢–µ—Å—Ç ‚Ññ6 ‚Äî Rhymes in the rain
        ("Rhymes in the rain", 5),
        # –¢–µ—Å—Ç ‚Ññ7 ‚Äî –°–∏–ª–∞ —Å–ª–æ–≤ ‚Äî –≤ –ø—Ä–æ—Å—Ç–æ—Ç–µ
        ("–°–∏–ª–∞ —Å–ª–æ–≤ ‚Äî –≤ –ø—Ä–æ—Å—Ç–æ—Ç–µ", 6),
        # üß™ Sample Input ‚Äî –°–¢–ò–õ–¨ –ë–ò–¢ –†–ò–¢–ú
        ("–°–¢–ò–õ–¨ –ë–ò–¢ –†–ò–¢–ú", 3),
    ],
    ids=[
        "storm_style",
        "english_vibe",
        "bit_life",
        "python_groove",
        "art_code",
        "rain_rhyme",
        "simplicity_power",
        "sample_input",
    ],
)
def test_15_1_1(data, expected):
    assert m_15_1_1(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞
        # —É–ª–∏—Ü–∞,—Å—Ç–∏–ª—å,–±–∏—Ç,–∂–∏–∑–Ω—å
        ("—É–ª–∏—Ü–∞,—Å—Ç–∏–ª—å,–±–∏—Ç,–∂–∏–∑–Ω—å", "–±–∏—Ç\n–∂–∏–∑–Ω—å\n—Å—Ç–∏–ª—å\n—É–ª–∏—Ü–∞"),
        # –¢–µ—Å—Ç ‚Ññ2 ‚Äî flow,energy,skill,beat
        ("flow,energy,skill,beat", "beat\nenergy\nflow\nskill"),
        # –¢–µ—Å—Ç ‚Ññ3 ‚Äî —É–ª–∏—Ü–∞,–±–æ–ª—å,–≤–µ—Ä–∞,—Ä–∏—Ç–º
        ("—É–ª–∏—Ü–∞,–±–æ–ª—å,–≤–µ—Ä–∞,—Ä–∏—Ç–º", "–±–æ–ª—å\n–≤–µ—Ä–∞\n—Ä–∏—Ç–º\n—É–ª–∏—Ü–∞"),
        # –¢–µ—Å—Ç ‚Ññ4 ‚Äî —Ñ—Ä–∏—Å—Ç–∞–π–ª,–ø–∞–Ω—á,–∫–æ–¥,—Å—Ç—Ä–æ–∫–∞
        ("—Ñ—Ä–∏—Å—Ç–∞–π–ª,–ø–∞–Ω—á,–∫–æ–¥,—Å—Ç—Ä–æ–∫–∞", "–∫–æ–¥\n–ø–∞–Ω—á\n—Å—Ç—Ä–æ–∫–∞\n—Ñ—Ä–∏—Å—Ç–∞–π–ª"),
        # –¢–µ—Å—Ç ‚Ññ5 ‚Äî Flow,–±–∏—Ç,STREET,—Ä–∏—Ç–º,STYLE,—É–ª–∏—Ü–∞,Code,—Å—Ç–∏–ª—å,Beat,–ó–í–£–ö,Mic,–ì–∞—Ä–º–æ–Ω–∏—è
        (
            "Flow,–±–∏—Ç,STREET,—Ä–∏—Ç–º,STYLE,—É–ª–∏—Ü–∞,Code,—Å—Ç–∏–ª—å,Beat," "–ó–í–£–ö,Mic,–ì–∞—Ä–º–æ–Ω–∏—è",
            "Beat\nCode\nFlow\nMic\nSTREET\nSTYLE\n–ì–∞—Ä–º–æ–Ω–∏—è\n–ó–í–£–ö\n–±–∏—Ç\n—Ä–∏—Ç–º\n—Å—Ç–∏–ª—å\n—É–ª–∏—Ü–∞",
        ),
    ],
    ids=[
        "simple_russian_sort",
        "english_sort",
        "russian_words_mixed",
        "short_russian_set",
        "mixed_case_multilang",
    ],
)
def test_15_1_2(data, expected):
    assert m_15_1_2(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞
        # –±–∏—Ç –±–∏—Ç —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å –±–∏—Ç
        ("–±–∏—Ç –±–∏—Ç —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å –±–∏—Ç", {"–±–∏—Ç": 3, "—Å—Ç–∏–ª—å": 3}),
        # –¢–µ—Å—Ç ‚Ññ2 ‚Äî –¥—É–±–ª–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä
        ("–±–∏—Ç –±–∏—Ç —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å –±–∏—Ç", {"–±–∏—Ç": 3, "—Å—Ç–∏–ª—å": 3}),
        # –¢–µ—Å—Ç ‚Ññ3 ‚Äî —É–ª–∏—Ü–∞ —Å—Ç–∏–ª—å –±–∏—Ç —Å—Ç–∏–ª—å —É–ª–∏—Ü–∞ —É–ª–∏—Ü–∞
        ("—É–ª–∏—Ü–∞ —Å—Ç–∏–ª—å –±–∏—Ç —Å—Ç–∏–ª—å —É–ª–∏—Ü–∞ —É–ª–∏—Ü–∞", {"—É–ª–∏—Ü–∞": 3, "—Å—Ç–∏–ª—å": 2, "–±–∏—Ç": 1}),
        # –¢–µ—Å—Ç ‚Ññ4 ‚Äî Code beats code beats Beats
        ("Code beats code beats Beats", {"Code": 1, "beats": 2, "code": 1, "Beats": 1}),
        # –¢–µ—Å—Ç ‚Ññ5 ‚Äî flow Flow FLOW beat BEAT
        (
            "flow Flow FLOW beat BEAT",
            {"flow": 1, "Flow": 1, "FLOW": 1, "beat": 1, "BEAT": 1},
        ),
        # –¢–µ—Å—Ç ‚Ññ6 ‚Äî –¥–ª–∏–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤
        (
            "–±–∏—Ç –±–∏—Ç —Å—Ç–∏–ª—å Bit —Å—Ç–∏–ª—å –±–∏—Ç Flow —Å—Ç–∏–ª—å flow BEAT Beat —Å—Ç–∏–ª—å "
            "rhyme —Å—Ç–∏–ª—å flow –±–∏—Ç —Å—Ç–∏–ª—å beat —Ñ–ª–æ—É —Ñ–ª–æ—É –§–ª–æ—É beat —Å—Ç–∏–ª—å code "
            "—Å—Ç–∏–ª—å —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å –º–∏–∫—Ä–æ—Ñ–æ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω flow rhyme –±–∏—Ç",
            {
                "–±–∏—Ç": 5,
                "—Å—Ç–∏–ª—å": 10,
                "Bit": 1,
                "Flow": 1,
                "flow": 3,
                "BEAT": 1,
                "Beat": 1,
                "rhyme": 2,
                "beat": 2,
                "—Ñ–ª–æ—É": 2,
                "–§–ª–æ—É": 1,
                "code": 1,
                "–º–∏–∫—Ä–æ—Ñ–æ–Ω": 2,
            },
        ),
        # Sample Input ‚Äî —è –µ—Å—Ç—å —Å—Ç–∏–ª—å —è –µ—Å—Ç—å –±–∏—Ç
        ("—è –µ—Å—Ç—å —Å—Ç–∏–ª—å —è –µ—Å—Ç—å –±–∏—Ç", {"—è": 2, "–µ—Å—Ç—å": 2, "—Å—Ç–∏–ª—å": 1, "–±–∏—Ç": 1}),
    ],
    ids=[
        "simple_case",
        "duplicate_case",
        "russian_mix",
        "english_case_sensitive",
        "case_variations",
        "long_mixed_text",
        "sample_input",
    ],
)
def test_15_1_3(data, expected):
    assert m_15_1_3(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.4 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞
        # –ú–æ—Å–∫–≤–∞,–ü–∏—Ç–µ—Ä,–ö–∞–∑–∞–Ω—å,–£—Ñ–∞
        (
            "–ú–æ—Å–∫–≤–∞,–ü–∏—Ç–µ—Ä,–ö–∞–∑–∞–Ω—å,–£—Ñ–∞",
            "('–ú–æ—Å–∫–≤–∞', '–ü–∏—Ç–µ—Ä', '–ö–∞–∑–∞–Ω—å', '–£—Ñ–∞')\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ —Ç—É—Ä–∞: –£—Ñ–∞",
        ),
        # –¢–µ—Å—Ç ‚Ññ2 ‚Äî –¢–æ–∫–∏–æ,–°–µ—É–ª,–ü–µ–∫–∏–Ω,–®–∞–Ω—Ö–∞–π,–ë–∞–Ω–≥–∫–æ–∫
        (
            "–¢–æ–∫–∏–æ,–°–µ—É–ª,–ü–µ–∫–∏–Ω,–®–∞–Ω—Ö–∞–π,–ë–∞–Ω–≥–∫–æ–∫",
            "('–¢–æ–∫–∏–æ', '–°–µ—É–ª', '–ü–µ–∫–∏–Ω', '–®–∞–Ω—Ö–∞–π', '–ë–∞–Ω–≥–∫–æ–∫')\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ —Ç—É—Ä–∞: –ë–∞–Ω–≥–∫–æ–∫",
        ),
        # –¢–µ—Å—Ç ‚Ññ3 ‚Äî –ë–µ—Ä–ª–∏–Ω,–ü—Ä–∞–≥–∞,–í–µ–Ω–∞,–ë—É–¥–∞–ø–µ—à—Ç
        (
            "–ë–µ—Ä–ª–∏–Ω,–ü—Ä–∞–≥–∞,–í–µ–Ω–∞,–ë—É–¥–∞–ø–µ—à—Ç",
            "('–ë–µ—Ä–ª–∏–Ω', '–ü—Ä–∞–≥–∞', '–í–µ–Ω–∞', '–ë—É–¥–∞–ø–µ—à—Ç')\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ —Ç—É—Ä–∞: –ë—É–¥–∞–ø–µ—à—Ç",
        ),
        # –¢–µ—Å—Ç ‚Ññ4 ‚Äî Rio,San Paulo,Buenos Aires,Lima
        (
            "Rio,San Paulo,Buenos Aires,Lima",
            "('Rio', 'San Paulo', 'Buenos Aires', 'Lima')\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ —Ç—É—Ä–∞: Lima",
        ),
        # –¢–µ—Å—Ç ‚Ññ5 ‚Äî –ú–æ—Å–∫–≤–∞,–ü–∏—Ç–µ—Ä,–ö–∞–∑–∞–Ω—å,–£—Ñ–∞ (–ø–æ–≤—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–∞)
        (
            "–ú–æ—Å–∫–≤–∞,–ü–∏—Ç–µ—Ä,–ö–∞–∑–∞–Ω—å,–£—Ñ–∞",
            "('–ú–æ—Å–∫–≤–∞', '–ü–∏—Ç–µ—Ä', '–ö–∞–∑–∞–Ω—å', '–£—Ñ–∞')\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ —Ç—É—Ä–∞: –£—Ñ–∞",
        ),
        # Sample Input ‚Äî New York,Chicago,Los Angeles,Houston
        (
            "New York,Chicago,Los Angeles,Houston",
            "('New York', 'Chicago', 'Los Angeles', 'Houston')\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ —Ç—É—Ä–∞: Houston",
        ),
    ],
    ids=[
        "russian_example",
        "asian_cities",
        "european_cities",
        "south_america",
        "duplicate_case",
        "sample_input",
    ],
)
def test_15_1_4(data, expected):
    assert m_15_1_4(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.5 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞
        # –±–∏—Ç —Å—Ç–∏–ª—å —Ä–∏—Ç–º
        # —Ä–∏—Ç–º —Å—Ç–∏–ª—å —Å–ª–æ–≤–∞
        ("–±–∏—Ç —Å—Ç–∏–ª—å —Ä–∏—Ç–º\n—Ä–∏—Ç–º —Å—Ç–∏–ª—å —Å–ª–æ–≤–∞", ["—Ä–∏—Ç–º", "—Å—Ç–∏–ª—å"]),
        # –¢–µ—Å—Ç ‚Ññ2 ‚Äî —Ç–æ—Ç –∂–µ –ø—Ä–∏–º–µ—Ä
        ("–±–∏—Ç —Å—Ç–∏–ª—å —Ä–∏—Ç–º\n—Ä–∏—Ç–º —Å—Ç–∏–ª—å —Å–ª–æ–≤–∞", ["—Ä–∏—Ç–º", "—Å—Ç–∏–ª—å"]),
        # –¢–µ—Å—Ç ‚Ññ3 ‚Äî –±–∏—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å—Ç–∏–ª—å —Ä–∏—Ñ–º–∞ / –∑–≤—É–∫ —Å—Ü–µ–Ω–∞ —Å–≤–µ—Ç –±–∏—Ç —Å—Ç–∏–ª—å
        ("–±–∏—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å—Ç–∏–ª—å —Ä–∏—Ñ–º–∞\n–∑–≤—É–∫ —Å—Ü–µ–Ω–∞ —Å–≤–µ—Ç –±–∏—Ç —Å—Ç–∏–ª—å", ["–±–∏—Ç", "—Å—Ç–∏–ª—å"]),
        # –¢–µ—Å—Ç ‚Ññ4 ‚Äî code beat flow / drop rhyme vibe
        ("code beat flow\ndrop rhyme vibe", []),
        # –¢–µ—Å—Ç ‚Ññ5 ‚Äî Beat Flow Vibe / flow beat vibe
        ("Beat Flow Vibe\nflow beat vibe", []),
        # –¢–µ—Å—Ç ‚Ññ6 ‚Äî –¥–ª–∏–Ω–Ω—ã–π –º–∏–∫—Å–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
        (
            "–±–∏—Ç —Å—Ç–∏–ª—å —Ä–∏—Ç–º —ç–Ω–µ—Ä–≥–∏—è —Å–∏–ª–∞ —É–ª–∏—Ü–∞ —Ñ–ª–æ—É –º–∏–∫—Ä–æ—Ñ–æ–Ω –∫–æ–¥ rhyme beat "
            "Flow rhythm code style –∑–≤—É–∫ line –º–æ—â—å –∏–¥–µ—è Python –ª–æ–≥–∏–∫–∞\n"
            "Rhyme beat voice code —Å—Ç–∏–ª—å –±–∏—Ç –º–æ—â—å Focus —ç–Ω–µ—Ä–≥–∏—è Vibe —Ñ–ª–æ—É "
            "mic logic —Å–≤–µ—Ç —É–ª–∏—Ü–∞ sound —Å–ª–æ–≤–æ –ª–æ–≥–∏–∫–∞ –±–∏—Ç style rhythm",
            [
                "beat",
                "code",
                "rhythm",
                "style",
                "–±–∏—Ç",
                "–ª–æ–≥–∏–∫–∞",
                "–º–æ—â—å",
                "—Å—Ç–∏–ª—å",
                "—É–ª–∏—Ü–∞",
                "—Ñ–ª–æ—É",
                "—ç–Ω–µ—Ä–≥–∏—è",
            ],
        ),
        # Sample Input ‚Äî flow code rhyme skill / beat flow rhyme art
        ("flow code rhyme skill\nbeat flow rhyme art", ["flow", "rhyme"]),
    ],
    ids=[
        "example_case",
        "duplicate_example",
        "russian_basic",
        "no_common_words",
        "case_sensitive_diff",
        "mixed_long_case",
        "sample_input",
    ],
)
def test_15_1_5(data, expected):
    assert m_15_1_5(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.6 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞
        # 2
        # –ê–ª–∏—Å–∞ BeatDrop
        # –ú–∞—Ä–∫ StyleZone
        (
            "2\n–ê–ª–∏—Å–∞ BeatDrop\n–ú–∞—Ä–∫ StyleZone",
            {"–ê–ª–∏—Å–∞": "BeatDrop", "–ú–∞—Ä–∫": "StyleZone"},
        ),
        # –¢–µ—Å—Ç ‚Ññ2 ‚Äî flowmaster Byte Legacy / bitqueen Heart of Code
        (
            "2\nflowmaster Byte Legacy\nbitqueen Heart of Code",
            {"flowmaster": "Byte Legacy", "bitqueen": "Heart of Code"},
        ),
        # –¢–µ—Å—Ç ‚Ññ3 ‚Äî –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫
        ("1\n–ú–∞–∫—Å–∏–º Python Hero", {"–ú–∞–∫—Å–∏–º": "Python Hero"}),
        # –¢–µ—Å—Ç ‚Ññ4 ‚Äî —Ç—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        (
            "3\n–ö–∏—Ä–∞ Rhyme Flow\n–ò–ª—å—è Bit Line\n–í–∞–Ω—è Code Style",
            {"–ö–∏—Ä–∞": "Rhyme Flow", "–ò–ª—å—è": "Bit Line", "–í–∞–Ω—è": "Code Style"},
        ),
        # –¢–µ—Å—Ç ‚Ññ5 ‚Äî –¥–µ—Å—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        (
            "10\n–ê–Ω—è BeatMaker\n–ë–æ–± Code Flow\n–ö–∞—Ç—è Rhyme Zone\n–ú–∞—Ä–∫ Bit Hero\n"
            "–°–≤–µ—Ç–∞ –°—Ç–∏–ª—å —É–ª–∏—Ü\n–ò–≥–æ—Ä—å FlowMachine\n–õ–µ–Ω–∞ –£–ª–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π\n"
            "–û–ª—è Bass Drop\n–í–∞–¥–∏–º –ú–∏–∫—Ä–æ –∏ –§–æ–Ω\n–ñ–µ–Ω—è –ü—É–ª—å—Å –∫–æ–¥–∞",
            {
                "–ê–Ω—è": "BeatMaker",
                "–ë–æ–±": "Code Flow",
                "–ö–∞—Ç—è": "Rhyme Zone",
                "–ú–∞—Ä–∫": "Bit Hero",
                "–°–≤–µ—Ç–∞": "–°—Ç–∏–ª—å —É–ª–∏—Ü",
                "–ò–≥–æ—Ä—å": "FlowMachine",
                "–õ–µ–Ω–∞": "–£–ª–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π",
                "–û–ª—è": "Bass Drop",
                "–í–∞–¥–∏–º": "–ú–∏–∫—Ä–æ –∏ –§–æ–Ω",
                "–ñ–µ–Ω—è": "–ü—É–ª—å—Å –∫–æ–¥–∞",
            },
        ),
        # Sample Input ‚Äî 4 —É—á–∞—Å—Ç–Ω–∏–∫–∞
        (
            "4\n–°–æ–Ω—è –í–µ—á–Ω—ã–π —Å—Ç–∏–ª—å\n–¢–∏–º—É—Ä –£–ª–∏—Ü—ã –≥–æ–≤–æ—Ä—è—Ç\n–û–ª–µ–≥ –ú–∏–∫—Ä–æ—Ñ–æ–Ω\n"
            "–Ø–Ω–∞ –†–∏—Ç–º –º–æ–µ–≥–æ –∫–æ–¥–∞",
            {
                "–°–æ–Ω—è": "–í–µ—á–Ω—ã–π —Å—Ç–∏–ª—å",
                "–¢–∏–º—É—Ä": "–£–ª–∏—Ü—ã –≥–æ–≤–æ—Ä—è—Ç",
                "–û–ª–µ–≥": "–ú–∏–∫—Ä–æ—Ñ–æ–Ω",
                "–Ø–Ω–∞": "–†–∏—Ç–º –º–æ–µ–≥–æ –∫–æ–¥–∞",
            },
        ),
    ],
    ids=[
        "example_case",
        "english_case",
        "single_entry",
        "three_entries",
        "ten_entries",
        "sample_input",
    ],
)
def test_15_1_6(data, expected):
    assert m_15_1_6(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.7 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞
        (
            ["–ë–∏—Ç –∫–∞—á–∞–µ—Ç —Ç–æ–ª–ø—É", "–°–ª–æ–≤–∞ –∫–∞–∫ –ø—É–ª–∏ –≤ —Ä–∏—Ç–º–µ", "–¢–∏—à–∏–Ω–∞"],
            "–°–ª–æ–≤–∞ –∫–∞–∫ –ø—É–ª–∏ –≤ —Ä–∏—Ç–º–µ",
        ),
        # –¢–µ—Å—Ç ‚Ññ2
        (
            ["Code is art", "Beat drops heavy", "Flow like logic"],
            "Code is art",
        ),
        # –¢–µ—Å—Ç ‚Ññ3
        (
            ["–≠—Ç–æ –±–∏—Ç", "–≠—Ç–æ —Å—Ç–∏–ª—å", "–≠—Ç–æ –º–æ—â—å –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ"],
            "–≠—Ç–æ –º–æ—â—å –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ",
        ),
        # –¢–µ—Å—Ç ‚Ññ4
        (
            ["–°–ª–æ–≤–∞", "–ó–≤—É–∫", "–†–∏—Ç–º –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —Å–µ—Ä–¥—Ü–µ–º"],
            "–†–∏—Ç–º –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —Å–µ—Ä–¥—Ü–µ–º",
        ),
        # –¢–µ—Å—Ç ‚Ññ5
        (
            ["–ú–∏—Ä", "–ö–æ–¥ –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–æ", "–°–∏–ª–∞ —Å—Ç—Ä–æ–∫–∏"],
            "–ö–æ–¥ –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
        ),
        # –¢–µ—Å—Ç ‚Ññ6
        (
            [
                "–ë–∏—Ç –¥–≤–∏–∂–µ—Ç—Å—è —Å–∫–≤–æ–∑—å —É–ª–∏—Ü—ã",
                "–ó–≤—É–∫ –ø—Ä–æ–±–∏–≤–∞–µ—Ç —Å—Ç–µ–Ω—ã –±–∏—Ç–æ–º",
                "–ö–æ–¥ –∫–∞–∫ –ø–æ—ç–∑–∏—è",
            ],
            "–ë–∏—Ç –¥–≤–∏–∂–µ—Ç—Å—è —Å–∫–≤–æ–∑—å —É–ª–∏—Ü—ã",
        ),
        # –¢–µ—Å—Ç ‚Ññ7 ‚Äî –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
        (
            [
                "–ë–∏—Ç –∫–∞—á–∞–µ—Ç –º–æ–π –º–∏—Ä",
                "–°—Ç–∏–ª—å –≤ —Å–µ—Ä–¥—Ü–µ –º–æ–µ–º –∂–∏–≤–µ—Ç",
                "–†–∏—Ç–º –∫–∞–∫ –ø—É–ª—å—Å —É–ª–∏—Ü",
                "–ú–∏–∫—Ä–æ—Ñ–æ–Ω ‚Äì –º–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥",
                "–°–ª–æ–≤–∞ –ª–µ—Ç—è—Ç —Å–∫–≤–æ–∑—å —à—É–º",
                "–ú—É–∑—ã–∫–∞ –≤ –∫–∞–∂–¥–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏",
                "–≠–Ω–µ—Ä–≥–∏—è —Å—Ç—Ä–æ–∏—Ç –∫–∞–∂–¥—ã–π –∫—É–ø–ª–µ—Ç",
                "–ö–æ–¥ –∫–∞–∫ –ø–æ—ç–∑–∏—è –¥–≤–∏–∂–µ—Ç—Å—è –º—è–≥–∫–æ",
                "–Ø —Å–æ–∑–¥–∞—é —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –±–∏—Ç",
                "–õ–∏–Ω–∏–∏ —Å–≤—è–∑–∞–Ω—ã –ª–æ–≥–∏–∫–æ–π –≥–ª—É–±–∂–µ",
            ],
            "–°—Ç–∏–ª—å –≤ —Å–µ—Ä–¥—Ü–µ –º–æ–µ–º –∂–∏–≤–µ—Ç",
        ),
        # Sample Input
        (
            ["–Ø —Ä—ç–ø —á–∏—Ç–∞—é", "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤ —Ä—É–∫–µ", "–°—Ç–∏–ª—å –∏ –±–∏—Ç –º–æ–π"],
            "–°—Ç–∏–ª—å –∏ –±–∏—Ç –º–æ–π",
        ),
    ],
    ids=[
        "example_case",
        "english_case",
        "russian_case_1",
        "russian_case_2",
        "russian_case_3",
        "russian_case_4",
        "long_case",
        "sample_input",
    ],
)
def test_15_1_7(data, expected):
    assert m_15_1_7(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.8 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞
        (
            "–±–∏—Ç —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å –±–∏—Ç —Ä–∏—Ç–º",
            (3, ["–±–∏—Ç", "—Ä–∏—Ç–º", "—Å—Ç–∏–ª—å"]),
        ),
        # –¢–µ—Å—Ç ‚Ññ2
        (
            "Code logic rhythm code style rhythm",
            (5, ["Code", "code", "logic", "rhythm", "style"]),
        ),
        # –¢–µ—Å—Ç ‚Ññ3
        (
            "–ö–æ–¥ —Å—Ç–∏–ª—å —Ä–∏—Ç–º —Å—Ç–∏–ª—å –∫–æ–¥ —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å",
            (4, ["–ö–æ–¥", "–∫–æ–¥", "—Ä–∏—Ç–º", "—Å—Ç–∏–ª—å"]),
        ),
        # –¢–µ—Å—Ç ‚Ññ4
        (
            "–±–∏—Ç —Å—Ç–∏–ª—å –∫–æ–¥ —Å—Ç–∏–ª—å –±–∏—Ç —Ä–∏—Ç–º –º–∏–∫—Ä–æ—Ñ–æ–Ω —Ñ–ª–æ—É —É–ª–∏—Ü–∞ –±–∏—Ç —Å—Ç–∏–ª—å –º–æ—â—å"
            " –∫–æ–¥ –±–∏—Ç —Ä–∏—Ç–º —Å—Ç–∏–ª—å –∑–≤—É–∫ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏ –º—É–∑—ã–∫–∞ –±–∏—Ç —Å—Ç–∏–ª—å",
            (
                12,
                [
                    "–±–∏—Ç",
                    "–∑–≤—É–∫",
                    "–∫–æ–¥",
                    "–º–∏–∫—Ä–æ—Ñ–æ–Ω",
                    "–º–æ—â—å",
                    "–º—É–∑—ã–∫–∞",
                    "—Ä–∏—Ç–º",
                    "—Å–ª–æ–≤–∞",
                    "—Å—Ç–∏–ª—å",
                    "—Å—Ç—Ä–æ–∫–∏",
                    "—É–ª–∏—Ü–∞",
                    "—Ñ–ª–æ—É",
                ],
            ),
        ),
        # –¢–µ—Å—Ç ‚Ññ5
        (
            "Beat flow Code Rhythm beat Flow rhyme rhyme CODE beat mic drop "
            "Logic Beat logic rhyme beat Vibe Mic code rhyme",
            (
                15,
                [
                    "Beat",
                    "CODE",
                    "Code",
                    "Flow",
                    "Logic",
                    "Mic",
                    "Rhythm",
                    "Vibe",
                    "beat",
                    "code",
                    "drop",
                    "flow",
                    "logic",
                    "mic",
                    "rhyme",
                ],
            ),
        ),
        # Sample Input
        (
            "flow Flow beat BEAT rhyme rhyme",
            (5, ["BEAT", "Flow", "beat", "flow", "rhyme"]),
        ),
    ],
    ids=[
        "example_case",
        "english_case",
        "russian_case_1",
        "russian_case_2",
        "english_mixed_case",
        "sample_input",
    ],
)
def test_15_1_8(data, expected):
    assert m_15_1_8(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.9 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞
        (
            "4\nByteBro 100\nLilBit 85\nFlowMax 90\nLil Byte 95",
            [("ByteBro", 100), ("Lil Byte", 95), ("FlowMax", 90)],
        ),
        # –¢–µ—Å—Ç ‚Ññ2
        (
            "4\nByteBro 100\nLiliBit 85\nFlowMax 90\nLil_Byte 95",
            [("ByteBro", 100), ("Lil_Byte", 95), ("FlowMax", 90)],
        ),
        # –¢–µ—Å—Ç ‚Ññ3
        (
            "7\nFuturePast 91\nMeganTheStable 90\nPlayboiTetris 89\n"
            "ChiefKeefChain 83\nLilPickle 94\nYeNotAgain 95\nLilByte 100",
            [("LilByte", 100), ("YeNotAgain", 95), ("LilPickle", 94)],
        ),
        # –¢–µ—Å—Ç ‚Ññ4 (—Ç–æ—Ç –∂–µ –≤—Ö–æ–¥, –ø–æ–≤—Ç–æ—Ä)
        (
            "7\nFuturePast 91\nMeganTheStable 90\nPlayboiTetris 89\n"
            "ChiefKeefChain 83\nLilPickle 94\nYeNotAgain 95\nLilByte 100",
            [("LilByte", 100), ("YeNotAgain", 95), ("LilPickle", 94)],
        ),
        # –¢–µ—Å—Ç ‚Ññ5
        (
            "6\nSnoopCat 85\nDojaCow 89\nTylerTheCleaner 91\nIceKube 94\n"
            "NickiLasagna 87\nEminemulator 96",
            [("Eminemulator", 96), ("IceKube", 94), ("TylerTheCleaner", 91)],
        ),
        # –¢–µ—Å—Ç ‚Ññ6
        (
            "5\n21 Samosa 88\nTravis Teapot 94\nLil Bug 73\nNotorious B.I.T 99"
            "\nCardi Beep 95",
            [("Notorious B.I.T", 99), ("Cardi Beep", 95), ("Travis Teapot", 94)],
        ),
        # Sample Input
        (
            "8\nSnoopCat 85\nEminemulator 96\nIceKube 94\nNotoriousB.I.T 99\n"
            "Jay-Zebra 82\nDrakezilla 97\nLil Byte 105\nYeOldKanye 88",
            [("Lil Byte", 105), ("NotoriousB.I.T", 99), ("Drakezilla", 97)],
        ),
    ],
    ids=[
        "example_case",
        "test2",
        "test3",
        "test4",
        "test5",
        "test6",
        "sample_input",
    ],
)
def test_15_1_9(data, expected):
    assert m_15_1_9(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 15.1.10 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–¥–∞
        ("–±–∏—Ç —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å –±–∏—Ç —Ä–∏—Ç–º —Å—Ç–∏–ª—å", (6, 3, "—Å—Ç–∏–ª—å")),
        # –¢–µ—Å—Ç ‚Ññ2 (—Ç–æ—Ç –∂–µ –≤–≤–æ–¥)
        ("–±–∏—Ç —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å –±–∏—Ç —Ä–∏—Ç–º —Å—Ç–∏–ª—å", (6, 3, "—Å—Ç–∏–ª—å")),
        # –¢–µ—Å—Ç ‚Ññ3
        (
            "Flow –∫–∞–∫ —Ü–∏–∫–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∫—Ä—É—Ç –ï—Å–ª–∏ —Å–±–∏–ª—Å—è raise –Ω–æ —è –Ω–∞–π–¥—É –º–∞—Ä—à—Ä—É—Ç",
            (12, 12, "Flow"),
        ),
        # –¢–µ—Å—Ç ‚Ññ4
        ("–ü–æ–∫–∞ —Ç—ã –≤ –ø–∞—É–∑–µ —è –≤ deploy Bit –ø–æ –≤–µ–Ω–∞–º —è real –Ω–µ boy", (14, 12, "–≤")),
        # –¢–µ—Å—Ç ‚Ññ5
        (
            "–ú–æ—è –¥—É—à–∞ –≤ –∫–æ–¥–µ –≤ —Å—Ç—Ä–æ–∫–∞—Ö –æ—Ç–∫—Ä—ã—Ç–∞ Lil Byte –∏–¥—ë—Ç –Ω–µ –±–æ–∏—Ç—Å—è –ø–∞–¥–∞—Ç—å",
            (13, 12, "–≤"),
        ),
        # –¢–µ—Å—Ç ‚Ññ6
        (
            "–±–∏—Ç –±–∏—Ç –±–∏—Ç —Å—Ç–∏–ª—å —Å—Ç–∏–ª—å –∫–æ–¥ –∫–æ–¥ –∫–æ–¥ –∫–æ–¥ –±–∏—Ç —Å—Ç–∏–ª—å —Å—Ç—Ä–æ–∫–∞ —Å—Ç—Ä–æ–∫–∞ –±–∏—Ç",
            (14, 4, "–±–∏—Ç"),
        ),
        # Sample Input
        (
            "–≠—Ç–æ –º–æ–π –≤—Ö–æ–¥ –º–æ–π main –º–æ–π —Å—Ç–∞—Ä—Ç –ú–æ–∏ —Å–ª–æ–≤–∞ –∫–∞–∫ byte-–∫–æ–¥ –æ—Å—Ç—Ä—ã –∫–∞–∫ Dart",
            (14, 11, "–º–æ–π"),
        ),
    ],
    ids=[
        "example_case",
        "test2",
        "test3",
        "test4",
        "test5",
        "test6",
        "sample_input",
    ],
)
def test_15_1_0(data, expected):
    assert m_15_1_10(data) == expected
