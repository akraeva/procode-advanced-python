import pytest
from src.module_11 import m_11_8_1, m_11_8_2, m_11_8_3


# –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pytest -k "test_11_8_" -q -x --tb=short


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 11.8.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # test_1
        ("5 13", "üìè –ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è: 65 –º¬≤"),
        # test_2
        ("55 55", "üìè –ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è: 3025 –º¬≤"),
        # test_3
        ("0 11", "üìè –ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è: 0 –º¬≤"),
        # sample
        ("11 22", "üìè –ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è: 242 –º¬≤"),
    ],
    ids=["example_1", "big_square", "zero_width", "sample_case"],
)
def test_11_8_1(monkeypatch, capsys, data, expected):
    w, h = map(int, data.split())
    result = m_11_8_1(w, h)
    captured = capsys.readouterr().out.strip()
    assert captured == expected
    assert result == w * h


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 11.8.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # example_1
        (
            "apple banana orange grape\n—è–±–ª–æ–∫–æ –±–∞–Ω–∞–Ω –∞–ø–µ–ª—å—Å–∏–Ω –≤–∏–Ω–æ–≥—Ä–∞–¥",
            {
                "apple": "—è–±–ª–æ–∫–æ",
                "banana": "–±–∞–Ω–∞–Ω",
                "orange": "–∞–ø–µ–ª—å—Å–∏–Ω",
                "grape": "–≤–∏–Ω–æ–≥—Ä–∞–¥",
            },
        ),
        # test_2
        (
            "apple banana orange grape\n—è–±–ª–æ–∫–æ –±–∞–Ω–∞–Ω –∞–ø–µ–ª—å—Å–∏–Ω –≤–∏–Ω–æ–≥—Ä–∞–¥",
            {
                "apple": "—è–±–ª–æ–∫–æ",
                "banana": "–±–∞–Ω–∞–Ω",
                "orange": "–∞–ø–µ–ª—å—Å–∏–Ω",
                "grape": "–≤–∏–Ω–æ–≥—Ä–∞–¥",
            },
        ),
        # test_3
        (
            "cat dog elephant rabbit\n–∫–æ—Ç —Å–æ–±–∞–∫–∞ —Å–ª–æ–Ω –∫—Ä–æ–ª–∏–∫",
            {"cat": "–∫–æ—Ç", "dog": "—Å–æ–±–∞–∫–∞", "elephant": "—Å–ª–æ–Ω", "rabbit": "–∫—Ä–æ–ª–∏–∫"},
        ),
        # sample_case
        (
            "doctor engineer teacher artist\n–¥–æ–∫—Ç–æ—Ä –∏–Ω–∂–µ–Ω–µ—Ä —É—á–∏—Ç–µ–ª—å —Ö—É–¥–æ–∂–Ω–∏–∫",
            {
                "doctor": "–¥–æ–∫—Ç–æ—Ä",
                "engineer": "–∏–Ω–∂–µ–Ω–µ—Ä",
                "teacher": "—É—á–∏—Ç–µ–ª—å",
                "artist": "—Ö—É–¥–æ–∂–Ω–∏–∫",
            },
        ),
    ],
    ids=["example_1", "repeat_case", "animals", "professions"],
)
def test_11_8_2(data, expected):
    str1, str2 = data.split("\n")
    result = m_11_8_2(str1, str2)
    assert result == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 11.8.3 ===


@pytest.mark.parametrize(
    "data, expected_output",
    [
        # example_1
        ("25", 5.0),
        # test_2
        ("22", 4.69),
        # test_3
        ("0", "–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!"),
        # test_4
        ("100", 10.0),
        # test_5
        ("11", 3.32),
        # test_6
        ("-100", "–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!"),
        # sample_case
        ("12", 3.46),
    ],
    ids=["example_1", "test_2", "test_3", "test_4", "test_5", "test_6", "sample_case"],
)
def test_11_8_3(data, expected_output):
    n = float(data)
    result = m_11_8_3(n)
    assert result == expected_output, f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_output}, –ø–æ–ª—É—á–µ–Ω–æ {result}"
