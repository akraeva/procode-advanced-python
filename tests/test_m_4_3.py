import pytest
from src.module_4 import (
    calculate_platform,
    register,
    calculate_final_price,
    create_initials,
    create_profile,
)


# === Тест для задачи 4.3.2 ===


@pytest.mark.parametrize(
    "args, expected",
    [
        ((5, 10), 30),
        ((5, 10, 0), 30),
        ((5, 10, 1), 50),
        ((1, 2, 1), 2),
        ((1, 2, 0), 6),
        ((1, 2), 6),
        ((2, 5, 1), 10),
        ((2, 5, 0), 14),
        ((2, 5), 14),
    ],
)
def test_m_4_3_2(args, expected):
    assert calculate_platform(*args) == expected


# === Тест для задачи 4.3.3 ===


@pytest.mark.parametrize(
    "name, position, city, expected",
    [
        (
            "Иван",
            "Программист",
            "Москва",
            "Участник Иван зарегистрирован как Программист из города Москва.",
        ),
        (
            "Анна",
            "",
            "",
            "Участник Анна зарегистрирован как Студент из города Неизвестен.",
        ),
        (
            "Сергей",
            "",
            "Новосибирск",
            "Участник Сергей зарегистрирован как Студент из города Новосибирск.",
        ),
        (
            "Дмитрий",
            "Разработчик",
            "Санкт-Петербург",
            "Участник Дмитрий зарегистрирован как Разработчик из города Санкт-Петербург.",
        ),
        (
            "Иван",
            "Программист",
            "Москва",
            "Участник Иван зарегистрирован как Программист из города Москва.",
        ),
    ],
)
def test_m_4_3_3(name, position, city, expected):
    kwargs = {}
    if position:
        kwargs["position"] = position
    if city:
        kwargs["city"] = city
    assert register(name, **kwargs) == expected


# === Тест для задачи 4.3.4 ===


@pytest.mark.parametrize(
    "args, expected",
    [
        ((2000,), "Итоговая сумма заказа: 2000.0"),
        ((1500, 20), "Итоговая сумма заказа: 1200.0"),
        ((1000, 10, 50), "Итоговая сумма заказа: 950.0"),
        ((500, 5, 20), "Итоговая сумма заказа: 495.0"),
        ((800, 15), "Итоговая сумма заказа: 680.0"),
        (
            (1200, 0, 30),
            "Итоговая сумма заказа: 1230.0",
        ),
        ((3000, 25, 100), "Итоговая сумма заказа: 2350.0"),
    ],
)
def test_m_4_3_4(args, expected):
    assert calculate_final_price(*args) == expected


# === Тест для задачи 4.3.5 ===


@pytest.mark.parametrize(
    "name, surname, patronymic, expected",
    [
        ("валентина", "косцова", "алексеевна", "КВА"),
        ("Дмитрий", "волков", "серафимович", "ВДС"),
        ("александр", "пешков", "викторович", "ПАВ"),
        ("николай", "семёнов", "павлович", "СНП"),
        ("Мария", "берегова", "александровна", "БМА"),
        ("СВЕТЛАНА", "Черникова", "леонидовна", "ЧСЛ"),
        ("Алексей", "Воронцов", "степанович", "ВАС"),
    ],
)
def test_m_4_3_5(name, surname, patronymic, expected):
    assert create_initials(name, surname, patronymic) == expected


# === Тест для задачи 4.3.6 ===


@pytest.mark.parametrize(
    "name, power_level, ability, expected",
    [
        (
            "Тор",
            95,
            "Молния",
            "Герой: Тор\nУровень силы: 95\nСуперспособность: Молния",
        ),
        (
            "Халк",
            -10,
            "Сила",
            "Ошибка: уровень силы должен быть положительным числом",
        ),
        (
            "Тор",
            95,
            "Молния",
            "Герой: Тор\nУровень силы: 95\nСуперспособность: Молния",
        ),
        (
            "",
            90,
            "Сила",
            "Ошибка: имя не может быть пустым",
        ),
        (
            "Чёрная вдова",
            88,
            None,
            "Герой: Чёрная вдова\nУровень силы: 88\nСуперспособность: Неизвестная суперспособность",
        ),
        (
            "Капитан Америка",
            92,
            "Щит",
            "Герой: Капитан Америка\nУровень силы: 92\nСуперспособность: Щит",
        ),
    ],
)
def test_m_4_3_6(name, power_level, ability, expected):
    if ability is None:
        result = create_profile(name, power_level)
    else:
        result = create_profile(name, power_level, ability)
    assert result == expected
