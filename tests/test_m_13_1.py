import pytest
from src.module_13 import (
    m_13_1_1,
    m_13_1_2,
    m_13_1_3,
    m_13_1_4,
    m_13_1_5,
    m_13_1_6,
    m_13_1_7,
    m_13_1_8,
)

# для запуска pytest -k "test_13_1_" -q -x --tb=short


# === Тест для задачи 13.1.1 ===


@pytest.mark.parametrize(
    "matrix, expected",
    [
        # matrix1 — базовая 3×3
        (
            [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9],
            ],
            [6, 15, 24],
        ),
        # matrix2 — отрицательные числа
        (
            [
                [-1, -2, -3],
                [-4, -5, -6],
                [-7, -8, -9],
            ],
            [-6, -15, -24],
        ),
        # matrix3 — все нули
        (
            [
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
            ],
            [0, 0, 0],
        ),
        # matrix4 — одна строка
        (
            [[1, 2, 3]],
            [6],
        ),
        # matrix5 — пустая матрица
        (
            [],
            [],
        ),
        # matrix6 — разная длина строк
        (
            [
                [1, 2],
                [3, 4, 5],
                [6, 7, 8, 9],
            ],
            [3, 12, 30],
        ),
        # matrix7 — большая матрица 1000×1000
        (
            [[1] * 1000 for _ in range(1000)],
            [1000] * 1000,
        ),
    ],
    ids=[
        "basic_3x3",
        "negative_numbers",
        "zeros",
        "single_row",
        "empty_matrix",
        "irregular_rows",
        "large_matrix_1000x1000",
    ],
)
def test_13_1_1(matrix, expected):
    assert m_13_1_1(matrix) == expected


# === Тест для задачи 13.1.2 ===


@pytest.mark.parametrize(
    "matrix, expected",
    [
        # Пример из условия
        (
            [
                ["П", "р", "и"],
                ["в", "е", "т"],
                ["!", "!", "!"],
            ],
            "Пв!ре!ит!",
        ),
        # matrix1 — 3 строки, 4 столбца
        (
            [
                ["А", "б", "в", "г"],
                ["д", "е", "ж", "з"],
                ["и", "й", "к", "л"],
            ],
            "Адибейвжкгзл",
        ),
        # matrix2 — 4 строки, 3 столбца
        (
            [
                ["Х", "е", "л"],
                ["л", "о", " "],
                [" ", " ", "м"],
                ["м", "и", "р"],
            ],
            "Хл мео ил мр",
        ),
        # matrix3 — разные символы, проверяем порядок чтения
        (
            [
                ["Ш", "и", "ф"],
                ["р", "о", "в"],
                ["а", "я", "с"],
                ["!", "!", "!"],
            ],
            "Шра!иоя!фвс!",
        ),
        # Дополнительный тест — одна строка
        (
            [["O", "K", "!"]],
            "OK!",
        ),
        # Дополнительный тест — один столбец
        (
            [["А"], ["Б"], ["В"]],
            "АБВ",
        ),
    ],
    ids=[
        "example_basic",
        "matrix1_3x4",
        "matrix2_4x3",
        "matrix3_symbols",
        "single_row",
        "single_column",
    ],
)
def test_13_1_2(matrix, expected):
    assert m_13_1_2(matrix) == expected


# === Тест для задачи 13.1.3 ===


@pytest.mark.parametrize(
    "a, b, expected",
    [
        # Пример из условия
        (
            [
                [1, 2, 3],
                [4, 5, 6],
            ],
            [
                [7, 8, 9],
                [10, 11, 12],
            ],
            [
                [8, 10, 12],
                [14, 16, 18],
            ],
        ),
        # Разный размер по столбцам
        (
            [
                [1, 2],
                [3, 4],
            ],
            [
                [5, 6, 7],
                [8, 9, 10],
            ],
            "Матрицы разного размера - сложение невозможно.",
        ),
        # Матрицы из нулей
        (
            [
                [1, 1],
                [1, 1],
            ],
            [
                [0, 0],
                [0, 0],
            ],
            [
                [1, 1],
                [1, 1],
            ],
        ),
        # Матрицы с отрицательными числами
        (
            [
                [-1, -2],
                [-3, -4],
            ],
            [
                [5, 6],
                [7, 8],
            ],
            [
                [4, 4],
                [4, 4],
            ],
        ),
        # Большие числа
        (
            [
                [1000, 2000],
                [3000, 4000],
            ],
            [
                [5000, 6000],
                [7000, 8000],
            ],
            [
                [6000, 8000],
                [10000, 12000],
            ],
        ),
        # Разное число строк
        (
            [
                [1, 2],
                [3, 4],
                [5, 6],
            ],
            [
                [7, 8],
                [9, 10],
            ],
            "Матрицы разного размера - сложение невозможно.",
        ),
        # Квадратные одинаковые матрицы 2×2
        (
            [
                [1, 2],
                [3, 4],
            ],
            [
                [5, 6],
                [7, 8],
            ],
            [
                [6, 8],
                [10, 12],
            ],
        ),
    ],
    ids=[
        "example_basic",
        "different_columns",
        "zeros_matrix",
        "negative_numbers",
        "large_numbers",
        "different_rows",
        "square_2x2",
    ],
)
def test_13_1_3(a, b, expected):
    assert m_13_1_3(a, b) == expected


# === Тест для задачи 13.1.4 ===


@pytest.mark.parametrize(
    "matrix, expected",
    [
        # Пример из условия
        (
            [
                [5, 7, 1],
                [2, 0, 9],
            ],
            [
                [5, 2],
                [7, 0],
                [1, 9],
            ],
        ),
        # Прямоугольная матрица 3x2
        (
            [
                [1, 2],
                [3, 4],
                [5, 6],
            ],
            [
                [1, 3, 5],
                [2, 4, 6],
            ],
        ),
        # Прямоугольная матрица 2x3
        (
            [
                [1, 2, 3],
                [4, 5, 6],
            ],
            [
                [1, 4],
                [2, 5],
                [3, 6],
            ],
        ),
        # Матрица 1x1
        ([[7]], [[7]]),
        # Матрица 2x3 с последовательными числами
        (
            [
                [1, 3, 5],
                [2, 4, 6],
            ],
            [
                [1, 2],
                [3, 4],
                [5, 6],
            ],
        ),
        # Квадратная 3x3
        (
            [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9],
            ],
            [
                [1, 4, 7],
                [2, 5, 8],
                [3, 6, 9],
            ],
        ),
        # Проверка на повторение одной из матриц
        (
            [
                [1, 2],
                [3, 4],
                [5, 6],
            ],
            [
                [1, 3, 5],
                [2, 4, 6],
            ],
        ),
    ],
    ids=[
        "example_basic",
        "rectangular_3x2",
        "rectangular_2x3",
        "single_element",
        "two_by_three",
        "square_3x3",
        "repeat_case",
    ],
)
def test_13_1_4(matrix, expected):
    assert m_13_1_4(matrix) == expected
