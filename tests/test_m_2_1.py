import pytest
from src.module_2 import m_2_1_1, m_2_1_2, m_2_1_3, m_2_1_4, m_2_1_5


# === Тесты для задачи 2.1.1 ===
@pytest.mark.parametrize(
    "input_data, expected",
    [
        ("510\n600\n590\n650", "Да\n09:50 - 10:50"),
        ("510\n600\n600\n700", "Нет"),
        ("300\n400\n400\n500", "Нет"),
        ("300\n400\n350\n360", "Да\n05:50 - 06:00"),
    ],
)
def test_m_2_1_1(input_data, expected):
    assert m_2_1_1(input_data) == expected


# === Тесты для задачи 2.1.2 ===
@pytest.mark.parametrize(
    "apples, bananas, expected",
    [
        (
            12,
            8,
            "Общее количество фруктов: 20\nКаждому другу достанется по 10 фруктов.",
        ),
        (7, 7, "Общее количество фруктов: 14\nКаждому другу достанется по 7 фруктов."),
        (1, 10, "Общее количество фруктов: 11\nКаждому другу достанется по 5 фруктов."),
        (
            11,
            10,
            "Общее количество фруктов: 21\nКаждому другу достанется по 10 фруктов.",
        ),
        (
            33,
            11,
            "Общее количество фруктов: 44\nКаждому другу достанется по 22 фруктов.",
        ),
        (10, 1, "Общее количество фруктов: 11\nКаждому другу достанется по 5 фруктов."),
    ],
)
def test_m_2_1_2(apples, bananas, expected):
    assert m_2_1_2(apples, bananas) == expected


# === Тесты для задачи 2.1.3 ===
@pytest.mark.parametrize(
    "name, age, number, expected",
    [
        ("Гендальф", 2019, 7, "Секретный код: 16208"),
        ("Александр", 42, 888, "Секретный код: 8370"),
        ("щпрвыщпрвэзпровэзопвыпщрщрпщо", 567890, 34, "Секретный код: 16469796"),
        ("Privetmenyazovytmag", 1000, 10, "Секретный код: 19190"),
        ("Саурон", 3333, 5, "Секретный код: 20028"),
    ],
)
def test_m_2_1_3(name, age, number, expected):
    assert (
        m_2_1_3(
            name,
            age,
            number,
        )
        == expected
    )


# === Тесты для задачи 2.1.4 ===
@pytest.mark.parametrize(
    "name, number, expected",
    [
        ("Алексей", "12345", "Код замка: 15-7"),
        ("Михаил Орловский", "28", "Код замка: 10-15"),
        ("Dagdarion Dark", "23", "Код замка: 5-13"),
        ("Александр", "42", "Код замка: 6-9"),
        ("Коля", "14", "Код замка: 5-4"),
        ("DarkHorse", "18", "Код замка: 9-9"),
    ],
)
def test_m_2_1_4(name, number, expected):
    assert m_2_1_4(name, number) == expected


# === Тесты для задачи 2.1.5 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        (["2025", "3", "456", "Будущее"], "Год прорыва: 2091"),
        (["2100", "45", "2", "Go"], "Год прорыва: 2280"),
        (["0", "50", "34", "Privet"], "Год прорыва: 650"),
        (["2000", "20", "20", "Millenium"], "Год прорыва: 2220"),
        (["1", "1", "1", "a"], "Год прорыва: 3"),
        (["5", "5", "5", "absde"], "Год прорыва: 55"),
        (["2025", "5", "555", "Python Advanced"], "Год прорыва: 2170"),
    ],
)
def test_m_2_1_5(input_data, expected):
    assert m_2_1_5(*input_data) == expected
