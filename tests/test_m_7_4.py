import pytest
from src.module_7 import (
    m_7_4_01,
    m_7_4_02,
    m_7_4_03,
    m_7_4_04,
    m_7_4_05,
    m_7_4_06,
    m_7_4_07,
    m_7_4_08,
    m_7_4_09,
    m_7_4_10,
    m_7_4_11,
    m_7_4_12,
    m_7_4_13,
)

# для запуска pytest -k "test_7_4_02" -q --tb=short --maxfail=1

# === Тест для задачи 7.4.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("Джек", "Код Джек: +7"),
        ("Артур", "Код Артур: +5"),
        (
            "Джек Воробей\n+8",
            "Джек Воробей не найден, введите новый код:\nДжек Воробей добавлен с кодом +8.",
        ),
        (
            "AK 47\n+777",
            "AK 47 не найден, введите новый код:\nAK 47 добавлен с кодом +777.",
        ),
    ],
    ids=[
        "существующее имя — Джек",
        "существующее имя — Артур",
        "новое имя — Джек Воробей",
        "новое имя — AK 47",
    ],
)
def test_7_4_01(data, expected):
    assert m_7_4_01(data) == expected


# === Тест для задачи 7.4.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "Прием это Глубина",
            ".--. .-. .. . -- -.-.- ..-.. - --- -.-.- --. .-.. ..- -... .. -. .-",
        ),
        (
            "Нашли сейф",
            "-. .- ---- .-.. .. -.-.- ... . .--- ..-.",
        ),
        (
            "абвгдеёжзийклмнопрстуфхцчшщъыьэюя",
            ".- -... .-- --. -.. . ...- --.. .. .--- -.- .-.. -- -. --- .--. .-. ... - ..- ..-. .... -.-. ---. ---- --.- --.-- -.-- -..- ..-.. ..-- .-.-",
        ),
    ],
    ids=["Test_0", "Test_2", "Test_3"],
)
def test_7_4_02(data, expected):
    assert m_7_4_02(data) == expected


# === Тест для задачи 7.4.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "..-.. - --- -.-.- -... . .-. . --. -.-.- .--. .-. .. . --",
            "ЭТО БЕРЕГ ПРИЕМ",
        ),
        (
            "Прием как слышно",
            "?",
        ),
        (
            ".- -... .-- --. -.. . ...- --.. .. .--- -.- .-.. -- -. --- .--. .-. ... - ..- ..-. .... -.-. ---. ---- --.- --.-- -.-- -..- ..-.. ..-- .-.-",
            "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",
        ),
    ],
    ids=["Test_0", "Test_2", "Test_3"],
)
def test_7_4_03(data, expected):
    assert m_7_4_03(data) == expected


# === Тест для задачи 7.4.4 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("1 3 3 4 -9 9 -5 6 7 10 -10 -5", "1 3 4 -9 9 -5 6 7 10 -10"),
        ("100 1000 100 1000 -100 -1000 -100 -1000", "100 1000 -100 -1000"),
        ("1 2 3 4 5 6 7 8 9 0", "1 2 3 4 5 6 7 8 9 0"),
        ("1 2 3 4 8 -9 0 -5 -9", "1 2 3 4 8 -9 0 -5"),
    ],
    ids=["Test_0", "Test_2", "Test_3", "Test_4"],
)
def test_7_4_04(data, expected):
    assert m_7_4_04(data) == expected


# === Тест для задачи 7.4.5 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "луна марс юпитер сатурн нептун венера млечный путь орбита ракета марс "
            "луна марс юпитер венера ракета марс луна спутник марс луна марс ракета марс "
            "спутник марс венера луна ракета млечный спутник ракета марс венера спутник "
            "луна ракета марс",
            "марс",
        ),
        (
            "звезда планета комета галактика метеор астероид спутник орбита солнце космос "
            "комета планета звезда галактика метеор астероид спутник орбита солнце космос "
            "комета планета звезда галактика метеор астероид спутник орбита солнце космос "
            "комета планета",
            "планета",
        ),
        (
            "галактика звезда комета космос планета орбита ракета звезда комета астероид "
            "спутник супернова метеор звезда комета экзопланета луна марс звезда комета "
            "юпитер венера сатурн нептун звезда комета уран комета звезда",
            "комета",
        ),
        (
            "ракета звезда ракета космос звезда ракета планета ракета спутник звезда ракета "
            "космос планета ракета звезда спутник ракета космос планета ракета звезда "
            "спутник ракета космос звезда планета ракета спутник звезда космос планета "
            "ракета звезда спутник ракета",
            "ракета",
        ),
        (
            "солнце луна звезда комета астероид солнце луна звезда комета астероид солнце "
            "луна звезда комета астероид солнце луна звезда комета астероид солнце луна "
            "звезда комета астероид солнце луна звезда комета астероид солнце луна звезда "
            "комета астероид солнце луна звезда комета астероид солнце луна звезда комета "
            "астероид солнце луна звезда комета астероид",
            "солнце",
        ),
    ],
    ids=["Test_0", "Test_2", "Test_3", "Test_4", "Test_5"],
)
def test_7_4_05(data, expected):
    assert m_7_4_05(data) == expected


# === Тест для задачи 7.4.6 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            [
                ("Барсик", "Иван", "Иванов", 35),
                ("Рэкс", "Пётр", "Петров", 42),
                ("Бобик", "Иван", "Иванов", 35),
                ("Шарик", "Мария", "Смирнова", 28),
                ("Тузик", "Пётр", "Петров", 42),
                ("Рокси", "Елена", "Кузнецова", 31),
                ("Майло", "Иван", "Иванов", 35),
                ("Лайма", "Мария", "Смирнова", 28),
            ],
            {
                ("Иван", "Иванов", 35): ["Барсик", "Бобик", "Майло"],
                ("Пётр", "Петров", 42): ["Рэкс", "Тузик"],
                ("Мария", "Смирнова", 28): ["Шарик", "Лайма"],
                ("Елена", "Кузнецова", 31): ["Рокси"],
            },
        ),
        (
            [
                ("Белка", "Алексей", "Смирнов", 30),
                ("Рекс", "Ирина", "Петрова", 27),
                ("Шарик", "Алексей", "Смирнов", 30),
                ("Бим", "Иван", "Иванов", 40),
                ("Тузик", "Иван", "Иванов", 40),
                ("Майло", "Алексей", "Смирнов", 30),
                ("Лайма", "Ирина", "Петрова", 27),
            ],
            {
                ("Алексей", "Смирнов", 30): ["Белка", "Шарик", "Майло"],
                ("Ирина", "Петрова", 27): ["Рекс", "Лайма"],
                ("Иван", "Иванов", 40): ["Бим", "Тузик"],
            },
        ),
    ],
    ids=["Test_0", "Test_2"],
)
def test_7_4_06(data, expected):
    assert m_7_4_06(data) == expected


# === Тест для задачи 7.4.7 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "агентX агентY агентX агентZ агентY агентX",
            "агентX агентY агентX_1 агентZ агентY_1 агентX_2",
        ),
        (
            "разведка разведка разведка операция",
            "разведка разведка_1 разведка_2 операция",
        ),
        (
            "код1 код2 код1 код3 код2 код1 код3",
            "код1 код2 код1_1 код3 код2_1 код1_2 код3_1",
        ),
        (
            "штурм штурм штурм штурм",
            "штурм штурм_1 штурм_2 штурм_3",
        ),
        (
            "оперативник спецоперация оперативник оперативник спецоперация спецоперация оперативник",
            "оперативник спецоперация оперативник_1 оперативник_2 спецоперация_1 спецоперация_2 оперативник_3",
        ),
        (
            "код док пок лок волк",
            "код док пок лок волк",
        ),
    ],
    ids=["Test_0", "Test_2", "Test_3", "Test_4", "Test_5", "Test_6"],
)
def test_7_4_07(data, expected):
    assert m_7_4_07(data) == expected


# === Тест для задачи 7.4.8 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("listen\nsilent", "ДА"),
        ("кот\nкоот", "НЕТ"),
        ("пила\nлипа", "ДА"),
        ("Слово\nволос", "ДА"),
        ("книга\nигран", "НЕТ"),
    ],
    ids=["Test_0", "Test_2", "Test_3", "Test_4", "Test_5"],
)
def test_7_4_08(data, expected):
    assert m_7_4_08(data) == expected


# === Тест для задачи 7.4.9 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "5\n1234567890 Арсений\n9876543210 Марина\n5551234567 Арсений\n7778889990 Дмитрий\n4445556667 Арсений\n3\narseniy\nМарина\nИван",
            "абонент не найден\n9876543210\nабонент не найден",
        ),
        (
            "6\n1112223334 Кристина\n2223334445 Михаил\n3334445556 Кристина\n4445556667 Виктор\n5556667778 Михаил\n6667778889 Александр\n4\nКристина\nмихаил\nАлександр\nАндрей",
            "1112223334 3334445556\n2223334445 5556667778\n6667778889\nабонент не найден",
        ),
        (
            "3\n1111111111 Ivan\n2222222222 Maria\n3333333333 Sergey\n3\nivan\nMARIA\nsergey",
            "1111111111\n2222222222\n3333333333",
        ),
        (
            "7\n9876543210 Natalia\n8765432109 Natalia\n7654321098 Alexey\n6543210987 Vladimir\n5432109876 Alexey\n4321098765 Olga\n3210987654 Natalia\n4\nnatalia\nalexey\nolga\nsergey",
            "9876543210 8765432109 3210987654\n7654321098 5432109876\n4321098765\nабонент не найден",
        ),
    ],
    ids=["Test_0", "Test_2", "Test_3", "Test_4"],
)
def test_7_4_09(data, expected):
    assert m_7_4_09(data) == expected


# === Тест для задачи 7.4.10 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "5\nАлиса 10 2\nбоб 5 1\nалиса 8 3\nЧарли 12 0\nБоб 7 2",
            "Алиса 18 5\nбоб 12 3\nЧарли 12 0",
        ),
        ("4\nJohn 20 5\nMARY 15 2\njohn 10 3\nmary 5 1", "John 30 8\nMARY 20 3"),
        (
            "6\nalex 50 10\nAlex 25 5\nALEx 30 15\ndiana 40 20\nDIANA 20 10\neva 10 2",
            "alex 105 30\ndiana 60 30\neva 10 2",
        ),
        ("1\nSam 100 50", "Sam 100 50"),
        (
            "7\nLinda 12 3\nGeorge 20 10\nlinda 8 2\ngeorge 15 5\nRobert 5 0\nrobert 10 2\nLinda 7 1",
            "Linda 27 6\nGeorge 35 15\nRobert 15 2",
        ),
    ],
    ids=["Test_0", "Test_2", "Test_3", "Test_4", "Test_5"],
)
def test_7_4_10(data, expected):
    assert m_7_4_10(data) == expected


# === Тест для задачи 7.4.11 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "Hello, world!",
            {
                "H": [0],
                "e": [1],
                "l": [2, 3, 10],
                "o": [4, 8],
                ",": [5],
                " ": [6],
                "w": [7],
                "r": [9],
                "d": [11],
                "!": [12],
            },
        ),
        ("aaa", {"a": [0, 1, 2]}),
        ("AbBa", {"A": [0], "b": [1], "B": [2], "a": [3]}),
        (
            "test, test!",
            {
                "t": [0, 3, 6, 9],
                "e": [1, 7],
                "s": [2, 8],
                ",": [4],
                " ": [5],
                "!": [10],
            },
        ),
        ("Python", {"P": [0], "y": [1], "t": [2], "h": [3], "o": [4], "n": [5]}),
        (
            "Data-Driven",
            {
                "D": [0, 5],
                "a": [1, 3],
                "t": [2],
                "-": [4],
                "r": [6],
                "i": [7],
                "v": [8],
                "e": [9],
                "n": [10],
            },
        ),
        (
            "I love Python!",
            {
                "I": [0],
                " ": [1, 6],
                "l": [2],
                "o": [3, 11],
                "v": [4],
                "e": [5],
                "P": [7],
                "y": [8],
                "t": [9],
                "h": [10],
                "n": [12],
                "!": [13],
            },
        ),
    ],
    ids=["Test_0", "Test_2", "Test_3", "Test_4", "Test_5", "Test_6", "Test_7"],
)
def test_7_4_11(data, expected):
    assert m_7_4_11(data) == expected


# === Тест для задачи 7.4.12 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            {"A1": 45, "B2": 60, "C3": 30, "D4": 55, "E5": 30, "F6": 70},
            {"A1": 45, "B2": 60, "D4": 55, "F6": 70},
        ),
        (
            {"ID001": 75, "ID002": 50, "ID003": 90, "ID004": 50, "ID005": 80},
            {"ID001": 75, "ID003": 90, "ID005": 80},
        ),
        (
            {
                "emp1": 88,
                "emp2": 92,
                "emp3": 75,
                "emp4": 88,
                "emp5": 75,
                "emp6": 99,
                "emp7": 92,
            },
            {"emp1": 88, "emp2": 92, "emp4": 88, "emp6": 99, "emp7": 92},
        ),
        (
            {
                "X1": 55,
                "X2": 45,
                "X3": 65,
                "X4": 45,
                "X5": 75,
                "X6": 85,
                "X7": 95,
                "X8": 45,
            },
            {"X1": 55, "X3": 65, "X5": 75, "X6": 85, "X7": 95},
        ),
        (
            {
                "userA": 10,
                "userB": 20,
                "userC": 5,
                "userD": 15,
                "userE": 5,
                "userF": 25,
            },
            {"userA": 10, "userB": 20, "userD": 15, "userF": 25},
        ),
    ],
    ids=["Test_0", "Test_2", "Test_3", "Test_4", "Test_5"],
)
def test_7_4_12(data, expected):
    assert m_7_4_12(data) == expected


# === Тест для задачи 7.4.13 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("Hello World!", "4433555555666096667775553111"),
        ("Python Advanced", "799984466666023888266222333"),
        ("Work is life или no", "966677755044477770555444333330066666"),
        (".,!?", "1111111111"),
        ("          ", "0000000000"),
        (" go", "04666"),
    ],
    ids=["Test_01", "Test_02", "Test_2", "Test_3", "Test_4", "Test_5"],
)
def test_7_4_13(data, expected):
    assert m_7_4_13(data) == expected
