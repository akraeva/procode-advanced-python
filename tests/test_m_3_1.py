import pytest
from src.module_3 import (
    m_3_1_1,
    m_3_1_2,
    m_3_1_3,
    m_3_1_4,
    m_3_1_5,
    m_3_1_6,
    m_3_1_7,
    m_3_1_8,
    m_3_1_9,
    m_3_1_10,
)


# === Тесты для задачи 3.1.1 ===


@pytest.mark.parametrize(
    "name, age, expected",
    [
        (
            "Джек",
            25,
            "Добро пожаловать на корабль, Джек! Тебе 25 лет – самое время стать пиратом!",
        ),
        (
            "Наташа",
            18,
            "Добро пожаловать на корабль, Наташа! Тебе 18 лет – самое время стать пиратом!",
        ),
        (
            "Александр",
            33,
            "Добро пожаловать на корабль, Александр! Тебе 33 лет – самое время стать пиратом!",
        ),
    ],
)
def test_m_3_1_1(name, age, expected):
    assert m_3_1_1(name, age) == expected


# === Тесты для задачи 3.1.2 ===


@pytest.mark.parametrize(
    "weapon, expected",
    [
        ("Пистолет", "Вы выбрали Пистолет, его урон: 25"),
        ("Сабля", "Вы выбрали Сабля, его урон: 15"),
        ("Крюк", "Вы выбрали Крюк, его урон: 10"),
    ],
)
def test_m_3_1_2(weapon, expected):
    assert m_3_1_2(weapon) == expected


# === Тесты для задачи 3.1.3 ===


@pytest.mark.parametrize(
    "message, expected",
    [
        (
            "Золото спрятано под пальмой копать восточнее три шага прямо",
            "под восточнее прямо",
        ),
        (
            "Клад найден, но его охраняет Чёрный Кракен! Нужно сражаться, пока у него не кончится",
            "но Чёрный сражаться, него",
        ),
        (
            "Карта записана шифром Цезаря в котором каждая буква сдвинута на одну вперед",
            "шифром котором сдвинута вперед",
        ),
        (
            "идеальный для начала изучения программирования на языке",
            "начала на",
        ),
    ],
)
def test_m_3_1_3(message, expected):
    assert m_3_1_3(message) == expected


# === Тесты для задачи 3.1.4 ===


@pytest.mark.parametrize(
    "chest, expected",
    [
        ("В сундуке лежат карты и золото.", "В сундуке золото!"),
        ("В сундуке лежат карты и череп.", "В сундуке нет золота!"),
        ("В сундуке лежат карты и золто.", "В сундуке нет золота!"),
        ("В сундуке лежат карты и олото.", "В сундуке нет золота!"),
        ("В сундуке лежат карты и з о л о т о.", "В сундуке нет золота!"),
        ("В сундуке золото!", "В сундуке золото!"),
        ("золото", "В сундуке золото!"),
        ("В сундуке золото! В сундуке золото!", "В сундуке золото!"),
    ],
)
def test_m_3_1_4(chest, expected):
    assert m_3_1_4(chest) == expected


# === Тесты для задачи 3.1.5 ===


@pytest.mark.parametrize(
    "password, expected",
    [
        ("Чёрный кракен", "Доступ разрешён!"),
        ("Красный кракен", "Неверный пароль!"),
        ("Чёрный кракен", "Доступ разрешён!"),
        ("Чёрный    кракен", "Неверный пароль!"),
        ("кракен", "Неверный пароль!"),
        ("Чёрный", "Неверный пароль!"),
        ("Чёрный кракен!", "Неверный пароль!"),
    ],
)
def test_m_3_1_5(password, expected):
    assert m_3_1_5(password) == expected


# === Тесты для задачи 3.1.6 ===


@pytest.mark.parametrize(
    "coins, expected",
    [
        (
            "10 15 8 20 5",
            "Пират 1: 10 монет\n"
            "Пират 2: 15 монет\n"
            "Пират 3: 8 монет\n"
            "Пират 4: 20 монет\n"
            "Пират 5: 5 монет",
        ),
        (
            "100 50 25",
            "Пират 1: 100 монет\n" "Пират 2: 50 монет\n" "Пират 3: 25 монет",
        ),
        (
            "1 2 3 4 5 6",
            "Пират 1: 1 монет\n"
            "Пират 2: 2 монет\n"
            "Пират 3: 3 монет\n"
            "Пират 4: 4 монет\n"
            "Пират 5: 5 монет\n"
            "Пират 6: 6 монет",
        ),
    ],
)
def test_m_3_1_6(coins, expected):
    assert m_3_1_6(coins) == expected


# === Тесты для задачи 3.1.7 ===


@pytest.mark.parametrize(
    "water_level, expected",
    [
        (
            25,
            "Сбрасываем воду... Уровень: 20\n"
            "Сбрасываем воду... Уровень: 15\n"
            "Сбрасываем воду... Уровень: 10\n"
            "Сбрасываем воду... Уровень: 5\n"
            "Корабль спасён!",
        ),
        (
            12,
            "Сбрасываем воду... Уровень: 7\n"
            "Сбрасываем воду... Уровень: 2\n"
            "Корабль спасён!",
        ),
        (
            100,
            "Сбрасываем воду... Уровень: 95\n"
            "Сбрасываем воду... Уровень: 90\n"
            "Сбрасываем воду... Уровень: 85\n"
            "Сбрасываем воду... Уровень: 80\n"
            "Сбрасываем воду... Уровень: 75\n"
            "Сбрасываем воду... Уровень: 70\n"
            "Сбрасываем воду... Уровень: 65\n"
            "Сбрасываем воду... Уровень: 60\n"
            "Сбрасываем воду... Уровень: 55\n"
            "Сбрасываем воду... Уровень: 50\n"
            "Сбрасываем воду... Уровень: 45\n"
            "Сбрасываем воду... Уровень: 40\n"
            "Сбрасываем воду... Уровень: 35\n"
            "Сбрасываем воду... Уровень: 30\n"
            "Сбрасываем воду... Уровень: 25\n"
            "Сбрасываем воду... Уровень: 20\n"
            "Сбрасываем воду... Уровень: 15\n"
            "Сбрасываем воду... Уровень: 10\n"
            "Сбрасываем воду... Уровень: 5\n"
            "Корабль спасён!",
        ),
        (4, "Корабль спасён!"),
        (
            6,
            "Сбрасываем воду... Уровень: 1\n" "Корабль спасён!",
        ),
        (5, "Корабль спасён!"),
        (
            10,
            "Сбрасываем воду... Уровень: 5\n" "Корабль спасён!",
        ),
    ],
)
def test_m_3_1_7(water_level, expected):
    assert m_3_1_7(water_level) == expected


# === Тесты для задачи 3.1.8 ===


@pytest.mark.parametrize(
    "islands, expected",
    [
        (
            "Тортуга, Барбадос, Ямайка",
            ["Тортуга", "Барбадос", "Ямайка", "Остров Чёрного Кракена"],
        ),
        (
            "Санто-Доминго, Куба, Пуэрто-Рико",
            ["Санто-Доминго", "Куба", "Пуэрто-Рико", "Остров Чёрного Кракена"],
        ),
        (
            "Санто-Доминго, Куба, Пуэрто-Рико, Санто Доминиго, Куба, Пуэрто Рико",
            [
                "Санто-Доминго",
                "Куба",
                "Пуэрто-Рико",
                "Санто Доминиго",
                "Куба",
                "Пуэрто Рико",
                "Остров Чёрного Кракена",
            ],
        ),
        (
            "Тартуга",
            ["Тартуга", "Остров Чёрного Кракена"],
        ),
    ],
)
def test_m_3_1_8(islands, expected):
    assert m_3_1_8(islands) == expected


# === Тесты для задачи 3.1.9 ===


@pytest.mark.parametrize(
    "cipher_text, expected",
    [
        ("Нрспнб йкягя ропюсям!", "Остров клада спрятан!"),
        ("Vnqkc ne Ohqzsdr!", "World of Pirates!"),
        ("Zmbgnq ld hm sgd zrr", "Anchor me in the ass"),
        ("жнкнсн!", "золото!"),
        ("Гтпзй жяцдл тръ рапзк", "Дурик зачем усы сбрил"),
        ("Ohqzsd Sqdzrtqd Hrkzmc!", "Pirate Treasure Island!"),
    ],
)
def test_m_3_1_9(cipher_text, expected):
    assert m_3_1_9(cipher_text) == expected


# === Тесты для задачи 3.1.10 ===


@pytest.mark.parametrize(
    "kraken_health, attacks, expected",
    [
        (
            25,
            "5 10 3 7",
            "Пират 1 атакует! У Кракена осталось 20 жизней.\n"
            "Пират 2 атакует! У Кракена осталось 10 жизней.\n"
            "Пират 3 атакует! У Кракена осталось 7 жизней.\n"
            "Пират 4 атакует! У Кракена осталось 0 жизней.\n"
            "Чёрный Кракен повержен! Клад твой! 🏆💰\n"
            "Последний удар нанёс пират №4!",
        ),
        (
            50,
            "12 8 7 6 5 4 3",
            "Пират 1 атакует! У Кракена осталось 38 жизней.\n"
            "Пират 2 атакует! У Кракена осталось 30 жизней.\n"
            "Пират 3 атакует! У Кракена осталось 23 жизней.\n"
            "Пират 4 атакует! У Кракена осталось 17 жизней.\n"
            "Пират 5 атакует! У Кракена осталось 12 жизней.\n"
            "Пират 6 атакует! У Кракена осталось 8 жизней.\n"
            "Пират 7 атакует! У Кракена осталось 5 жизней.\n"
            "Кракен не побеждён, так как осталось 5 жизней.",
        ),
        (
            30,
            "5 5 5 5 5 5",
            "Пират 1 атакует! У Кракена осталось 25 жизней.\n"
            "Пират 2 атакует! У Кракена осталось 20 жизней.\n"
            "Пират 3 атакует! У Кракена осталось 15 жизней.\n"
            "Пират 4 атакует! У Кракена осталось 10 жизней.\n"
            "Пират 5 атакует! У Кракена осталось 5 жизней.\n"
            "Пират 6 атакует! У Кракена осталось 0 жизней.\n"
            "Чёрный Кракен повержен! Клад твой! 🏆💰\n"
            "Последний удар нанёс пират №6!",
        ),
    ],
)
def test_m_3_1_10(kraken_health, attacks, expected):
    assert m_3_1_10(kraken_health, attacks) == expected
