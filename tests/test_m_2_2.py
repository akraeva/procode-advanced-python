import pytest
from src.module_2 import m_2_2_1, m_2_2_2, m_2_2_3, m_2_2_4, m_2_2_5, m_2_2_6


# === Тесты для задачи 2.2.1 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        (
            ["42", "3.14", "Привет", "True"],
            "Тип первого значения: <class 'int'>\n"
            "Тип второго значения: <class 'float'>\n"
            "Тип третьего значения: <class 'str'>\n"
            "Тип четвертого значения: <class 'bool'>",
        ),
        (
            ["1.0", "1", "False", "Прив"],
            "Тип первого значения: <class 'float'>\n"
            "Тип второго значения: <class 'int'>\n"
            "Тип третьего значения: <class 'bool'>\n"
            "Тип четвертого значения: <class 'str'>",
        ),
        (
            ["1", "2", "3", "4"],
            "Тип первого значения: <class 'int'>\n"
            "Тип второго значения: <class 'int'>\n"
            "Тип третьего значения: <class 'int'>\n"
            "Тип четвертого значения: <class 'int'>",
        ),
        (
            ["Привет", "Мой", "Друг", "!"],
            "Тип первого значения: <class 'str'>\n"
            "Тип второго значения: <class 'str'>\n"
            "Тип третьего значения: <class 'str'>\n"
            "Тип четвертого значения: <class 'str'>",
        ),
    ],
)
def test_m_2_2_1(input_data, expected):
    assert m_2_2_1(*input_data) == expected


# === Тесты для задачи 2.2.2 ===


@pytest.mark.parametrize(
    "coins, pirates, expected",
    [
        (
            500,
            8,
            "Монеты на расходы: 50\n"
            "Каждый пират получит 56 монет.\n"
            "Останется 2 монет.",
        ),
        (
            1000,
            13,
            "Монеты на расходы: 100\n"
            "Каждый пират получит 69 монет.\n"
            "Останется 3 монет.",
        ),
        (
            2200,
            7,
            "Монеты на расходы: 220\n"
            "Каждый пират получит 282 монет.\n"
            "Останется 6 монет.",
        ),
        (
            700,
            7,
            "Монеты на расходы: 70\n"
            "Каждый пират получит 90 монет.\n"
            "Останется 0 монет.",
        ),
        (
            800,
            15,
            "Монеты на расходы: 80\n"
            "Каждый пират получит 48 монет.\n"
            "Останется 0 монет.",
        ),
        (
            1000,
            5,
            "Монеты на расходы: 100\n"
            "Каждый пират получит 180 монет.\n"
            "Останется 0 монет.",
        ),
    ],
)
def test_m_2_2_2(coins, pirates, expected):
    assert m_2_2_2(coins, pirates) == expected


# === Тесты для задачи 2.2.3 ===


@pytest.mark.parametrize(
    "victor, mikhail, expected",
    [
        (120, 80, "Виктор охраняет больше"),
        (
            80,
            80,
            "Они охраняют одинаковые участки\n"
            "Ни у кого из стражей нет участка больше 100 квадратных метров",
        ),
        (101, 100, "Виктор охраняет больше"),
        (100, 101, "Михаил охраняет больше"),
        (150, 100, "Виктор охраняет больше"),
        (100, 150, "Михаил охраняет больше"),
        (200, 150, "Виктор охраняет больше"),
        (
            99,
            100,
            "Михаил охраняет больше\n"
            "Ни у кого из стражей нет участка больше 100 квадратных метров",
        ),
        (
            100,
            99,
            "Виктор охраняет больше\n"
            "Ни у кого из стражей нет участка больше 100 квадратных метров",
        ),
        (
            50,
            50,
            "Они охраняют одинаковые участки\n"
            "Ни у кого из стражей нет участка больше 100 квадратных метров",
        ),
        (
            99,
            99,
            "Они охраняют одинаковые участки\n"
            "Ни у кого из стражей нет участка больше 100 квадратных метров",
        ),
    ],
)
def test_m_2_2_3(victor, mikhail, expected):
    assert m_2_2_3(victor, mikhail) == expected


# === Тесты для задачи 2.2.4 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        (
            '100 "питон" 99.99 False 123abc',
            "int\nstr\nfloat\nbool\nНеверный тип данных",
        ),
        (
            '"Python" 3.14159 777 "Error"',
            "str\nfloat\nint\nstr",
        ),
        (
            '56 -78 9.01 "Мир" False',
            "int\nint\nfloat\nstr\nbool",
        ),
        (
            '"Привет" 123 45.67 True',
            "str\nint\nfloat\nbool",
        ),
        (
            '"Привет" 123 45.67 True 0.5',
            "str\nint\nfloat\nbool\nfloat",
        ),
        (
            '-42 42 3.14 "Земля" True 123abc',
            "int\nint\nfloat\nstr\nbool\nНеверный тип данных",
        ),
    ],
)
def test_m_2_2_4(input_data, expected):
    assert m_2_2_4(input_data) == expected


# === Тесты для задачи 2.2.5 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        ("10 8", "Победил Десятиком!"),
        ("30 30", "Победил Десятиком!"),
        ("10 100", "Победил Половинник!"),
        ("10 40", "Ничья! Числа равны."),
        ("100 100", "Победил Десятиком!"),
        ("10 42", "Победил Половинник!"),
    ],
)
def test_m_2_2_5(input_data, expected):
    assert m_2_2_5(input_data) == expected


# === Тесты для задачи 2.2.6 ===


@pytest.mark.parametrize(
    "num, expected",
    [
        (5, "Конечная позиция Счетчика: 20"),
        (6, "Конечная позиция Счетчика: 7"),
        (100, "Конечная позиция Счетчика: 38"),
        (101, "Конечная позиция Счетчика: 308"),
        (0, "Конечная позиция Счетчика: 5"),
        (3, "Конечная позиция Счетчика: 14"),
        (2, "Конечная позиция Счетчика: 5"),
        (5, "Конечная позиция Счетчика: 20"),
        (2222, "Конечная позиция Счетчика: 745"),
        (1111, "Конечная позиция Счетчика: 3338"),
    ],
)
def test_m_2_2_6(num, expected):
    assert m_2_2_6(num) == expected
