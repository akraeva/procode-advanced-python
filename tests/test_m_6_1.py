import pytest
from src.module_6 import (
    m_6_1_1,
    m_6_1_2,
    m_6_1_3,
    m_6_1_4,
    m_6_1_5,
    m_6_1_6,
    m_6_1_7,
    m_6_1_8,
    m_6_1_9,
    m_6_1_10,
)


# === Тест для задачи 6.1.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("7\n14\n21\n", (7, 14, 21)),
        ("1\n1\n1\n", (1, 1, 1)),
        ("1\n0\n1\n", (1, 0, 1)),
        ("12\n13\n1111\n", (12, 13, 1111)),
        ("4\n5\n6\n", (4, 5, 6)),
    ],
)
def test_6_1_1(data, expected):
    assert m_6_1_1(data) == expected


# === Тест для задачи 6.1.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("12\n5\n8\n", 8),
        ("2\n1\n3\n", 2),
        ("3\n1\n2\n", 2),
        ("11\n80\n101\n", 80),
        ("1001\n800\n901\n", 901),
        ("1\n2\n3\n", 2),
    ],
)
def test_6_1_2(data, expected):
    assert m_6_1_2(data) == expected


# === Тест для задачи 6.1.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "луна звезда солнце луна ветер солнце огонь",
            "5\n('луна', 'звезда', 'солнце', 'луна', 'ветер', 'солнце', 'огонь')",
        ),
        (
            "камень песок камень лед песок лед",
            "3\n('камень', 'песок', 'камень', 'лед', 'песок', 'лед')",
        ),
        (
            "камень песок камень лед песок лед солнце вода",
            "5\n('камень', 'песок', 'камень', 'лед', 'песок', 'лед', 'солнце', 'вода')",
        ),
        (
            "меч щит лук копье меч топор копье лук арбалет",
            "6\n('меч', 'щит', 'лук', 'копье', 'меч', 'топор', 'копье', 'лук', 'арбалет')",
        ),
        (
            "огонь вода земля воздух эфир огонь вода",
            "5\n('огонь', 'вода', 'земля', 'воздух', 'эфир', 'огонь', 'вода')",
        ),
    ],
)
def test_6_1_3(data, expected):
    assert m_6_1_3(data) == expected


# === Тест для задачи 6.1.4 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "3 8 15 1 22 10",
            "1 22\n(3, 8, 15, 10)",
        ),
        (
            "11 9 7 5 3 1",
            "1 11\n(9, 7, 5, 3)",
        ),
        (
            "101 50 55 77 88 90 1001 0 11 1001",
            "0 1001\n(101, 50, 55, 77, 88, 90, 11)",
        ),
        (
            "1000 1000 0 0",
            "0 1000\n()",
        ),
        (
            "11 11 13 44 55 55",
            "11 55\n(13, 44)",
        ),
        (
            "5 12 8 2 7 14 3",
            "2 14\n(5, 12, 8, 7, 3)",
        ),
    ],
)
def test_6_1_4(data, expected):
    assert m_6_1_4(data) == expected


# === Тест для задачи 6.1.5 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "5,8,12,3,10,7",
            "45\n(40, 37, 33, 42, 35, 38)",
        ),
        (
            "1, 3,5,7,9",
            "25\n(24, 22, 20, 18, 16)",
        ),
        (
            "10,20,30,40",
            "100\n(90, 80, 70, 60)",
        ),
        (
            "3,6,9,12,15",
            "45\n(42, 39, 36, 33, 30)",
        ),
        (
            "2,4,6,8",
            "20\n(18, 16, 14, 12)",
        ),
    ],
)
def test_6_1_5(data, expected):
    assert m_6_1_5(data) == expected


# === Тест для задачи 6.1.6 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "☀️ ☀️ ☀️ 🌙 ☀️ ☀️",
            (5, 3),
        ),
        (
            "🔥 ☀️ 🔥 ☀️ 🔥 ☀️",
            (3, -1),
        ),
        (
            "☀️ 🌙 ☀️ 🔥 🌪️ 🌙 🌊",
            (2, 3),
        ),
        (
            "🌙 🔥 ⚡ ☀️ 🌊",
            (1, 0),
        ),
        (
            "⚡ 🌪️ 🌪️ 🔥 ☀️ ⚡ 🌙 💨",
            (1, 3),
        ),
        (
            "🌞 🌛 🌞 🌊 🌛 ☀️ 🌊 🔥",
            (1, 5),
        ),
        (
            "🌊 🌊 🌊 🔥 🔥 🔥",
            (0, -1),
        ),
        (
            "🌊 🌊 ☀️ 🔥 ☀️ 🔥 🌪️",
            (2, 6),
        ),
    ],
)
def test_6_1_6(data, expected):
    assert m_6_1_6(data) == expected


# === Тест для задачи 6.1.7 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "о р к т е ж р т о к е ж",
            "('е', 'ж', 'к', 'о', 'р', 'т')\n6",
        ),
        (
            "т е м н о т а м т е н а",
            "('а', 'е', 'м', 'н', 'о', 'т')\n6",
        ),
        (
            "с в е т в с т е",
            "('в', 'е', 'с', 'т')\n4",
        ),
        (
            "о г о р о д",
            "('г', 'д', 'о', 'р')\n2",
        ),
        (
            "в",
            "('в',)\n0",
        ),
        (
            "а р о н к у ч в а й",
            "('а', 'в', 'й', 'к', 'н', 'о', 'р', 'у', 'ч')\n1",
        ),
        (
            "ф ы в а п р о л",
            "('а', 'в', 'л', 'о', 'п', 'р', 'ф', 'ы')\n0",
        ),
        (
            "м а г и я м г а и я",
            "('а', 'г', 'и', 'м', 'я')\n5",
        ),
    ],
)
def test_6_1_7(data, expected):
    assert m_6_1_7(data) == expected


# === Тест для задачи 6.1.8 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "A B C D E F",
            "('D', 'E', 'F')",
        ),
        (
            "X Y",
            "Ошибка! Недостаточно символов!",
        ),
        (
            "1 2 3",
            "('1', '2', '3')",
        ),
        (
            "A B C D E F G H I J",
            "('A', 'B', 'C', 'H', 'I', 'J')",
        ),
        (
            "1 2 3 4 5",
            "('3', '4', '5')",
        ),
        (
            "A A a a A A",
            "('a', 'A', 'A')",
        ),
        (
            "Ю Ю",
            "Ошибка! Недостаточно символов!",
        ),
        (
            "в",
            "Ошибка! Недостаточно символов!",
        ),
        (
            "1 2 3 4 5 6 7",
            "('1', '2', '3', '5', '6', '7')",
        ),
        (
            "п р и в е т д р у г",
            "('п', 'р', 'и', 'р', 'у', 'г')",
        ),
    ],
)
def test_6_1_8(data, expected):
    assert m_6_1_8(data) == expected


# === Тест для задачи 6.1.9 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "⚡ 🔥 🌪️\n💎 🌪️ 🔥",
            ("⚡", "🌪️", "💎", "🔥"),
        ),
        (
            "🔥 ⚡ 🌊\n🌊 ⚡ ☄️ 🔥 🌋",
            ("🌋", "☄️", "🌊", "⚡", "🔥"),
        ),
        (
            "🦄 🌈 ⭐\n✨ 🌟 🔮",
            ("✨", "⭐", "🌈", "🌟", "🔮", "🦄"),
        ),
        (
            "💎 🔥 🌙\n✨ 🔮 💎",
            ("🔮", "✨", "🌙", "🔥", "💎"),
        ),
        (
            "💎 🔥 🌙\n✨ 🔮",
            ("🔮", "✨", "🌙", "🔥", "💎"),
        ),
        (
            "🌞 🌙 🌎\n🌊 ⚡ ☄️ 🔥 🌋",
            ("☄️", "⚡", "🌊", "🌋", "🌎", "🌙", "🌞", "🔥"),
        ),
        (
            "🌞 🌙 🌎\n✨ 🌀 🔮",
            ("✨", "🌀", "🌎", "🌙", "🌞", "🔮"),
        ),
    ],
)
def test_6_1_9(data, expected):
    assert m_6_1_9(data) == expected


# === Тест для задачи 6.1.10 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "М * А Х Р М ! Р А Х ?",
            "МАХРМРАХ\nКлючевая буква: М",
        ),
        (
            "Т ! А Й Н * А ?",
            "ТАЙНА\nКлючевая буква: Й",
        ),
        (
            "П О Р Т А Л * Л А Р Т П !",
            "ПОРТАЛЛАРТП\nКлючевая буква: Л",
        ),
        (
            "С В Е Т * В С Т Е !",
            "СВЕТВСТЕ\nКлючевая буква: В",
        ),
        (
            "! П Р И В , ” % ; 4 Е Т !",
            "ПРИВЕТ\nКлючевая буква: В",
        ),
        (
            "З В Е * З Д А !",
            "ЗВЕЗДА\nКлючевая буква: З",
        ),
    ],
)
def test_6_1_10(data, expected):
    assert m_6_1_10(data) == expected
