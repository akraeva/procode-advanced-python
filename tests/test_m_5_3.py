import pytest
from src.module_5 import m_5_3_1, m_5_3_2, m_5_3_3, m_5_3_4, m_5_3_5


# === Тест для задачи 5.3.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "apple banana cherry",
            "Количество фруктов в списке: 3\n"
            "Фрукт, который идет первым по алфавиту: apple\n"
            "Фрукт, который идет последним по алфавиту: cherry",
        ),
        (
            "kiwi watermelon strawberry blueberry",
            "Количество фруктов в списке: 4\n"
            "Фрукт, который идет первым по алфавиту: blueberry\n"
            "Фрукт, который идет последним по алфавиту: watermelon",
        ),
        (
            "peach plum apple banana",
            "Количество фруктов в списке: 4\n"
            "Фрукт, который идет первым по алфавиту: apple\n"
            "Фрукт, который идет последним по алфавиту: plum",
        ),
        (
            "apple",
            "Количество фруктов в списке: 1\n"
            "Фрукт, который идет первым по алфавиту: apple\n"
            "Фрукт, который идет последним по алфавиту: apple",
        ),
        (
            "orange pear grape mango",
            "Количество фруктов в списке: 4\n"
            "Фрукт, который идет первым по алфавиту: grape\n"
            "Фрукт, который идет последним по алфавиту: pear",
        ),
    ],
)
def test_5_3_1(data, expected):
    assert m_5_3_1(data) == expected


# === Тест для задачи 5.3.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "(1, 2) (10, 20) (5, 15)",
            "Кортеж с минимальным первым элементом: (1, 2)\n"
            "Кортеж с максимальным первым элементом: (10, 20)",
        ),
        (
            "(12, 15) (5, 10) (8, 9)",
            "Кортеж с минимальным первым элементом: (5, 10)\n"
            "Кортеж с максимальным первым элементом: (12, 15)",
        ),
        (
            "(15, 25) (3, 5) (10, 30)",
            "Кортеж с минимальным первым элементом: (3, 5)\n"
            "Кортеж с максимальным первым элементом: (15, 25)",
        ),
        (
            "(100, 200) (50, 100) (75, 150)",
            "Кортеж с минимальным первым элементом: (50, 100)\n"
            "Кортеж с максимальным первым элементом: (100, 200)",
        ),
        (
            "(7, 8) (3, 4) (5, 6)",
            "Кортеж с минимальным первым элементом: (3, 4)\n"
            "Кортеж с максимальным первым элементом: (7, 8)",
        ),
    ],
)
def test_5_3_2(data, expected):
    assert m_5_3_2(data) == expected


# === Тест для задачи 5.3.3 ===


@pytest.mark.parametrize(
    "name, expected",
    [
        ("Vitorio Zanzara", "Vitorio Zanzara в сборе!"),
        ("Паша Техник", "Паша Техник не найден в списке!"),
        ("Рик", "Рик в сборе!"),
        ("Dagdarion Dark", "Dagdarion Dark в сборе!"),
        ("Алекс", "Алекс не найден в списке!"),
    ],
)
def test_5_3_3(name, expected):
    assert m_5_3_3(name) == expected


# === Тест для задачи 5.3.4 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("7000", "Каждый бандит получит: 1000 монет."),
        ("5000", "Общая сумма добычи не делится поровну между бандитами."),
        ("14000", "Каждый бандит получит: 2000 монет."),
        ("20000", "Общая сумма добычи не делится поровну между бандитами."),
    ],
)
def test_5_3_4(data, expected):
    assert m_5_3_4(data) == expected


# === Тест для задачи 5.3.5 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "Буря\n60\n",
            "Лошадь Буря пройдет 60 км за 1 часов и 15 минут.",
        ),
        (
            "Сивка Бурка\n100\n",
            "Лошадь с таким именем не найдена.",
        ),
        (
            "Черный ворон\n111\n",
            "Лошадь Черный ворон пройдет 111 км за 2 часов и 28 минут.",
        ),
        (
            "Стальной конь\n217\n",
            "Лошадь Стальной конь пройдет 217 км за 4 часов и 20 минут.",
        ),
        (
            "Стальной конь\n5\n",
            "Лошадь Стальной конь пройдет 5 км за 0 часов и 6 минут.",
        ),
        (
            "Черный ворон\n11\n",
            "Лошадь Черный ворон пройдет 11 км за 0 часов и 15 минут.",
        ),
    ],
)
def test_5_3_5(data, expected):
    assert m_5_3_5(data) == expected
