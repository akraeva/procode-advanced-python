import pytest
from src.module_2 import m_2_4_1, m_2_4_2, m_2_4_3, m_2_4_4


# === Тесты для задачи 2.4.1 ===


@pytest.mark.parametrize(
    "level, experience, expected",
    [
        (49, 20, "Выберите меч!"),
        (50, 19, "Выберите лук и стрелы!"),
        (50, 20, "Выберите магический посох!"),
        (100, 19, "Выберите лук и стрелы!"),
        (100, 20, "Выберите магический посох!"),
        (101, 0, "Выберите любое оружие на ваш выбор!"),
    ],
)
def test_m_2_4_1(level, experience, expected):
    assert m_2_4_1(level, experience) == expected


# === Тесты для задачи 2.4.2 ===


@pytest.mark.parametrize(
    "temp, expected",
    [
        (-5, "Наденьте зимнюю куртку."),
        (-1, "Наденьте зимнюю куртку."),
        (0, "Наденьте лёгкую куртку."),
        (10, "Наденьте лёгкую куртку."),
        (15, "Наденьте лёгкую куртку."),
        (16, "Наденьте футболку."),
    ],
)
def test_m_2_4_2(temp, expected):
    assert m_2_4_2(temp) == expected


# === Тесты для задачи 2.4.3 ===


@pytest.mark.parametrize(
    "coins, expected",
    [
        (1001, "Герой может купить замок."),
        (1000, "Герой может купить армию."),
        (500, "Герой может купить армию."),
        (499, "Герой может купить несколько предметов или артефактов."),
    ],
)
def test_m_2_4_3(coins, expected):
    assert m_2_4_3(coins) == expected


# === Тесты для задачи 2.4.4 ===


@pytest.mark.parametrize(
    "time, answer, expected",
    [
        ("день", "да", "Людоеды съели вас."),
        ("ночь", "да", "Людоеды поймали вас."),
        ("ночь", "нет", "Вы прошли в деревню."),
        ("день", "нет", "Вы прошли в деревню."),
    ],
)
def test_m_2_4_4(time, answer, expected):
    assert m_2_4_4(time, answer) == expected
