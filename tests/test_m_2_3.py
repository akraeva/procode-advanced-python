import pytest
from src.module_2 import m_2_3_1, m_2_3_2, m_2_3_3, m_2_3_4, m_2_3_5, m_2_3_6


# === Тесты для задачи 2.3.1 ===


@pytest.mark.parametrize(
    "password, expected",
    [
        ("Hello123", "Пароль принят!"),
        ("1password", "Пароль не принят!"),
        ("123", "Пароль не принят!"),
        ("Pass", "Пароль не принят!"),
        ("A234567", "Пароль не принят!"),
        ("A2345678", "Пароль принят!"),
        ("A2345678 f", "Пароль не принят!"),
        ("Password", "Пароль принят!"),
    ],
)
def test_m_2_3_1(password, expected):
    assert m_2_3_1(password) == expected


# === Тесты для задачи 2.3.2 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        ("кодировка", "АКВОРИДОК"),
        ("Python", "NOHTYP"),
        ("12345678", "87654321"),
        ("Пробел", "ЛЕБОРП"),
        ("Пробел2", "2ЛЕБОРП"),
        ("Это очень легко.", ".ОКГЕЛ ЬНЕЧО ОТЭ"),
    ],
)
def test_m_2_3_2(input_data, expected):
    assert m_2_3_2(input_data) == expected


# === Тесты для задачи 2.3.3 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        ("А сила и небо - это небо и сила А", "Тайна не разгадана"),
        ("Обеликс и Астерикс сражаются с римлянами", "Тайна не разгадана"),
        ("За пирогами они поскакали", "Тайна не разгадана"),
        ("A man, a plan, a canal, Panama", "Тайна разгадана"),
        ("А роза упала на лапу Азора", "Тайна разгадана"),
    ],
)
def test_m_2_3_3(input_data, expected):
    assert m_2_3_3(input_data) == expected


# === Тесты для задачи 2.3.4 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        ("АЙНСБ", "АРМИЯ\nЧапаев, приказ выполнен!"),
        ("РПУТ", "СТОП\nЧапаев, действуй быстро, шифр не раскрыт!"),
        ("АЙНСБ_ЛПСР", "ПРОК АРМИЯ\nЧапаев, приказ выполнен!"),
        ("АЙНСБ_ОВНСЛУ", "ТКРМБН АРМИЯ\nЧапаев, приказ выполнен!"),
        ("АРОГПА_ЛОШРПАВ", "БЯОПЧНК ЯОВНПЯ\nЧапаев, действуй быстро, шифр не раскрыт!"),
        ("ЛПСФ", "УРОК\nЧапаев, действуй быстро, шифр не раскрыт!"),
    ],
)
def test_m_2_3_4(input_data, expected):
    assert m_2_3_4(input_data) == expected


# === Тесты для задачи 2.3.5 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        ("Тайна магия код магия магия", "Магия найдена 3 раз(а).\nРезультат: Тйнкод"),
        ("Сила магия магия", "Магия найдена 2 раз(а).\nРезультат: яигамяигамалиС"),
        ("Привет магия это круто", "Магия найдена 1 раз(а).\nРезультат: Пвемагяэку"),
        (
            "А где слово магия магия макака магия магия",
            "Магия найдена 4 раз(а).\nРезультат: яигамяигамакакамяигамяигамоволседгА",
        ),
        (
            "А где то тут слово магия маг",
            "Магия найдена 1 раз(а).\nРезультат: Адеуслвия",
        ),
        ("А где слово?", "Магия найдена 0 раз(а).\nРезультат: ?оволседгА"),
    ],
)
def test_m_2_3_5(input_data, expected):
    assert m_2_3_5(input_data) == expected


# === Тесты для задачи 2.3.6 ===


@pytest.mark.parametrize(
    "message, n, args, expected",
    [
        (
            "Thequickbrownfoxjumps",
            4,
            ["2 5", "-5 -1", "0 10", "3 -4"],
            "equ\njump\nThickbrown\n",
        ),
        ("HelloWorldPython", 3, ["1 4", "-6 -2", "0 5"], "ell\nPyth\nHoWor"),
        ("ProgrammingIsFun", 4, ["0 3", "-5 -1", "4 10", "3 -6"], "Pro\nIsFu\nmingn\n"),
        ("abcdefghijklm", 3, ["2 5", "-7 -4", "0 8"], "cde\nghi\nabfjklm"),
        ("SuperSecretCode", 2, ["0 5", "-5 -1"], "Super\ntCod"),
        ("AmazingPythonCode", 3, ["1 6", "-5 -2", "0 7"], "mazin\nnCo\nAgPytho"),
        (
            "ЯучусьнакурсеPythonAdvanced.",
            4,
            ["13 -1", "1 6", "1 3", "1 -1"],
            "PythonAdvanced\nучусь\nна\nкурсе",
        ),
    ],
)
def test_m_2_3_6(message, n, args, expected):
    assert m_2_3_6(message, n, *args) == expected
