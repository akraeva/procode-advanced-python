import json
import os
import pytest
from src.module_14 import (
    m_14_2_1,
    m_14_2_2,
    m_14_2_3,
    m_14_2_4,
)

# –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pytest -k "test_14_2_" -q -x --tb=short


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 14.2.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            '{"status": "danger", "source": "Alpha-3", "timestamp": "2403-07-21T22:15Z"}',
            "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏–º–∏ –º–µ—Ä—ã!",
        ),
        (
            '{"status": "ok", "source": "Beta-9", "timestamp": "2403-07-21T22:18Z"}',
            "‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.",
        ),
        (
            '{"status": "unknown", "signal": "weak"}',
            "‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.",
        ),
        (
            '{"status": "danger", "source": "Orion-5", "priority": "high"}',
            "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏–º–∏ –º–µ—Ä—ã!",
        ),
        (
            '{"status": "ok", "source": "Nova-1", "timestamp": "2403-12-01T08:00Z"}',
            "‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.",
        ),
        (
            '{"status": "standby", "module": "Scanner-7", "battery": "80%"}',
            "‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.",
        ),
    ],
)
def test_14_2_1(data, expected):
    assert m_14_2_1(data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 14.2.2 ===


@pytest.mark.parametrize(
    "data, expected_output",
    [
        (
            '{"–∂–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ": 2, "–ø–∞–Ω–µ–ª–∏": 5, "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": 3}',
            "–ú–æ–¥—É–ª—å: –∂–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 2\n"
            "–ú–æ–¥—É–ª—å: –ø–∞–Ω–µ–ª–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 5\n"
            "–ú–æ–¥—É–ª—å: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 3\n"
            "–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: 10",
        ),
        (
            '{"—Ç–æ–ø–ª–∏–≤–æ": 4, "–¥–∞—Ç—á–∏–∫–∏": 1}',
            "–ú–æ–¥—É–ª—å: —Ç–æ–ø–ª–∏–≤–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 4\n"
            "–ú–æ–¥—É–ª—å: –¥–∞—Ç—á–∏–∫–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1\n"
            "–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: 5",
        ),
        (
            '{"–∑–∞—â–∏—Ç–∞": 1, "–ø–∏—Ç–∞–Ω–∏–µ": 2, "—Å–≤—è–∑—å": 2}',
            "–ú–æ–¥—É–ª—å: –∑–∞—â–∏—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1\n"
            "–ú–æ–¥—É–ª—å: –ø–∏—Ç–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 2\n"
            "–ú–æ–¥—É–ª—å: —Å–≤—è–∑—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 2\n"
            "–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: 5",
        ),
        (
            '{"–∫–∞–±–µ–ª–∏": 10, "–ø–∞–Ω–µ–ª–∏": 10, "–º–æ–Ω–∏—Ç–æ—Ä—ã": 5}',
            "–ú–æ–¥—É–ª—å: –∫–∞–±–µ–ª–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10\n"
            "–ú–æ–¥—É–ª—å: –ø–∞–Ω–µ–ª–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10\n"
            "–ú–æ–¥—É–ª—å: –º–æ–Ω–∏—Ç–æ—Ä—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 5\n"
            "–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: 25",
        ),
        (
            '{"—Ä–µ—Å–∏–≤–µ—Ä—ã": 7}',
            "–ú–æ–¥—É–ª—å: —Ä–µ—Å–∏–≤–µ—Ä—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 7\n" "–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: 7",
        ),
        (
            '{"–∑–∞—Ä—è–¥–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏": 3, "—Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è": 2}',
            "–ú–æ–¥—É–ª—å: –∑–∞—Ä—è–¥–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 3\n"
            "–ú–æ–¥—É–ª—å: —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 2\n"
            "–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: 5",
        ),
        (
            '{"–∫–∏—Å–ª–æ—Ä–æ–¥": 3, "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": 4, "–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã": 2}',
            "–ú–æ–¥—É–ª—å: –∫–∏—Å–ª–æ—Ä–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 3\n"
            "–ú–æ–¥—É–ª—å: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 4\n"
            "–ú–æ–¥—É–ª—å: –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 2\n"
            "–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: 9",
        ),
    ],
)
def test_14_2_2(data, expected_output):
    assert m_14_2_2(data) == expected_output


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 14.2.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "Orion-7\nTrue\nsoil, ice, microorganisms\n124\n",
            {
                "mission": "Orion-7",
                "success": True,
                "samples": ["soil", "ice", "microorganisms"],
                "duration": 124,
            },
        ),
        (
            "Luna-3\nTrue\nrock, dust\n77\n",
            {
                "mission": "Luna-3",
                "success": True,
                "samples": ["rock", "dust"],
                "duration": 77,
            },
        ),
        (
            "Mars-X\nFalse\nsand, gas\n310\n",
            {
                "mission": "Mars-X",
                "success": False,
                "samples": ["sand", "gas"],
                "duration": 310,
            },
        ),
    ],
)
def test_14_2_3(tmp_path, data, expected, monkeypatch):
    os.chdir(tmp_path)
    output = m_14_2_3(data)
    parsed_output = json.loads(output)
    assert parsed_output == expected

    report_path = tmp_path / "report.json"
    assert report_path.exists(), "–§–∞–π–ª report.json –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"
    with open(report_path, encoding="utf-8") as f:
        file_data = json.load(f)
    assert file_data == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 14.2.4 ===


@pytest.mark.parametrize(
    "data, expected_summary, expected",
    [
        (
            '{"id": "XZ-91", "mass": 4.7, "radioactive": true, "components": ["crystal", "metal", "unknown"]}',
            "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç XZ-91 —Å–æ–¥–µ—Ä–∂–∏—Ç 3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞(–æ–≤).",
            {
                "id": "XZ-91",
                "mass": 4.7,
                "radioactive": True,
                "components": ["crystal", "metal", "unknown"],
            },
        ),
        (
            '{"id": "AL-23", "mass": 12.5, "radioactive": false, "components": ["carbon", "silicon"]}',
            "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç AL-23 —Å–æ–¥–µ—Ä–∂–∏—Ç 2 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞(–æ–≤).",
            {
                "id": "AL-23",
                "mass": 12.5,
                "radioactive": False,
                "components": ["carbon", "silicon"],
            },
        ),
        (
            '{"id": "BT-00", "mass": 0.9, "radioactive": false, "components": []}',
            "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç BT-00 —Å–æ–¥–µ—Ä–∂–∏—Ç 0 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞(–æ–≤).",
            {
                "id": "BT-00",
                "mass": 0.9,
                "radioactive": False,
                "components": [],
            },
        ),
    ],
)
def test_14_2_4(tmp_path, data, expected_summary, expected):
    os.chdir(tmp_path)
    lines = m_14_2_4(data).strip().split("\n", 1)
    assert lines[0] == expected_summary
    assert json.loads(lines[1]) == expected

    file_path = tmp_path / "artifact.json"
    assert file_path.exists(), "–§–∞–π–ª artifact.json –Ω–µ —Å–æ–∑–¥–∞–Ω"
    with open(file_path, encoding="utf-8") as file:
        saved = json.load(file)
    assert saved == expected
