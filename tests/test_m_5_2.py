import pytest
from src.module_5 import m_5_2_1, m_5_2_2, m_5_2_3, m_5_2_4, m_5_2_5, m_5_2_6


# === Тест для задачи 5.2.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("2\n5\n", "Результат среза: ('шкура', 'песок', 'кристалл')"),
        (
            "0\n5\n",
            "Результат среза: ('мантия', 'зелье', 'шкура', 'песок', 'кристалл')",
        ),
        ("3\n6\n", "Результат среза: ('песок', 'кристалл', 'огонь')"),
        (
            "1\n-1\n",
            "Результат среза: ('зелье', 'шкура', 'песок', 'кристалл', 'огонь')",
        ),
        ("-1\n-4\n", "Результат среза: ()"),
        ("-4\n-1\n", "Результат среза: ('песок', 'кристалл', 'огонь')"),
        ("1\n3\n", "Результат среза: ('зелье', 'шкура')"),  # sample
    ],
)
def test_5_2_1(data, expected):
    assert m_5_2_1(data) == expected


# === Тест для задачи 5.2.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("Алексей", "Возраст: 25, Должность: разработчик"),
        ("Мария", "Возраст: 35, Должность: директор"),
        ("Коля", "Сотрудник не найден."),
    ],
)
def test_5_2_2(data, expected):
    assert m_5_2_2(data) == expected


# === Тест для задачи 5.2.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "0",
            "Название: Перо феникса\nСила: 5\nРедкость: Очень редкий\nЭффект: Воскрешение",
        ),
        (
            "1",
            "Название: Лунный камень\nСила: 3\nРедкость: Редкий\nЭффект: Усиление магии",
        ),
        (
            "2",
            "Название: Черный песок\nСила: 2\nРедкость: Обычный\nЭффект: Защита от огня",
        ),
    ],
)
def test_5_2_3(data, expected):
    assert m_5_2_3(data) == expected


# === Тест для задачи 5.2.4 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "Тартар\n8000\nОгненная магия\n",
            (
                "('Эльдорадо', 'Люминор', 'Арканум', 'Тартар')\n"
                "(5000, 7000, 12000, 8000)\n"
                "('Земная магия', 'Воздушная магия', 'Водная магия', 'Огненная магия')"
            ),
        ),
        (
            "Та\n800\nОгненная\n",
            (
                "('Эльдорадо', 'Люминор', 'Арканум', 'Та')\n"
                "(5000, 7000, 12000, 800)\n"
                "('Земная магия', 'Воздушная магия', 'Водная магия', 'Огненная')"
            ),
        ),
    ],
)
def test_5_2_4(data, expected):
    assert m_5_2_4(data) == expected


# === Тест для задачи 5.2.5 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "4\nДжон, Главная роль\nМайк, Второстепенная роль\nАнна, Главная роль\nСергей, Второстепенная роль\n",
            "Персонажи, играющие главную роль:\n('Джон', 'Главная роль')\n('Анна', 'Главная роль')",
        ),
        (
            "3\nАлекс, Второстепенная роль\nОля, Второстепенная роль\nИван, Второстепенная роль\n",
            "Персонажи отсутствуют",
        ),
        (
            "4\nСаша, Главная роль\nИрина, Второстепенная роль\nМаксим, Главная роль\nЕлена, Второстепенная роль\n",
            "Персонажи, играющие главную роль:\n('Саша', 'Главная роль')\n('Максим', 'Главная роль')",
        ),
        (
            "3\nАлекс, Главная роль\nОля, Второстепенная роль\nИван, Главная роль\n",
            "Персонажи, играющие главную роль:\n('Алекс', 'Главная роль')\n('Иван', 'Главная роль')",
        ),
    ],
)
def test_5_2_5(data, expected):
    assert m_5_2_5(data) == expected


# === Тест для задачи 5.2.6 ===


@pytest.mark.parametrize(
    "dish, expected",
    [
        ("Пицца", 'Общее количество заказов "Пицца": 8'),
        ("Торт", 'Общее количество заказов "Торт": 0'),
        ("Кофе", 'Общее количество заказов "Кофе": 3'),
        ("Салат", 'Общее количество заказов "Салат": 4'),
        ("Кола", 'Общее количество заказов "Кола": 5'),
        ("Пирог", 'Общее количество заказов "Пирог": 0'),
        ("Сок", 'Общее количество заказов "Сок": 3'),
    ],
)
def test_5_2_6(dish, expected):
    assert m_5_2_6(dish) == expected
