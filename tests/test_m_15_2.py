import pytest
from src.module_15 import (
    m_15_2_1,
    m_15_2_2,
    m_15_2_3,
    m_15_2_4,
    m_15_2_5,
    m_15_2_6,
    m_15_2_7,
    m_15_2_8,
    m_15_2_9,
    m_15_2_10,
)

# для запуска pytest -k "test_15_2_" -q --tb=short -x


# === Тест для задачи 15.2.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # default example
        (
            "MOVE JUMP WAIT MOVE SCAN MOVE ATTACK WAIT",
            "['MOVE', 'JUMP', 'WAIT', 'MOVE', 'SCAN', 'MOVE', 'ATTACK', 'WAIT']\n"
            "Всего команд: 8\n"
            "Уникальных команд: 5\n"
            "Чаще всего используется: MOVE",
        ),
        # jump_most
        (
            "JUMP DODGE JUMP JUMP DODGE RUN",
            "['JUMP', 'DODGE', 'JUMP', 'JUMP', 'DODGE', 'RUN']\n"
            "Всего команд: 6\n"
            "Уникальных команд: 3\n"
            "Чаще всего используется: JUMP",
        ),
        # hide_most
        (
            "HIDE WAIT WAIT HIDE HIDE HIDE WAIT ATTACK",
            "['HIDE', 'WAIT', 'WAIT', 'HIDE', 'HIDE', 'HIDE', 'WAIT', 'ATTACK']\n"
            "Всего команд: 8\n"
            "Уникальных команд: 3\n"
            "Чаще всего используется: HIDE",
        ),
        # single_command
        (
            "RUN RUN RUN RUN",
            "['RUN', 'RUN', 'RUN', 'RUN']\n"
            "Всего команд: 4\n"
            "Уникальных команд: 1\n"
            "Чаще всего используется: RUN",
        ),
        # tie_run_first
        (
            "RUN RUN RUN RUN e e e e",
            "['RUN', 'RUN', 'RUN', 'RUN', 'e', 'e', 'e', 'e']\n"
            "Всего команд: 8\n"
            "Уникальных команд: 2\n"
            "Чаще всего используется: RUN",
        ),
        # scan_wait_pattern (sample input)
        (
            "SCAN WAIT SCAN WAIT SCAN WAIT SCAN WAIT",
            "['SCAN', 'WAIT', 'SCAN', 'WAIT', 'SCAN', 'WAIT', 'SCAN', 'WAIT']\n"
            "Всего команд: 8\n"
            "Уникальных команд: 2\n"
            "Чаще всего используется: SCAN",
        ),
    ],
    ids=[
        "default_example",
        "jump_most",
        "hide_most",
        "single_command",
        "tie_run_first",
        "scan_wait_pattern",
    ],
)
def test_15_2_1(data, expected):
    assert m_15_2_1(data) == expected


# === Тест для задачи 15.2.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # default_example
        (
            "Лазерный нож,Нанощит,Граната,Импульсная винтовка,Медкомплект",
            "['Лазерный нож', 'Нанощит', 'Граната', 'Импульсная винтовка', 'Медкомплект']\n"
            "Всего предметов: 5\n"
            "Самый короткий предмет: Нанощит\n"
            "Самый длинный предмет: Импульсная винтовка",
        ),
        # short_long_clear
        (
            "Карта,Нож,Плащ-невидимка,Шифратор",
            "['Карта', 'Нож', 'Плащ-невидимка', 'Шифратор']\n"
            "Всего предметов: 4\n"
            "Самый короткий предмет: Нож\n"
            "Самый длинный предмет: Плащ-невидимка",
        ),
        # long_and_short_clear
        (
            "Блокнот,Радио,Шлем,Термодетонатор,Фонарик",
            "['Блокнот', 'Радио', 'Шлем', 'Термодетонатор', 'Фонарик']\n"
            "Всего предметов: 5\n"
            "Самый короткий предмет: Шлем\n"
            "Самый длинный предмет: Термодетонатор",
        ),
        # first_short_first_long
        (
            "Ключ,Карта доступа,Пластид,Мини-граната,Торт",
            "['Ключ', 'Карта доступа', 'Пластид', 'Мини-граната', 'Торт']\n"
            "Всего предметов: 5\n"
            "Самый короткий предмет: Ключ\n"
            "Самый длинный предмет: Карта доступа",
        ),
        # mixed_case_letters
        (
            "Ф,ф,ввв,ввв,ммм,м,м",
            "['Ф', 'ф', 'ввв', 'ввв', 'ммм', 'м', 'м']\n"
            "Всего предметов: 7\n"
            "Самый короткий предмет: Ф\n"
            "Самый длинный предмет: ввв",
        ),
        # sample_input
        (
            "Кинжал,Щит,Меч,Зелье здоровья",
            "['Кинжал', 'Щит', 'Меч', 'Зелье здоровья']\n"
            "Всего предметов: 4\n"
            "Самый короткий предмет: Щит\n"
            "Самый длинный предмет: Зелье здоровья",
        ),
    ],
    ids=[
        "default_example",
        "short_long_clear",
        "long_and_short_clear",
        "first_short_first_long",
        "mixed_case_letters",
        "sample_input",
    ],
)
def test_15_2_2(data, expected):
    assert m_15_2_2(data) == expected


# === Тест для задачи 15.2.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # default_example
        (
            "3\n1 2 3\n4 5 6\n7 8 9",
            "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n"
            "Координата [1][0]: 4\n"
            "Зона с максимальной суммой: [7, 8, 9]\n"
            "Максимальная координата: 9",
        ),
        # negative_and_positive
        (
            "4\n-5 -3 -2\n0 0 0\n9 9 9\n1 2 3",
            "[[-5, -3, -2], [0, 0, 0], [9, 9, 9], [1, 2, 3]]\n"
            "Координата [1][0]: 0\n"
            "Зона с максимальной суммой: [9, 9, 9]\n"
            "Максимальная координата: 9",
        ),
        # large_numbers
        (
            "3\n100 200 300\n-100 -200 -300\n50 50 50",
            "[[100, 200, 300], [-100, -200, -300], [50, 50, 50]]\n"
            "Координата [1][0]: -100\n"
            "Зона с максимальной суммой: [100, 200, 300]\n"
            "Максимальная координата: 300",
        ),
        # increasing_zones
        (
            "5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5",
            "[[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4], [5, 5, 5]]\n"
            "Координата [1][0]: 2\n"
            "Зона с максимальной суммой: [5, 5, 5]\n"
            "Максимальная координата: 5",
        ),
        # mixed_values
        (
            "6\n12 -5 33\n44 0 22\n-10 -20 -30\n100 200 50\n0 0 0\n15 25 35",
            "[[12, -5, 33], [44, 0, 22], [-10, -20, -30], [100, 200, 50], [0, 0, 0], [15, 25, 35]]\n"
            "Координата [1][0]: 44\n"
            "Зона с максимальной суммой: [100, 200, 50]\n"
            "Максимальная координата: 200",
        ),
        # single_zone
        (
            "1\n10 20 30",
            "[[10, 20, 30]]\n"
            "Недостаточно зон для доступа к [1][0]\n"
            "Зона с максимальной суммой: [10, 20, 30]\n"
            "Максимальная координата: 30",
        ),
        # sample_input
        (
            "2\n10 15 20\n5 5 5",
            "[[10, 15, 20], [5, 5, 5]]\n"
            "Координата [1][0]: 5\n"
            "Зона с максимальной суммой: [10, 15, 20]\n"
            "Максимальная координата: 20",
        ),
    ],
    ids=[
        "default_example",
        "negative_and_positive",
        "large_numbers",
        "increasing_zones",
        "mixed_values",
        "single_zone",
        "sample_input",
    ],
)
def test_15_2_3(data, expected):
    assert m_15_2_3(data) == expected


# === Тест для задачи 15.2.4 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # default_example
        (
            "3\nКибер-Тролль\n45\n15\nТёмный Рыцарь\n50\n20\nЖелезный Титан\n70\n10",
            "Самый опасный враг: Железный Титан\n"
            "Уровень угрозы: 80\n"
            "Итоговый урон по врагу: 50\n"
            "Исход боя: Победа",
        ),
        # dragon_vs_mage
        (
            "2\nОгненный Дракон\n55\n20\nТёмный Маг\n35\n40",
            "Самый опасный враг: Огненный Дракон\n"
            "Уровень угрозы: 75\n"
            "Итоговый урон по врагу: 40\n"
            "Исход боя: Победа",
        ),
        # flame_lord
        (
            "4\nТень\n10\n5\nСтражник\n20\n15\nВладыка Пламени\n40\n30\nВихрь\n25\n25",
            "Самый опасный враг: Владыка Пламени\n"
            "Уровень угрозы: 70\n"
            "Итоговый урон по врагу: 30\n"
            "Исход боя: Победа",
        ),
        # desert_warrior
        (
            "3\nШтормовой Рыцарь\n30\n10\nЯдовитый Паук\n25\n5\nПустынный Воин\n35\n35",
            "Самый опасный враг: Пустынный Воин\n"
            "Уровень угрозы: 70\n"
            "Итоговый урон по врагу: 25\n"
            "Исход боя: Победа",
        ),
        # army_of_titans
        (
            "10\nСтраж Вечности\n20\n30\nТитан Бездны\n30\n45\nКристальный Лорд\n25\n40\n"
            "Тёмный Жрец\n35\n35\nОгненный Страж\n40\n45\nЖелезный Колосс\n45\n50\n"
            "Ледяной Дух\n15\n10\nЭлектрический Демон\n55\n50\nКаменный Голем\n10\n90\n"
            "Стальной Генерал\n60\n50",
            "Самый опасный враг: Стальной Генерал\n"
            "Уровень угрозы: 110\n"
            "Итоговый урон по врагу: 10\n"
            "Исход боя: Победа",
        ),
        # stone_golem_loss
        (
            "8\nСтраж Вечности\n20\n30\nТитан Бездны\n30\n45\nКристальный Лорд\n25\n40\n"
            "Тёмный Жрец\n35\n35\nОгненный Страж\n40\n45\nЖелезный Колосс\n45\n50\n"
            "Ледяной Дух\n15\n10\nКаменный Голем\n10\n90",
            "Самый опасный враг: Каменный Голем\n"
            "Уровень угрозы: 100\n"
            "Итоговый урон по врагу: 0\n"
            "Исход боя: Поражение",
        ),
        # sample_input
        (
            "2\nБроневой Страж\n30\n70\nКристальный Титан\n20\n80",
            "Самый опасный враг: Броневой Страж\n"
            "Уровень угрозы: 100\n"
            "Итоговый урон по врагу: 0\n"
            "Исход боя: Поражение",
        ),
    ],
    ids=[
        "default_example",
        "dragon_vs_mage",
        "flame_lord",
        "desert_warrior",
        "army_of_titans",
        "stone_golem_loss",
        "sample_input",
    ],
)
def test_15_2_4(data, expected):
    assert m_15_2_4(data) == expected


# === Тест для задачи 15.2.5 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # base_example
        (
            "Зелье лечения,Зелье маны,Зелье лечения,Зелье силы,Зелье маны,Зелье маны",
            "Уникальные зелья: ['Зелье лечения', 'Зелье маны', 'Зелье силы']\n"
            "Всего зелий: 6\n"
            "Количество уникальных зелий: 3\n"
            "Самое частое зелье: Зелье маны (3 раз(а))",
        ),
        # elixir_life
        (
            "Эликсир жизни,Эликсир жизни,Эликсир жизни,Зелье невидимости,Зелье невидимости,Зелье регенерации",
            "Уникальные зелья: ['Зелье невидимости', 'Зелье регенерации', 'Эликсир жизни']\n"
            "Всего зелий: 6\n"
            "Количество уникальных зелий: 3\n"
            "Самое частое зелье: Эликсир жизни (3 раз(а))",
        ),
        # equal_two
        (
            "Зелье силы,Зелье защиты,Зелье силы,Зелье защиты",
            "Уникальные зелья: ['Зелье защиты', 'Зелье силы']\n"
            "Всего зелий: 4\n"
            "Количество уникальных зелий: 2\n"
            "Самое частое зелье: Зелье защиты (2 раз(а))",
        ),
        # healing_variants
        (
            "Малое зелье лечения,Большое зелье лечения,Малое зелье лечения,"
            "Большое зелье лечения,Среднее зелье лечения",
            "Уникальные зелья: ['Большое зелье лечения', 'Малое зелье лечения', 'Среднее зелье лечения']\n"
            "Всего зелий: 5\n"
            "Количество уникальных зелий: 3\n"
            "Самое частое зелье: Большое зелье лечения (2 раз(а))",
        ),
        # wisdom_elixir_dominates
        (
            "Зелье лечения,Зелье маны,Зелье лечения,Зелье силы,Эликсир мудрости,Эликсир мудрости,"
            "Зелье маны,Эликсир силы,Эликсир ловкости,Эликсир мудрости,Зелье невидимости,Зелье регенерации,"
            "Зелье маны,Зелье регенерации,Зелье лечения,Зелье лечения,Эликсир мудрости,Эликсир мудрости,"
            "Зелье регенерации,Эликсир силы,Эликсир силы",
            "Уникальные зелья: ['Зелье лечения', 'Зелье маны', 'Зелье невидимости', 'Зелье регенерации', "
            "'Зелье силы', 'Эликсир ловкости', 'Эликсир мудрости', 'Эликсир силы']\n"
            "Всего зелий: 21\n"
            "Количество уникальных зелий: 8\n"
            "Самое частое зелье: Эликсир мудрости (5 раз(а))",
        ),
        # sample_input
        (
            "Эликсир ловкости,Зелье маны,Эликсир силы,Зелье здоровья,Эликсир мудрости",
            "Уникальные зелья: ['Зелье здоровья', 'Зелье маны', 'Эликсир ловкости', 'Эликсир мудрости', 'Эликсир силы']\n"
            "Всего зелий: 5\n"
            "Количество уникальных зелий: 5\n"
            "Самое частое зелье: Зелье здоровья (1 раз(а))",
        ),
    ],
    ids=[
        "base_example",
        "elixir_life",
        "equal_two",
        "healing_variants",
        "wisdom_elixir_dominates",
        "sample_input",
    ],
)
def test_15_2_5(data, expected):
    assert m_15_2_5(data) == expected


# === Тест для задачи 15.2.6 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # cautious_enemy
        (
            "Осторожно осторожно впереди Враг осторожно приближается Враг приближается",
            "осторожно 3\nвраг 2\nприближается 2",
        ),
        # directions
        (
            "Север Восток Восток Юг Север Восток Север Север",
            "север 4\nвосток 3\nюг 1",
        ),
        # equal_frequency
        (
            "вперёд назад вправо влево вперёд назад влево вправо",
            "влево 2\nвперёд 2\nвправо 2",
        ),
        # single_word
        (
            "прыжок прыжок прыжок",
            "прыжок 3",
        ),
        # punctuation_words
        (
            "Тревога! тревога, враг идёт. Тревога! Враг приближается, тревога.",
            "враг 2\nтревога! 2\nидёт. 1",
        ),
        # big_battle
        (
            "магия меч меч магия щит меч магия зелье зелье атака атака атака защита защита атака магия магия "
            "магия магия меч меч меч зелье зелье щит щит щит щит щит удар удар защита защита магия магия магия "
            "зелье зелье атака меч магия меч щит щит щит меч меч магия магия атака атака зелье зелье зелье зелье "
            "меч меч щит щит защита защита защита защита атака атака удар удар удар удар меч магия магия магия "
            "зелье зелье щит щит щит щит атака атака магия магия меч меч зелье зелье зелье удар удар удар щит щит "
            "меч меч атака атака магия магия защита защита меч меч",
            "магия 20\nмеч 19\nщит 17",
        ),
        # long_mixed
        (
            "меч магия зелье щит атака защита удар прыжок магия магия меч щит атака прыжок удар меч магия зелье "
            "щит атака магия удар прыжок защита меч магия щит щит меч удар зелье зелье прыжок меч меч атака прыжок "
            "защита щит щит магия магия удар удар зелье зелье прыжок прыжок меч магия атака защита меч удар прыжок "
            "зелье меч магия магия щит атака прыжок удар защита меч магия щит зелье зелье меч магия атака защита "
            "прыжок прыжок меч меч щит удар удар защита магия магия зелье атака прыжок меч магия щит щит меч удар "
            "защита защита прыжок меч магия зелье атака щит прыжок меч удар магия атака",
            "магия 18\nмеч 18\nпрыжок 14",
        ),
        # short_mix
        (
            "прыжок прыжок прыжок вперёд вперёд",
            "прыжок 3\nвперёд 2",
        ),
        # sample_input
        (
            "Атака атака Атака защита атака блок",
            "атака 4\nблок 1\nзащита 1",
        ),
    ],
    ids=[
        "cautious_enemy",
        "directions",
        "equal_frequency",
        "single_word",
        "punctuation_words",
        "big_battle",
        "long_mixed",
        "short_mix",
        "sample_input",
    ],
)
def test_15_2_6(data, expected):
    assert m_15_2_6(data) == expected


# === Тест для задачи 15.2.7 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # sample_input
        (
            [120, 130, 150, 90, 110],
            {
                "max": 150,
                "min": 90,
                "sum": 600,
                "avg": 120,
                "battles": 5,
                "level_up": True,
            },
        ),
        # mixed_values
        (
            [50, 75, 100, 30, 90, 120],
            {
                "max": 120,
                "min": 30,
                "sum": 465,
                "avg": 78,
                "battles": 6,
                "level_up": False,
            },
        ),
        # all_equal
        (
            [100, 100, 100, 100, 100],
            {
                "max": 100,
                "min": 100,
                "sum": 500,
                "avg": 100,
                "battles": 5,
                "level_up": False,
            },
        ),
        # long_progression
        (
            [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
            {
                "max": 100,
                "min": 10,
                "sum": 550,
                "avg": 55,
                "battles": 10,
                "level_up": True,
            },
        ),
        # small_values
        (
            [5, 7, 3, 8, 4, 2, 1],
            {"max": 8, "min": 1, "sum": 30, "avg": 4, "battles": 7, "level_up": False},
        ),
    ],
    ids=[
        "sample_input",
        "mixed_values",
        "all_equal",
        "long_progression",
        "small_values",
    ],
)
def test_15_2_7(data, expected):
    """Проверяем анализ опыта боёв"""
    assert m_15_2_7(data) == expected


# === Тест для задачи 15.2.8 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # sample_input_1
        (
            [100, 200, 300, 400, 500],
            ([100, 200, 300, 400, 500], {400, 500}),
        ),
        # all_equal
        (
            [150, 150, 150, 150],
            ([150, 150, 150, 150], set()),
        ),
        # mixed_values
        (
            [80, 120, 50, 200, 90],
            ([50, 80, 90, 120, 200], {120, 200}),
        ),
        # with_negative
        (
            [-20, 0, 50, -10, 40],
            ([-20, -10, 0, 40, 50], {40, 50}),
        ),
        # long_sequence
        (
            [10, 20, 30, 40, 50, 60, 70, 80],
            ([10, 20, 30, 40, 50, 60, 70, 80], {50, 60, 70, 80}),
        ),
        # decreasing_values
        (
            [88, 99, 77, 66, 55, 44, 33, 22, 11],
            ([11, 22, 33, 44, 55, 66, 77, 88, 99], {66, 77, 88, 99}),
        ),
    ],
    ids=[
        "sample_input_1",
        "all_equal",
        "mixed_values",
        "with_negative",
        "long_sequence",
        "decreasing_values",
    ],
)
def test_15_2_8(data, expected):
    assert m_15_2_8(data) == expected


# === Тест для задачи 15.2.9 ===


@pytest.mark.parametrize(
    "skills, expected",
    [
        # --- sample_input_1 ---
        (
            {
                "Атака": 4,
                "Защита": 2,
                "Магия": 5,
                "Скорость": 5,
                "Удача": 3,
            },
            {
                "sorted_skills": [
                    ("Магия", 5),
                    ("Скорость", 5),
                    ("Атака", 4),
                    ("Удача", 3),
                    ("Защита", 2),
                ],
                "above_average": ["Магия", "Скорость"],
                "average_level": 4,
            },
        ),
        # --- equal_levels ---
        (
            {
                "Сила": 3,
                "Ловкость": 3,
                "Магия": 3,
            },
            {
                "sorted_skills": [
                    ("Ловкость", 3),
                    ("Магия", 3),
                    ("Сила", 3),
                ],
                "above_average": [],
                "average_level": 3,
            },
        ),
        # --- mixed_values ---
        (
            {
                "Хитрость": 2,
                "Мудрость": 5,
                "Интеллект": 4,
                "Удача": 3,
            },
            {
                "sorted_skills": [
                    ("Мудрость", 5),
                    ("Интеллект", 4),
                    ("Удача", 3),
                    ("Хитрость", 2),
                ],
                "above_average": ["Мудрость"],
                "average_level": 4,
            },
        ),
        # --- single_skill ---
        (
            {"Магия": 10},
            {
                "sorted_skills": [("Магия", 10)],
                "above_average": [],
                "average_level": 10,
            },
        ),
        # --- low_and_high ---
        (
            {
                "Магия": 1,
                "Защита": 10,
                "Скорость": 5,
            },
            {
                "sorted_skills": [
                    ("Защита", 10),
                    ("Скорость", 5),
                    ("Магия", 1),
                ],
                "above_average": ["Защита"],
                "average_level": 5,
            },
        ),
    ],
    ids=[
        "sample_input_1",
        "equal_levels",
        "mixed_values",
        "single_skill",
        "low_and_high",
    ],
)
def test_15_2_9(skills, expected):
    assert m_15_2_9(skills) == expected


# === Тест для задачи 15.2.10 ===


@pytest.mark.parametrize(
    "attacks, boss, expected",
    [
        # sample_input_1
        (
            [
                {"name": "Огненный удар", "power": 80, "type": "огонь"},
                {"name": "Ледяная стрела", "power": 60, "type": "лед"},
                {"name": "Теневая вспышка", "power": 90, "type": "тьма"},
            ],
            {"armor": 30, "shield": 20, "weakness": "огонь"},
            ("Огненный удар", 70, "Босс выжил..."),
        ),
        # sample_input_2
        (
            [
                {"name": "Пылающий шторм", "power": 100, "type": "огонь"},
                {"name": "Копьё молнии", "power": 90, "type": "электричество"},
                {"name": "Магма", "power": 95, "type": "огонь"},
            ],
            {"armor": 20, "shield": 10, "weakness": "огонь"},
            ("Пылающий шторм", 120, "Победа!"),
        ),
        # no_weakness_hit
        (
            [
                {"name": "Ледяная буря", "power": 80, "type": "лед"},
                {"name": "Тень", "power": 70, "type": "тьма"},
                {"name": "Каменная волна", "power": 75, "type": "земля"},
            ],
            {"armor": 40, "shield": 10, "weakness": "огонь"},
            ("Ледяная буря", 30, "Босс выжил..."),
        ),
        # all_equal_damage
        (
            [
                {"name": "Огонёк", "power": 50, "type": "огонь"},
                {"name": "Молния", "power": 50, "type": "электричество"},
                {"name": "Лёд", "power": 50, "type": "лед"},
            ],
            {"armor": 10, "shield": 0, "weakness": "огонь"},
            ("Огонёк", 65, "Босс выжил..."),
        ),
        # massive_defense
        (
            [
                {"name": "Ярость титана", "power": 150, "type": "физический"},
                {"name": "Пламя хаоса", "power": 100, "type": "огонь"},
            ],
            {"armor": 120, "shield": 50, "weakness": "огонь"},
            ("Ярость титана", 0, "Босс выжил..."),
        ),
        # just_enough_to_win
        (
            [
                {"name": "Молния судьбы", "power": 100, "type": "электричество"},
                {"name": "Взрыв плазмы", "power": 90, "type": "огонь"},
            ],
            {"armor": 30, "shield": 0, "weakness": "электричество"},
            ("Молния судьбы", 120, "Победа!"),
        ),
    ],
    ids=[
        "sample_input_1",
        "sample_input_2",
        "no_weakness_hit",
        "all_equal_damage",
        "massive_defense",
        "just_enough_to_win",
    ],
)
def test_15_2_0(attacks, boss, expected):
    assert m_15_2_10(attacks, boss) == expected
