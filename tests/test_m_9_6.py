import pytest
from src.module_9 import (
    m_9_6_1,
    m_9_6_2,
    m_9_6_3,
    m_9_6_4,
)


# === Тест для задачи 9.6.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example 1
        (
            "☀ ☾ ✹ ☀ ✧\n☾ ✹ ✦ ✡ ✧",
            "Уникальные руны первого свитка: ['☀', '☾', '✧', '✹']\n"
            "Уникальные руны второго свитка: ['☾', '✡', '✦', '✧', '✹']\n"
            "Защищённый свиток (общие руны): frozenset(['☾', '✧', '✹'])",
        ),
        # Example 2
        (
            "⚔ 🕯 🦇 🩸\n🦇 🩸 🜂 🜄",
            "Уникальные руны первого свитка: ['⚔', '🕯', '🦇', '🩸']\n"
            "Уникальные руны второго свитка: ['🜂', '🜄', '🦇', '🩸']\n"
            "Защищённый свиток (общие руны): frozenset(['🦇', '🩸'])",
        ),
        # Sample
        (
            "🌟 🌙 🔥 🌟 ✨\n🔥 🌟 🌊 ☀ ✨",
            "Уникальные руны первого свитка: ['✨', '🌙', '🌟', '🔥']\n"
            "Уникальные руны второго свитка: ['☀', '✨', '🌊', '🌟', '🔥']\n"
            "Защищённый свиток (общие руны): frozenset(['✨', '🌟', '🔥'])",
        ),
    ],
    ids=["Example1", "Example2", "Sample"],
)
def test_9_6_1(data, expected):
    assert m_9_6_1(data) == expected


# === Тест для задачи 9.6.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example 1
        (
            "Знамение57 ⚔ спасёт123 мир12🕯",
            "Уникальные цифры: {1, 2, 3, 5, 7}\n"
            "Уникальные буквы: {З, а, е, и, м, н, п, р, с, т, ё}",
        ),
        # Example 2
        (
            "Code42🔥XMarksTheSpot77💀",
            "Уникальные цифры: {2, 4, 7}\n"
            "Уникальные буквы: {C, M, S, T, X, a, d, e, h, k, o, p, r, s, t}",
        ),
        # Sample
        (
            "Код77 защищён44, но 15 лет назад он был утрачен💀.",
            "Уникальные цифры: {1, 4, 5, 7}\n"
            "Уникальные буквы: {К, а, б, д, е, з, и, л, н, о, р, т, у, ч, щ, ы, ё}",
        ),
    ],
    ids=["Example1", "Example2", "Sample"],
)
def test_9_6_2(data, expected):
    assert m_9_6_2(data) == expected


# === Тест для задачи 9.6.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example 1
        (
            "3 5 12 8 15 10",
            "Энергетические уровни: {9, 25, 64, 100, 144, 225}\n"
            "Крупные кристаллы: {12}\n"
            "Уникальные цифры: {0, 1, 2, 3, 5, 8}",
        ),
        # Example 2
        (
            "7 14 21 30 9 4",
            "Энергетические уровни: {16, 49, 81, 196, 441, 900}\n"
            "Крупные кристаллы: {14, 30}\n"
            "Уникальные цифры: {0, 1, 2, 3, 4, 7, 9}",
        ),
        # Sample
        (
            "100 101 12 0 9 8 7 6 5 44",
            "Энергетические уровни: {0, 25, 36, 49, 64, 81, 144, 1936, 10000, 10201}\n"
            "Крупные кристаллы: {12, 44, 100}\n"
            "Уникальные цифры: {0, 1, 2, 4, 5, 6, 7, 8, 9}",
        ),
    ],
    ids=["Example1", "Example2", "Sample"],
)
def test_9_6_3(data, expected):
    assert m_9_6_3(data) == expected


# === Тест для задачи 9.6.4 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example 1
        (
            "5723",
            "Уникальные цифры кода: {2, 3, 5, 7}\n"
            "Возможные суммы двух цифр: {5, 7, 8, 9, 10, 12}\n"
            "Квадраты цифр > 5: {49}",
        ),
        # Example 2
        (
            "8491",
            "Уникальные цифры кода: {1, 4, 8, 9}\n"
            "Возможные суммы двух цифр: {5, 9, 10, 12, 13, 17}\n"
            "Квадраты цифр > 5: {64, 81}",
        ),
        # Test 2
        (
            "66666",
            "Уникальные цифры кода: {6}\n"
            "Возможные суммы двух цифр: {}\n"
            "Квадраты цифр > 5: {36}",
        ),
        # Test 3
        (
            "00000",
            "Уникальные цифры кода: {0}\n"
            "Возможные суммы двух цифр: {}\n"
            "Квадраты цифр > 5: {}",
        ),
        # Test 4
        (
            "1234567890",
            "Уникальные цифры кода: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n"
            "Возможные суммы двух цифр: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}\n"
            "Квадраты цифр > 5: {36, 49, 64, 81}",
        ),
        # Test 5
        (
            "8295",
            "Уникальные цифры кода: {2, 5, 8, 9}\n"
            "Возможные суммы двух цифр: {7, 10, 11, 13, 14, 17}\n"
            "Квадраты цифр > 5: {64, 81}",
        ),
        # Test 6
        (
            "8746382",
            "Уникальные цифры кода: {2, 3, 4, 6, 7, 8}\n"
            "Возможные суммы двух цифр: {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n"
            "Квадраты цифр > 5: {36, 49, 64}",
        ),
        # Test 7
        (
            "6789",
            "Уникальные цифры кода: {6, 7, 8, 9}\n"
            "Возможные суммы двух цифр: {13, 14, 15, 16, 17}\n"
            "Квадраты цифр > 5: {36, 49, 64, 81}",
        ),
        # Sample
        (
            "111111",
            "Уникальные цифры кода: {1}\n"
            "Возможные суммы двух цифр: {}\n"
            "Квадраты цифр > 5: {}",
        ),
    ],
    ids=[
        "Example1",
        "Example2",
        "Test2",
        "Test3",
        "Test4",
        "Test5",
        "Test6",
        "Test7",
        "Sample",
    ],
)
def test_9_6_4(data, expected):
    assert m_9_6_4(data) == expected
