import pytest
from src.module_5 import m_5_1_1, m_5_1_2, m_5_1_3, m_5_1_4, m_5_1_5, m_5_1_6


# === Тест для задачи 5.1.1 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        (
            "Иван\n25\nМосква\n",
            "Информация о друге: ('Иван', 25, 'Москва')",
        ),
        (
            "Петр\n60\nКазань\n",
            "Информация о друге: ('Петр', 60, 'Казань')",
        ),
        (
            "Николай\n73\nСаратов\n",
            "Информация о друге: ('Николай', 73, 'Саратов')",
        ),
    ],
)
def test_5_1_1(input_data, expected):
    assert m_5_1_1(input_data) == expected


# === Тест для задачи 5.1.2 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        (
            "куртка штаны ботинки\nрюкзак фляга карта",
            "Список вещей на экспедицию: ('куртка', 'штаны', 'ботинки', 'рюкзак', 'фляга', 'карта', 'куртка', 'штаны', 'ботинки', 'рюкзак', 'фляга', 'карта')",
        ),
        (
            "ф в а п р\nф ы в\n",
            "Список вещей на экспедицию: ('ф', 'в', 'а', 'п', 'р', 'ф', 'ы', 'в', 'ф', 'в', 'а', 'п', 'р', 'ф', 'ы', 'в')",
        ),
        (
            "a-o e-н л д ж\nfor me\n",
            "Список вещей на экспедицию: ('a-o', 'e-н', 'л', 'д', 'ж', 'for', 'me', 'a-o', 'e-н', 'л', 'д', 'ж', 'for', 'me')",
        ),
        (
            "носок тапок шарф\nзубочистку коврик режик\n",
            "Список вещей на экспедицию: ('носок', 'тапок', 'шарф', 'зубочистку', 'коврик', 'режик', 'носок', 'тапок', 'шарф', 'зубочистку', 'коврик', 'режик')",
        ),
    ],
)
def test_5_1_2(input_data, expected):
    assert m_5_1_2(input_data) == expected


# === Тест для задачи 5.1.3 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        (
            "5\n8\n7\n9\n6\n10\n",
            "(8, 7, 9, 6, 10)\n8.00\n(8, 9, 10)",
        ),
        (
            "4\n5\n7\n8\n4\n",
            "(5, 7, 8, 4)\n6.00\n(7, 8)",
        ),
        (
            "6\n3\n9\n5\n7\n8\n6\n",
            "(3, 9, 5, 7, 8, 6)\n6.33\n(9, 7, 8)",
        ),
        (
            "1\n2\n",
            "(2,)\n2.00\n(2,)",
        ),
        (
            "5\n8\n7\n9\n6\n10\n",
            "(8, 7, 9, 6, 10)\n8.00\n(8, 9, 10)",
        ),
        (
            "3\n10\n10\n10\n",
            "(10, 10, 10)\n10.00\n(10, 10, 10)",
        ),
    ],
)
def test_5_1_3(input_data, expected):
    assert m_5_1_3(input_data) == expected


# === Тест для задачи 5.1.4 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        (
            "3\n3\n4\n-2\n5\n0\n0\n",
            "(-2.0, 5.0)\n5.39",
        ),
        (
            "3\n3\n4\n-2\n5\n0\n0\n",
            "(-2.0, 5.0)\n5.39",
        ),
        (
            "2\n0\n-3\n0\n3\n",
            "(0.0, -3.0)\n3.00",
        ),
        (
            "3\n-1\n-2\n-3\n-4\n5\n0\n",
            "(-3.0, -4.0)\n5.00",
        ),
        (
            "5\n0\n0\n1\n0\n0\n2\n-1\n-1\n2\n2\n",
            "(2.0, 2.0)\n2.83",
        ),
        (
            "4\n1\n1\n-1\n-1\n2\n2\n-2\n-2\n",
            "(2.0, 2.0)\n2.83",
        ),
    ],
)
def test_5_1_4(input_data, expected):
    assert m_5_1_4(input_data) == expected


# === Тест для задачи 5.1.5 ===


@pytest.mark.parametrize(
    "input_data, expected",
    [
        (
            "3\n255\n0\n0\n0\n200\n0\n100\n100\n100\n",
            "(100, 100, 100)\n300",
        ),
        (
            "4\n100\n100\n100\n90\n90\n90\n255\n255\n255\n200\n150\n100\n",
            "(255, 255, 255)\n765",
        ),
        (
            "3\n255\n0\n0\n0\n200\n0\n100\n100\n100\n",
            "(100, 100, 100)\n300",
        ),
        (
            "3\n12\n34\n56\n78\n90\n12\n23\n45\n67\n",
            "(78, 90, 12)\n180",
        ),
        (
            "1\n123\n45\n67\n",
            "(123, 45, 67)\n235",
        ),
        (
            "2\n0\n0\n0\n10\n20\n30\n",
            "(10, 20, 30)\n60",
        ),
    ],
)
def test_5_1_5(input_data, expected):
    assert m_5_1_5(input_data) == expected


# === Тест для задачи 5.1.6 ===
import pytest
from src.module_5 import m_5_1_6


@pytest.mark.parametrize(
    "input_data, expected",
    [
        (
            "5\n1\n2\n3\n4\n5\n",
            "Исходный кортеж: (1, 2, 3, 4, 5)\nКортеж после сдвига: (5, 1, 2, 3, 4)",
        ),
        (
            "3\n7\n8\n9\n",
            "Исходный кортеж: (7, 8, 9)\nКортеж после сдвига: (9, 7, 8)",
        ),
        (
            "4\n-1\n0\n1\n2\n",
            "Исходный кортеж: (-1, 0, 1, 2)\nКортеж после сдвига: (2, -1, 0, 1)",
        ),
        (
            "6\n3\n3\n3\n4\n4\n5\n",
            "Исходный кортеж: (3, 3, 3, 4, 4, 5)\nКортеж после сдвига: (5, 3, 3, 3, 4, 4)",
        ),
        (
            "5\n1\n2\n3\n4\n5\n",
            "Исходный кортеж: (1, 2, 3, 4, 5)\nКортеж после сдвига: (5, 1, 2, 3, 4)",
        ),
        (
            "1\n10\n",
            "Исходный кортеж: (10,)\nКортеж после сдвига: (10,)",
        ),
    ],
)
def test_5_1_6(input_data, expected):
    assert m_5_1_6(input_data) == expected
