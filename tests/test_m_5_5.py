import pytest
from src.module_5 import m_5_5_1, m_5_5_2, m_5_5_3, m_5_5_4, m_5_5_5, m_5_5_6


# === Тест для задачи 5.5.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        ("привет", "Кортеж символов: ('п', 'р', 'и', 'в', 'е', 'т')"),
        (
            "щжрщжр выюпо зьзювью звоио",
            "Кортеж символов: ('щ', 'ж', 'р', 'щ', 'ж', 'р', ' ', 'в', 'ы', 'ю', 'п', 'о', ' ', 'з', 'ь', 'з', 'ю', 'в', 'ь', 'ю', ' ', 'з', 'в', 'о', 'и', 'о')",
        ),
        (
            "Гарантируется, что в классе",
            "Кортеж символов: ('Г', 'а', 'р', 'а', 'н', 'т', 'и', 'р', 'у', 'е', 'т', 'с', 'я', ',', ' ', 'ч', 'т', 'о', ' ', 'в', ' ', 'к', 'л', 'а', 'с', 'с', 'е')",
        ),
        (
            "Python Advanced",
            "Кортеж символов: ('P', 'y', 't', 'h', 'o', 'n', ' ', 'A', 'd', 'v', 'a', 'n', 'c', 'e', 'd')",
        ),
    ],
)
def test_5_5_1(data, expected):
    assert m_5_5_1(data) == expected


# === Тест для задачи 5.5.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "1 2 3 4 2 2 5\n2",
            "Число 2 встречается 3 раз(а) в кортеже.\n"
            "Первое вхождение числа 2 находится на индексе 1.",
        ),
        (
            "1 2 3 4 5\n6",
            "Число 6 встречается 0 раз(а) в кортеже.\n" "Число 6 не найдено в кортеже.",
        ),
        (
            "10 20 30 40 50\n30",
            "Число 30 встречается 1 раз(а) в кортеже.\n"
            "Первое вхождение числа 30 находится на индексе 2.",
        ),
        (
            "7 8 9 10 8 8\n8",
            "Число 8 встречается 3 раз(а) в кортеже.\n"
            "Первое вхождение числа 8 находится на индексе 1.",
        ),
        (
            "100 200 300 400 500\n600",
            "Число 600 встречается 0 раз(а) в кортеже.\n"
            "Число 600 не найдено в кортеже.",
        ),
        (
            "6 10 11 12 12 13 12\n12",
            "Число 12 встречается 3 раз(а) в кортеже.\n"
            "Первое вхождение числа 12 находится на индексе 3.",
        ),
    ],
)
def test_5_5_2(data, expected):
    assert m_5_5_2(data) == expected


# === Тест для задачи 5.5.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "15",
            "1 1 1 3 5 9 17 31 57 105 193 355 653 1201 2209",
        ),
        (
            "1",
            "1",
        ),
        (
            "5",
            "1 1 1 3 5",
        ),
        (
            "7",
            "1 1 1 3 5 9 17",
        ),
        (
            "23",
            "1 1 1 3 5 9 17 31 57 105 193 355 653 1201 2209 4063 7473 13745 25281 46499 85525 157305 289329",
        ),
        (
            "2",
            "1 1",
        ),
        (
            "3",
            "1 1 1",
        ),
        (
            "4",
            "1 1 1 3",
        ),
    ],
)
def test_5_5_3(data, expected):
    assert m_5_5_3(data) == expected


# === Тест для задачи 5.5.4 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "-3\n9\n2",
            (1.5, 8.75),
        ),
        (
            "4\n-10\n3",
            (1.25, -3.25),
        ),
        (
            "4\n4\n4",
            (-0.5, 3.0),
        ),
        (
            "-4\n0\n4",
            (-0.0, 4.0),
        ),
        (
            "1\n1\n1",
            (-0.5, 0.75),
        ),
        (
            "-1\n1\n-1",
            (0.5, -0.75),
        ),
        (
            "11\n22\n33",
            (-1.0, 22.0),
        ),
    ],
)
def test_5_5_4(data, expected):
    assert m_5_5_4(data) == expected


# === Тест для задачи 5.5.5 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "5\n3\n15\n",
            "Первое вхождение числа 5 в диапазоне от 3 до 15 находится на индексе: 4",
        ),
        (
            "3\n3\n9\n",
            "Число 3 не найдено в диапазоне от 3 до 9.",
        ),
        (
            "7\n100\n200\n",
            "Число 7 не найдено в диапазоне от 100 до 200.",
        ),
        (
            "6\n6\n45\n",
            "Первое вхождение числа 6 в диапазоне от 6 до 45 находится на индексе: 7",
        ),
        (
            "4\n20\n60\n",
            "Первое вхождение числа 4 в диапазоне от 20 до 60 находится на индексе: 23",
        ),
        (
            "4\n60\n100\n",
            "Число 4 не найдено в диапазоне от 60 до 100.",
        ),
        (
            "1\n1\n30\n",
            "Первое вхождение числа 1 в диапазоне от 1 до 30 находится на индексе: 1",
        ),
        (
            "9\n45\n60\n",
            "Первое вхождение числа 9 в диапазоне от 45 до 60 находится на индексе: 45",
        ),
    ],
)
def test_5_5_5(data, expected):
    assert m_5_5_5(data) == expected


# === Тест для задачи 5.5.6 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        (
            "яблоко",
            'Общее количество товара "яблоко" среди всех поставщиков: 9\n'
            "Статистика по поставщикам:\n"
            "  Поставщик А: 3 раз(а)\n"
            "  Поставщик В: 3 раз(а)\n"
            "  Поставщик С: 3 раз(а)",
        ),
        (
            "арбуз",
            'Товар "арбуз" отсутствует в доставках.',
        ),
        (
            "груша",
            'Общее количество товара "груша" среди всех поставщиков: 4\n'
            "Статистика по поставщикам:\n"
            "  Поставщик А: 1 раз(а)\n"
            "  Поставщик В: 1 раз(а)\n"
            "  Поставщик С: 2 раз(а)",
        ),
        (
            "банан",
            'Общее количество товара "банан" среди всех поставщиков: 5\n'
            "Статистика по поставщикам:\n"
            "  Поставщик А: 2 раз(а)\n"
            "  Поставщик В: 1 раз(а)\n"
            "  Поставщик С: 2 раз(а)",
        ),
        (
            "киви",
            'Общее количество товара "киви" среди всех поставщиков: 3\n'
            "Статистика по поставщикам:\n"
            "  Поставщик А: 1 раз(а)\n"
            "  Поставщик В: 1 раз(а)\n"
            "  Поставщик С: 1 раз(а)",
        ),
    ],
)
def test_5_5_6(data, expected):
    assert m_5_5_6(data) == expected
