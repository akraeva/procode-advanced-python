import pytest
from src.module_11 import (
    m_11_1_1,
    m_11_1_2,
    m_11_1_3,
    m_11_1_4,
    m_11_1_5,
)


# –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pytest -k "test_11_1_1" -q -x --tb=short


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 11.1.1 ===
@pytest.mark.parametrize(
    "data, expected",
    [
        # Example
        ((37, 14, 22, 9, 18, -6, 7, 0), [14, 22, 18, -6, 0]),
        # Test 2
        ((1, 3, 5, 7, 9), []),
        # Test 3
        ((2, 4, 6, 8, 10), [2, 4, 6, 8, 10]),
        # Test 4
        ((0, -2, -5, 13, 24, 46, -50), [0, -2, 24, 46, -50]),
        # Sample
        ((10, 21, 32, 43, 54, 65, 76), [10, 32, 54, 76]),
    ],
    ids=["Example", "OnlyOdd", "OnlyEven", "MixedSigns", "Sample"],
)
def test_11_1_1(data, expected):
    assert m_11_1_1(*data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 11.1.2 ===
@pytest.mark.parametrize(
    "data, expected",
    [
        # Example 1
        (("–ó–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é!",), "zadachi po programmirovaniyu!"),
        # Example 2
        (("–ó–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é!", "+"), "zadachi+po+programmirovaniyu!"),
        # Test 2
        (("–ü–∏—Ç–æ–Ω –ê–¥–≤–∞–Ω—Å–µ–¥",), "piton advansed"),
        # Test 3
        (("—ã–∞—ã—ã–∞—ã –ª—Ä–≥ —Ü–∫—Ü–∫ –∞—ã–∞—ã–∞—ã–∞—ã–∞", "-"), "yayyay-lrg-ckck-ayayayaya"),
        # Test 4
        (("—Ä–∞–∞—Ä –∞—Ä–∞ –ø –≤ —ã –æ –ø–≤–ø", "*"), "raar*ara*p*v*y*o*pvp"),
        # Sample
        (("–ü–∏—Ç–æ–Ω –ê–¥–≤–∞–Ω—Å–µ–¥", "-"), "piton-advansed"),
    ],
    ids=["Example1", "Example2", "Simple", "Dash", "Star", "Sample"],
)
def test_11_1_2(data, expected):
    assert m_11_1_2(*data) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 11.1.3 ===


@pytest.mark.parametrize(
    "args,key_arg,expected",
    [
        # test_1
        (
            ("–≠–∫–æ–Ω–æ–º–∏–∫–∞ —Ä–∞—Å—Ç—ë—Ç", "–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å"),
            "–£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ –ø–æ–≤—ã—Å–∏–ª—Å—è",
            (
                "üéô –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–±–∞—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n"
                "üì¢ –ü–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –¥–æ–≤–æ–¥—ã:\n"
                "- –≠–∫–æ–Ω–æ–º–∏–∫–∞ —Ä–∞—Å—Ç—ë—Ç\n"
                "- –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å\n"
                "üî• –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç: –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ –ø–æ–≤—ã—Å–∏–ª—Å—è\n"
                "‚úÖ –î–µ–±–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n"
            ),
        ),
        # test_2
        (
            ("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω–µ–µ",),
            "–í—Å–µ–æ–±—â–µ–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            (
                "üéô –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–±–∞—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n"
                "üì¢ –ü–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –¥–æ–≤–æ–¥—ã:\n"
                "- –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω–µ–µ\n"
                "üî• –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç: –í—Å–µ–æ–±—â–µ–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
                "‚úÖ –î–µ–±–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n"
            ),
        ),
        # test_3
        (
            ("–ù–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞", "–†–æ—Å—Ç –í–í–ü", "–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤"),
            "–°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞",
            (
                "üéô –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–±–∞—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n"
                "üì¢ –ü–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –¥–æ–≤–æ–¥—ã:\n"
                "- –ù–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞\n"
                "- –†–æ—Å—Ç –í–í–ü\n"
                "- –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤\n"
                "üî• –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç: –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞\n"
                "‚úÖ –î–µ–±–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n"
            ),
        ),
        # test_4
        (
            ("–ó–∞—Ä–ø–ª–∞—Ç—ã –≤—Ä–∞—á–µ–π —É–≤–µ–ª–∏—á–µ–Ω—ã", "–ë–æ–ª—å–Ω–∏—Ü—ã –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"),
            "–†–µ—Ñ–æ—Ä–º–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            (
                "üéô –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–±–∞—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n"
                "üì¢ –ü–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –¥–æ–≤–æ–¥—ã:\n"
                "- –ó–∞—Ä–ø–ª–∞—Ç—ã –≤—Ä–∞—á–µ–π —É–≤–µ–ª–∏—á–µ–Ω—ã\n"
                "- –ë–æ–ª—å–Ω–∏—Ü—ã –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n"
                "üî• –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç: –†–µ—Ñ–æ—Ä–º–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n"
                "‚úÖ –î–µ–±–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n"
            ),
        ),
        # test_5
        (
            (
                "–ü–æ–≤—ã—à–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ —É–ª–∏—Ü–∞—Ö",
                "–£–∂–µ—Å—Ç–æ—á–µ–Ω—ã –∑–∞–∫–æ–Ω—ã",
                "–í–≤–µ–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –ø–æ–ª–∏—Ü–∏–∏",
            ),
            "–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
            (
                "üéô –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–±–∞—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n"
                "üì¢ –ü–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –¥–æ–≤–æ–¥—ã:\n"
                "- –ü–æ–≤—ã—à–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ —É–ª–∏—Ü–∞—Ö\n"
                "- –£–∂–µ—Å—Ç–æ—á–µ–Ω—ã –∑–∞–∫–æ–Ω—ã\n"
                "- –í–≤–µ–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –ø–æ–ª–∏—Ü–∏–∏\n"
                "üî• –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç: –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n"
                "‚úÖ –î–µ–±–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n"
            ),
        ),
    ],
    ids=["two_args", "one_arg", "three_args", "two_args_alt", "three_args_alt"],
)
def test_11_1_3(capsys, args, key_arg, expected):
    m_11_1_3(*args, key_argument=key_arg)
    captured = capsys.readouterr().out
    assert captured == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 11.1.4 ===
@pytest.mark.parametrize(
    "data, named, expected",
    [
        # Example
        (
            ("–ù–æ—É—Ç–±—É–∫", "–°–º–∞—Ä—Ç—Ñ–æ–Ω", "–ù–∞—É—à–Ω–∏–∫–∏"),
            "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å",
            {
                "orders": ["–ù–æ—É—Ç–±—É–∫", "–°–º–∞—Ä—Ç—Ñ–æ–Ω", "–ù–∞—É—à–Ω–∏–∫–∏"],
                "main_order": "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å",
            },
        ),
        # Test 2
        (
            ("–ù–æ—É—Ç–±—É–∫", "–°–º–∞—Ä—Ç—Ñ–æ–Ω", "–ù–∞—É—à–Ω–∏–∫–∏"),
            "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å",
            {
                "orders": ["–ù–æ—É—Ç–±—É–∫", "–°–º–∞—Ä—Ç—Ñ–æ–Ω", "–ù–∞—É—à–Ω–∏–∫–∏"],
                "main_order": "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å",
            },
        ),
        # Test 3
        (
            ("–ö–Ω–∏–≥–∞", "–õ–∞–º–ø–æ—á–∫–∞", "–ì–∏—Ç–∞—Ä–∞"),
            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞",
            {
                "orders": ["–ö–Ω–∏–≥–∞", "–õ–∞–º–ø–æ—á–∫–∞", "–ì–∏—Ç–∞—Ä–∞"],
                "main_order": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞",
            },
        ),
        # Test 4
        (
            (
                "–¢–µ–ª–µ–≤–∏–∑–æ—Ä",
                "–ö–æ–ª–æ–Ω–∫–∞",
                "–°–º–∞—Ä—Ç—Ñ–æ–Ω",
                "–ü–ª–∞–Ω—à–µ—Ç",
                "–ù–æ—É—Ç–±—É–∫",
                "–ö–∞–º–µ—Ä–∞",
                "–ü—Ä–æ–µ–∫—Ç–æ—Ä",
                "–ò–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞",
            ),
            "–£–º–Ω—ã–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä",
            {
                "orders": [
                    "–¢–µ–ª–µ–≤–∏–∑–æ—Ä",
                    "–ö–æ–ª–æ–Ω–∫–∞",
                    "–°–º–∞—Ä—Ç—Ñ–æ–Ω",
                    "–ü–ª–∞–Ω—à–µ—Ç",
                    "–ù–æ—É—Ç–±—É–∫",
                    "–ö–∞–º–µ—Ä–∞",
                    "–ü—Ä–æ–µ–∫—Ç–æ—Ä",
                    "–ò–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞",
                ],
                "main_order": "–£–º–Ω—ã–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä",
            },
        ),
        # Sample
        (
            ("–ü–∏—Ü—Ü–∞", "–ë—É—Ä–≥–µ—Ä", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏"),
            "–°–µ—Ç ‚Ññ5",
            {"orders": ["–ü–∏—Ü—Ü–∞", "–ë—É—Ä–≥–µ—Ä", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏"], "main_order": "–°–µ—Ç ‚Ññ5"},
        ),
    ],
    ids=["Example", "Same", "BookSet", "TVSet", "Sample"],
)
def test_11_1_4(data, named, expected):
    assert m_11_1_4(*data, main_order=named) == expected


# === –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 11.1.5 ===
@pytest.mark.parametrize(
    "f_name, data, expected",
    [
        # Example group
        ("lex_min", ("–¥—Ä–∞–∫–æ–Ω", "–∞–ª—Ö–∏–º–∏–∫"), "–∞–ª—Ö–∏–º–∏–∫"),
        ("lex_min3", ("–∑–µ–ª—å–µ", "–º–∞–≥–∏—è", "–º–µ—á"), "–∑–µ–ª—å–µ"),
        ("lex_min4", ("—â–∏—Ç", "–∫–æ–ø—å–µ", "–∞—Ä–±–∞–ª–µ—Ç", "–ª—É–∫"), "–∞—Ä–±–∞–ª–µ—Ç"),
        # Test 2
        ("lex_min3", ("–º–µ—á", "–º–∞–≥–∏—è", "–∑–µ–ª—å–µ"), "–∑–µ–ª—å–µ"),
        # Test 3
        ("lex_min4", ("—â–∏—Ç", "–∫–æ–ø—å–µ", "–∞—Ä–±–∞–ª–µ—Ç", "–ª—É–∫"), "–∞—Ä–±–∞–ª–µ—Ç"),
        # Test 4
        ("lex_min", ("–º–µ—á", "–º–∞–≥–∏—è"), "–º–∞–≥–∏—è"),
        # Test 5
        ("lex_min4", ("–∑–µ–ª—å–µ", "—ç–ª–∏–∫—Å–∏—Ä", "–Ω–∞—Å—Ç–æ–π–∫–∞", "–ø–∏–ª—é–ª—è"), "–∑–µ–ª—å–µ"),
        # Test 6
        ("lex_min3", ("–º–µ—á", "–∞—Ä—Ç–µ—Ñ–∞–∫—Ç", "–∫–ª–∏–Ω–æ–∫"), "–∞—Ä—Ç–µ—Ñ–∞–∫—Ç"),
        # Test 7
        ("lex_min", ("–≥–æ–±–ª–∏–Ω", "—ç–ª—å—Ñ"), "–≥–æ–±–ª–∏–Ω"),
        # Sample
        ("lex_min", ("–¥—Ä–∞–∫–æ–Ω", "–∞–ª—Ö–∏–º–∏–∫"), "–∞–ª—Ö–∏–º–∏–∫"),
    ],
    ids=[
        "Example2",
        "Example3",
        "Example4",
        "Test2",
        "Test3",
        "Test4",
        "Test5",
        "Test6",
        "Test7",
        "Sample",
    ],
)
def test_11_1_5(f_name, data, expected):
    assert m_11_1_5(f_name, data) == expected
