import pytest
from src.module_9 import (
    m_9_5_1,
    m_9_5_2,
    m_9_5_3,
)


# === Test –¥–ª—è –∑–∞–¥–∞—á–∏ 9.5.1 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example
        (
            "2\n–ù–∞—Ç–∞—à–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä\n3\n–ù–∞—Ç–∞—à–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–µ—Ä–∞",
            "A is subset of B? True\n"
            "B is superset of A? True\n"
            "A and B are disjoint? False",
        ),
        # Test ‚Ññ2
        (
            "2\n–ï–ª–µ–Ω–∞ –ü–∞–≤–µ–ª\n6\n–ò—Ä–∏–Ω–∞ –ü–∞–≤–µ–ª –ê—Ä—Ç–µ–º –¢–∞—Ç—å—è–Ω–∞ –ê–Ω–¥—Ä–µ–π –û–ª—å–≥–∞",
            "A is subset of B? False\n"
            "B is superset of A? False\n"
            "A and B are disjoint? False",
        ),
        # Test ‚Ññ3
        (
            "1\n–ê–ª–µ–∫—Å–µ–π\n3\n–ê–ª–µ–∫—Å–µ–π –ë–æ—Ä–∏—Å –í–∏–∫—Ç–æ—Ä",
            "A is subset of B? True\n"
            "B is superset of A? True\n"
            "A and B are disjoint? False",
        ),
        # Test ‚Ññ4
        (
            "5\n–ù–∏–∫–æ–ª–∞–π –ê—Ä—Ç–µ–º –°–≤–µ—Ç–ª–∞–Ω–∞ –ê–Ω—Ç–æ–Ω –ì–∞–ª–∏–Ω–∞\n5\n–ê—Ä—Ç–µ–º –°–≤–µ—Ç–ª–∞–Ω–∞ –ê–Ω—Ç–æ–Ω –ì–∞–ª–∏–Ω–∞ –ù–∏–∫–æ–ª–∞–π",
            "A is subset of B? True\n"
            "B is superset of A? True\n"
            "A and B are disjoint? False",
        ),
        # Test ‚Ññ5
        (
            "5\n–ü–æ–ª–∏–Ω–∞ –í–∞—Å–∏–ª–∏—Å–∞ –¢–∏–º–æ—Ñ–µ–π –ó–∞—Ö–∞—Ä –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞\n3\n–¢–∏–º–æ—Ñ–µ–π –ó–∞—Ö–∞—Ä –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
            "A is subset of B? False\n"
            "B is superset of A? False\n"
            "A and B are disjoint? False",
        ),
        # Test ‚Ññ6
        (
            "0\n\n0\n",
            "A is subset of B? True\n"
            "B is superset of A? True\n"
            "A and B are disjoint? True",
        ),
        # Sample
        (
            "4\n–ê–Ω–Ω–∞ –ë–æ—Ä–∏—Å –í–∞—Å–∏–ª–∏–π –ì–ª–µ–±\n3\n–î–º–∏—Ç—Ä–∏–π –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –§–µ–¥–æ—Ä",
            "A is subset of B? False\n"
            "B is superset of A? False\n"
            "A and B are disjoint? True",
        ),
    ],
    ids=[
        "Example",
        "Test2",
        "Test3",
        "Test4",
        "Test5",
        "Test6",
        "Sample",
    ],
)
def test_9_5_1(data, expected):
    assert m_9_5_1(data) == expected


# === Test –¥–ª—è –∑–∞–¥–∞—á–∏ 9.5.2 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example 1
        (
            "–î–æ–Ω, –°–∏–º, –ë–æ–±\n–î–æ–Ω, –°–∏–º, –ë–æ–±, –ê–ª–∏—Å–∞",
            "–ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ - –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Ç–æ—Ä–æ–π.",
        ),
        # Example 2
        (
            "–î–∂–µ–∫, –î–∂–∏–ª–ª\n–ú–∞—Ä–∏—è, –ê–ª–µ–∫—Å",
            "–ì—Ä—É–ø–ø—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è.",
        ),
        # Test ‚Ññ2
        (
            "–ê–Ω–Ω–∞, –ë–æ—Ä–∏—Å\n–í–∏–∫—Ç–æ—Ä, –î–∞—Ä—å—è",
            "–ì—Ä—É–ø–ø—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è.",
        ),
        # Test ‚Ññ3
        (
            "a, b\na, b, c, d",
            "–ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ - –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Ç–æ—Ä–æ–π.",
        ),
        # Test ‚Ññ4
        (
            "a, b, c, d\na, b",
            "–í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ - –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–π.",
        ),
        # Test ‚Ññ5
        (
            "a, b\nc, d",
            "–ì—Ä—É–ø–ø—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è.",
        ),
        # Test ‚Ññ6
        (
            "a, b, c\nb, c, d",
            "–ì—Ä—É–ø–ø—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è, –Ω–æ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥–æ–π.",
        ),
        # Sample
        (
            "–ê–Ω–Ω–∞, –ë–æ—Ä–∏—Å, –í–∏–∫—Ç–æ—Ä, –î–∞—Ä—å—è\n–ê–Ω–Ω–∞, –ë–æ—Ä–∏—Å",
            "–í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ - –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–π.",
        ),
    ],
    ids=[
        "Example1",
        "Example2",
        "Test2",
        "Test3",
        "Test4",
        "Test5",
        "Test6",
        "Sample",
    ],
)
def test_9_5_2(data, expected):
    assert m_9_5_2(data) == expected


# === Test –¥–ª—è –∑–∞–¥–∞—á–∏ 9.5.3 ===


@pytest.mark.parametrize(
    "data, expected",
    [
        # Example 1
        (
            "‚ò† ‚öî üïØ\n‚ò† üîÆ ‚öî üìú üïØ",
            "–ü–µ—Ä–≤—ã–π —Å–≤–∏—Ç–æ–∫ —Å–∫—Ä—ã—Ç –≤ —Ç–µ–∫—Å—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ.",
        ),
        # Example 2
        (
            "‚ú° ‚öú ‚òÄ\n‚ôÜ üúÇ üúÑ",
            "–°–≤–∏—Ç–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ä–∞–∑–Ω—ã–º —ç–ø–æ—Ö–∞–º.",
        ),
        # Example 3
        (
            "‚òÄ ‚òæ ‚úπ\n‚òÄ ‚ú° ‚òæ ‚ú¶ ‚úπ",
            "–ü–µ—Ä–≤—ã–π —Å–≤–∏—Ç–æ–∫ —Å–∫—Ä—ã—Ç –≤ —Ç–µ–∫—Å—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ.",
        ),
        # Example 4
        (
            "‚ò• ‚òº ‚òæ\n‚ò• ‚òÄ ‚òæ ‚ú°",
            "–°–≤–∏—Ç–∫–∏ –∏–º–µ—é—Ç –æ–±—â–∏–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ –∏—Ö –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–ª–∏—á–µ–Ω.",
        ),
        # Test ‚Ññ1
        (
            "‚ö° üî• üíß\nüåø ‚ö° üî• üåô üíß",
            "–ü–µ—Ä–≤—ã–π —Å–≤–∏—Ç–æ–∫ —Å–∫—Ä—ã—Ç –≤ —Ç–µ–∫—Å—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ.",
        ),
        # Test ‚Ññ2
        (
            "‚òÄ ‚òÅ üåô\nüåô ‚òÄ ‚òÅ",
            "–°–≤–∏—Ç–∫–∏ –∏–º–µ—é—Ç –æ–±—â–∏–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ –∏—Ö –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–ª–∏—á–µ–Ω.",
        ),
        # Test ‚Ññ3
        (
            "‚öú ü¶á ü©∏\nü¶á ü©∏ ‚öú",
            "–°–≤–∏—Ç–∫–∏ –∏–º–µ—é—Ç –æ–±—â–∏–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ –∏—Ö –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–ª–∏—á–µ–Ω.",
        ),
        # Test ‚Ññ4
        (
            "üîÆ üåå ‚ú®\nüïØ üèπ üé≠",
            "–°–≤–∏—Ç–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ä–∞–∑–Ω—ã–º —ç–ø–æ—Ö–∞–º.",
        ),
        # Test ‚Ññ5
        (
            "üó° üèπ üî•\nüó° üèπ üî• ‚öî üõ°",
            "–ü–µ—Ä–≤—ã–π —Å–≤–∏—Ç–æ–∫ —Å–∫—Ä—ã—Ç –≤ —Ç–µ–∫—Å—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ.",
        ),
        # Sample
        (
            "‚ö° üî• üíß\nüåø ‚ö° üî• üåô üíß",
            "–ü–µ—Ä–≤—ã–π —Å–≤–∏—Ç–æ–∫ —Å–∫—Ä—ã—Ç –≤ —Ç–µ–∫—Å—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ.",
        ),
    ],
    ids=[
        "Example1",
        "Example2",
        "Example3",
        "Example4",
        "Test1",
        "Test2",
        "Test3",
        "Test4",
        "Test5",
        "Sample",
    ],
)
def test_9_5_3(data, expected):
    assert m_9_5_3(data) == expected
