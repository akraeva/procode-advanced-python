import pytest
from src.module_2 import m_2_6_1, m_2_6_2, m_2_6_3, m_2_6_4, m_2_6_5, m_2_6_6


# === Тесты для задачи 2.6.1 ===


@pytest.mark.parametrize(
    "lines, expected",
    [
        (
            ["крест\n", "фонарь\n", "пистолет\n"],
            "Снаряжение обновлено: ['нож', 'пистолет', 'фонарь', 'крест', 'рукоять от меча']",
        ),
        (
            ["топор\n", "дробовик\n", "мачете\n"],
            "Снаряжение обновлено: ['нож', 'пистолет', 'фонарь', 'крест', 'рукоять от меча', 'топор', 'дробовик', 'мачете']",
        ),
        (
            ["святая вода\n", "Кол\n", "нож\n"],
            "Снаряжение обновлено: ['нож', 'пистолет', 'фонарь', 'крест', 'рукоять от меча', 'святая вода', 'Кол']",
        ),
    ],
)
def test_m_2_6_1(lines, expected):
    assert m_2_6_1(lines) == expected


# === Тесты для задачи 2.6.2 ===


@pytest.mark.parametrize(
    "lines, expected",
    [
        (
            [
                "нож\n",
                "святая вода\n",
                "пистолет\n",
                "магический амулет\n",
                "карта\n",
                "осиновый кол\n",
                "аптечка\n",
            ],
            "Оружие: ['нож', 'пистолет']\n"
            "Другие предметы: ['святая вода', 'магический амулет', 'карта', 'осиновый кол', 'аптечка']",
        ),
        (
            [
                "дробовик\n",
                "фонарь\n",
                "пистолет\n",
                "гонг\n",
                "торт\n",
                "порт\n",
                "сорт\n",
            ],
            "Оружие: ['дробовик', 'пистолет']\n"
            "Другие предметы: ['фонарь', 'гонг', 'торт', 'порт', 'сорт']",
        ),
        (
            ["a\n", "к\n", "р\n", "о\n", "п\n", "л\n", "ь\n"],
            "Оружие: []\nДругие предметы: ['a', 'к', 'р', 'о', 'п', 'л', 'ь']",
        ),
    ],
)
def test_m_2_6_2(lines, expected):
    assert m_2_6_2(lines) == expected


# === Тесты для задачи 2.6.3 ===


@pytest.mark.parametrize(
    "line, expected",
    [
        (
            "нож, топор повреждён, святая вода, пистолет, осиновый кол повреждён, крест",
            "Целое снаряжение: ['крест', 'пистолет', 'святая вода', 'нож']\n"
            "Поврежденное снаряжение: ['осиновый кол', 'топор']",
        ),
        (
            "нож повреждён, пистолет повреждён",
            "Целое снаряжение: []\nПоврежденное снаряжение: ['пистолет', 'нож']",
        ),
        (
            "мачете, топор, карта, святая вода",
            "Целое снаряжение: ['святая вода', 'карта', 'топор', 'мачете']\n"
            "Поврежденное снаряжение: []",
        ),
    ],
)
def test_m_2_6_3(line, expected):
    assert m_2_6_3(line) == expected


# === Тесты для задачи 2.6.4 ===

import pytest
from src.module_2 import m_2_6_4, m_2_6_5, m_2_6_6


@pytest.mark.parametrize(
    "lines, expected",
    [
        (
            [
                "2\n",
                "Джесси\n",
                "2\n",
                "Вода 10\n",
                "Сода 5\n",
                "Хосе\n",
                "3\n",
                "Аммиак 3\n",
                "Кислота 8\n",
                "Соль 15\n",
            ],
            "Заказы клиентов:\n"
            "Джесси:\n"
            "    Вода: 10\n"
            "    Сода: 5\n"
            "Хосе:\n"
            "    Аммиак: 3\n"
            "    Кислота: 8\n"
            "    Соль: 15",
        ),
        (
            ["1\n", "Винс\n", "1\n", "Сахар 50\n"],
            "Заказы клиентов:\n" "Винс:\n" "    Сахар: 50",
        ),
        (
            [
                "2\n",
                "Алекс\n",
                "2\n",
                "Хлор 20\n",
                "Фтор 15\n",
                "Мария\n",
                "1\n",
                "Вода 100\n",
            ],
            "Заказы клиентов:\n"
            "Алекс:\n"
            "    Хлор: 20\n"
            "    Фтор: 15\n"
            "Мария:\n"
            "    Вода: 100",
        ),
    ],
)
def test_m_2_6_4(lines, expected):
    assert m_2_6_4(lines) == expected


# === Тесты для задачи 2.6.5 ===


@pytest.mark.parametrize(
    "lines, expected",
    [
        (
            [
                "4\n",
                "Натрий\n",
                "Na\n",
                "11\n",
                "Хлор\n",
                "Cl\n",
                "17\n",
                "Кальций\n",
                "Ca\n",
                "20\n",
                "Железо\n",
                "Fe\n",
                "26\n",
                "Fe\n",
            ],
            "Список элементов:\n"
            "1. Натрий (Na) - атомный номер: 11\n"
            "2. Хлор (Cl) - атомный номер: 17\n"
            "3. Кальций (Ca) - атомный номер: 20\n"
            "4. Железо (Fe) - атомный номер: 26\n\n"
            "Атомный номер элемента Fe: 26",
        ),
        (
            ["1\n", "Золото\n", "Au\n", "79\n", "Au\n"],
            "Список элементов:\n"
            "1. Золото (Au) - атомный номер: 79\n\n"
            "Атомный номер элемента Au: 79",
        ),
        (
            [
                "3\n",
                "Сера\n",
                "S\n",
                "16\n",
                "Фосфор\n",
                "P\n",
                "15\n",
                "Кремний\n",
                "Si\n",
                "14\n",
                "X\n",
            ],
            "Список элементов:\n"
            "1. Сера (S) - атомный номер: 16\n"
            "2. Фосфор (P) - атомный номер: 15\n"
            "3. Кремний (Si) - атомный номер: 14\n\n"
            "Элемент с символом X не найден.",
        ),
    ],
)
def test_m_2_6_5(lines, expected):
    assert m_2_6_5(lines) == expected


# === Тесты для задачи 2.6.6 ===


@pytest.mark.parametrize(
    "start, end, expected",
    [
        (
            10,
            20,
            "Список городов с отсортированным срезом:\n"
            "1. Москва\n"
            "2. Петербург\n"
            "3. Томск\n"
            "4. Казань\n"
            "5. Екатеринбург\n"
            "6. Новосибирск\n"
            "7. Сочи\n"
            "8. Калуга\n"
            "9. Воронеж\n"
            "10. Уфа\n"
            "11. Барселона\n"
            "12. Краснодар\n"
            "13. Красноярск\n"
            "14. Милан\n"
            "15. Нижний Новгород\n"
            "16. Пермь\n"
            "17. Рим\n"
            "18. Самара\n"
            "19. Саратов\n"
            "20. Тверь",
        ),
    ],
)
def test_m_2_6_6(start, end, expected):
    assert m_2_6_6(start, end) == expected
