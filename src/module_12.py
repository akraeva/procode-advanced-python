# Stepick.org — PROкод: продвинутый курс по Python
# 12. Практические задания

from sys import stdin


# pylint: disable=W0105


# 12.1 Космические Рейнджеры: Операция "Сердце Вселенной"


# === Задача 1. Стартовый запуск  ===
"""
    Твой код должен:
        - Объявить функцию проверить_системы(*args).
        - Вывести список систем и их статус "OK" (на английском языке).
        - Функцию вызывать не нужно.
    Ограничение: не используйте sorted, list, set, dict, range
    """


def проверить_системы(*args):
    result = ["Проверка систем:"]
    result.extend(f"- {arg}: OK" for arg in args)
    print("\n".join(result))
    return "\n".join(result)


m_12_1_1 = проверить_системы


# === Задача 2. Грузовой отсек, оптимизация загрузки  ===
"""
    Твой код должен:
        - Написать тело функции загрузить_груз(**kwargs).
        - Вернуть(return) списки контейнеров и их содержимое
          в виде строк заданного формата.
        - Функцию вызывать не нужно.
    Ограничение: не используйте set, range
    """


def загрузить_груз(**kwargs):
    result = [
        f'Контейнер {key[-1]}: "{value}"' for key, value in sorted(kwargs.items())
    ]
    return "\n".join(result)


m_12_1_2 = загрузить_груз


# === Задача 3. Курс через астероидное поле  ===
"""
    Твой код должен:
        - Объявить рекурсивную функцию
            пройти_через_астероиды(количество, шаг=1).
        - Выводить сообщения на каждом шаге через print().
        - Корректно обрабатывать единственный оставшийся астероид.
        - Когда астероидов не останется -> вывести "Шаг X: Поле пройдено!".
        - Функцию вызывать не нужно.
    """

numeral = {1: "астероид", 5: "астероидов", 2: "астероида"}


def пройти_через_астероиды(количество, шаг=1):
    if количество == 0:
        print(f"Шаг {шаг}: Поле пройдено!")
        return
    numeral_word = numeral[5 if количество > 4 else 1 if количество == 1 else 2]
    print(
        f"Шаг {шаг}: {'Остался' if количество == 1 else 'Осталось'}"
        f" {количество} {numeral_word}"
    )
    пройти_через_астероиды(количество - 1, шаг + 1)


m_12_1_3 = пройти_через_астероиды


# === Задача 4. Сбой в навигации  ===
"""
    Твой код должен:
        - Объявить рекурсивную функцию найти_нод(a, b).
        - Использовать алгоритм Евклида.
        - Вернуть наибольший общий делитель.
        - Функцию вызывать не нужно.
    """


def найти_нод(a, b):
    if b == 0:
        return a
    return найти_нод(b, a % b)


m_12_1_4 = найти_нод


# === Задача 5. Код доступа к базе данных ===
"""
    Твой код должен:
        - Объявить lambda-функцию зашифровать, которая:
            Принимает число
            Умножает его на 42
            Возвращает результат
        - Функцию вызывать не нужно.
    """

зашифровать = lambda num: num * 42
m_12_1_5 = зашифровать


# === Задача 6. Энергетический щит  ===
"""
    Твой код должен:
        - Объявить внешнюю функцию создать_щит(),
          которая возвращает внутреннюю функцию.
        - Вложенная функция должна увеличивать уровень
          защиты на 10 при каждом вызове.
        - Функцию вызывать не нужно .
    """


def создать_щит():
    level = 0

    def shield():
        nonlocal level
        level += 10
        return level

    return shield


m_12_1_6 = создать_щит


# === Задача 7. Улучшение оружия ===
"""
    Твой код должен:
        - Объявить функцию улучшить_оружие(), которая увеличивает
          переменную мощность на 25. Изначально установить 50.
        - Использовать global для изменения переменной.
        - Функцию вызывать не нужно.
    """

мощность = 50


def улучшить_оружие():
    global мощность
    мощность += 25


m_12_1_7 = улучшить_оружие


# === Задача 8. Перезагрузка бортового ИИ ===
"""
    Твой код должен:
        - Объявить внешнюю функцию перезагрузить_ИИ(),
          внутри которой есть переменная скорость. Равна 100.
        - Внутренняя функция увеличивает скорость ИИ на 20 при каждом вызове.
        - Использовать nonlocal.
        - Функцию вызывать не нужно.
    """


def перезагрузить_ИИ():
    скорость = 100

    def speed_increase():
        nonlocal скорость
        скорость += 20
        return скорость

    return speed_increase


m_12_1_8 = перезагрузить_ИИ


# print(m_12_1_8(stdin.read()))


# === Задача 9. Улучшенный энергетический щит ===
"""
    Твой код должен:
        - Объявить декоратор улучшить_щит(), который удваивает
          возвращаемое значение.
        - Объявить функцию щит(), которая возвращает число 100.
        - Укрась эту функцию декоратором
        - Функцию вызывать не нужно.
    """


def улучшить_щит(func):
    def wrapper():
        result = func() * 2
        return result

    return wrapper


@улучшить_щит
def щит():
    return 100


m_12_1_9 = щит


# === Задача 10. Финальная битва ===
"""
    Твой код должен:
        - Объявить декоратор модификатор_урона(процент),
          который принимает число процент
          и увеличивает урон атаки на это значение.
        - Внутри декоратора должна быть вложенная обёртка,
          которая перемножает урон с коэффициентом (1 + процент / 100).
        - Объявить функцию атака(), которая возвращает 100 урона.
        - Функция атака() должна быть декорирована.
        - Функцию вызывать не нужно.
    Примечание:
        - Декоратор должен работать с любыми значениями процента!
        - В тестах будет передаваться разный процент увеличения урона,
          но в коде используй 50%.
        - Твой декоратор должен работать с любыми процентами!
        - Код должен быть гибким, он должен работать даже если
          в будущем понадобится усилить урон на 30%, 75% или 200%.
    """


def модификатор_урона(процент=50):
    def decorator(func):
        def wrapper():
            result = func() * (1 + процент / 100)
            return result

        return wrapper

    return decorator


@модификатор_урона()
def атака():
    return 100


m_12_1_10 = атака


# print(m_12_1_10(stdin.read()))
