# Stepick.org — PROкод: продвинутый курс по Python
# 10. Практические задания

from sys import stdin


# pylint: disable=W0105


# 10.1 Легенда о потерянных артефактах аниме-миров


# === Задача 1. Камни чакры  ===
"""
    - Принять список чакр (разделённые пробелами).
    - Преобразовать в множество (чтобы убрать повторы).
    - Отсортировать множество и представить его в виде строки с {}.
    - Вывести отформатированный результат.
    Ограничение: не используйте list, dict, range
    """


def m_10_1_1(data: str):
    chakras = sorted(set(data.split()))
    return f"{{{', '.join(chakras)}}}"


# print(m_10_1_1(input()))


# === Задача 2. Знаки с Грешниками  ===
"""
    - Принять список имён грешников (разделённые пробелами).
    - Создать множество из этих имён.
    - Принять имя, которое нужно удалить.
    - Принять имя, которое нужно добавить.
    - Вывести обновлённый список грешников в отсортированном виде в формате {}.
    """

# from sys import stdin


def m_10_1_2(data: str):
    lines = data.strip().split("\n")
    sinners = set(lines[0].split())
    to_remove, to_add = lines[1:]
    sinners.remove(to_remove)
    sinners.add(to_add)
    return f"{{{', '.join(sorted(sinners))}}}"


# print(m_10_1_2(stdin.read()))


# === Задача 3. Кланы Хантера  ===
"""
    Получить два множества:
        - охотники (разделены пробелами).
        - преступники (разделены пробелами).
            - Найти общих людей (пересечение множеств).
            - Найти уникальных охотников (разность множеств).
            - Вывести оба результата в предсказуемом порядке.
    Ограничение: не используйте list, dict, range...
    """

# from sys import stdin


def m_10_1_3(data: str):
    hunters, criminals = (set(line.split()) for line in data.strip().split("\n"))
    common = hunters & criminals
    purebred = hunters - criminals
    return (
        f"Общие: {{{', '.join(sorted(common))}}}\n"
        f"Чистые охотники: {{{', '.join(sorted(purebred))}}}"
    )


# print(m_10_1_3(stdin.read()))


# === Задача 4. Легендарные техники  ===
"""
    - Получить два множества:
        - те, кто владеет техникой "Ультра-инстинкт"
        - те, кто достиг "Истинного Ультра-инстинкта"
    - Проверить, является ли второе множество подмножеством первого.
    - Вывести результат в формате:
    Все мастера входят в первое множество: True/False
    Ограничение: не используйте list, dict, range
    """

# from sys import stdin


def m_10_1_4(data: str):
    possess, achieved = (set(line.split()) for line in data.strip().split("\n"))
    return f"Все мастера входят в первое множество: {achieved.issubset(possess)}"


# print(m_10_1_4(stdin.read()))


# === Задача 5. Священный артефакт аниме-вселенной ===
"""
    - Получить список легендарных аниме.
    - Преобразовать его в замороженное множество (frozenset).
    - Вывести отсортированный список этих аниме. Для вывода списка
      использовать переменную anime_frozen_set
    Важно: переменная anime_frozen_set должна оставаться
        замороженным множеством
    Ограничение: не используйте dict, range
    """


def m_10_1_5(data: str):
    anime = frozenset(name.strip() for name in data.split(","))
    return sorted(anime)


# print(m_10_1_5(input()))


# 10.2 Футбольный клуб "Авангард": Анализ статистики


# === Задача 1. Уникальные достижения  ===
"""
    Получить строку с достижениями, разделёнными запятыми.
    Преобразовать строку в список, а затем в множество для удаления дубликатов.
    Отсортировать уникальные достижения по алфавиту и вывести результат.
    Ограничение: не используйте dict, range
    """


def m_10_2_1(data: str):
    achievements = set([achiev.strip() for achiev in data.split(",")])
    return sorted(achievements)


# print(m_10_2_1(input()))


# === Задача 2. Статистика матчей ===
"""
    - Получить два списка достижений из двух матчей
      (каждый элемент --> отдельное достижение).
    - Найти общее множество достижений (пересечение).
    - Определить достижения, встречающиеся только в первом матче
      (разность первого и второго множества).
    - Определить достижения, встречающиеся только во втором матче
      (разность второго и первого множества).
    - Выводы отсортировать.
    Ограничение: не используйте dict, range
    """

# from sys import stdin


def m_10_2_2(data: str):
    match1, match2 = (
        set(achiev.strip() for achiev in line.split(","))
        for line in data.strip().split("\n")
    )
    return (
        f"Общие достижения: {sorted(match1 & match2)}\n"
        f"Достижения только в матче 1: {sorted(match1 - match2)}\n"
        f"Достижения только в матче 2: {sorted(match2 - match1)}"
    )


# print(m_10_2_2(stdin.read()))


# === Задача 3. Обновление статистики ===
"""
    Получить исходное множество статистических показателей.
    Добавить новые достижения в базу данных.
    Удалить из базы данные, которые больше не актуальны.
    Вывести итоговое отсортированное множество статистики.
    Ограничение: не используйте dict, range
    """

# from sys import stdin


def m_10_2_3(data: str):
    indicators, to_update, to_remove = (
        set(indicator.strip() for indicator in line.split(","))
        for line in data.strip().split("\n")
    )
    result = sorted((indicators | to_update) - to_remove)
    return f"{{{', '.join(result)}}}"


# print(m_10_2_3(stdin.read()))


# === Задача 4. Проверка состава команды ===
"""
    Получить набор обязательных навыков.
    Получить словарь, где:
        - ключ --> имя игрока,
        - значение ---> множество его навыков.
    Определить, у каких игроков набор навыков является супермножеством
        обязательных (то есть включает все обязательные навыки).
    Вывести имена таких игроков. Если их нет, вывести
        Нет игроков с полным набором навыков
    """

# from sys import stdin


def m_10_2_4(data: str):
    lines = data.strip().strip().split("\n")
    required_skills = set(skill.strip() for skill in lines[0].split(","))
    players = {
        name: set(skill.strip() for skill in skills.split(","))
        for line in lines[2:]
        for name, skills in (line.split(":"),)
    }
    result = [
        name for name, skills in players.items() if required_skills.issubset(skills)
    ]
    if result:
        return f"Игроки с полным набором навыков: {', '.join(result)}"
    return "Нет игроков с полным набором навыков"


# print(m_10_2_4(stdin.read()))


# === Задача 5. Финальный отбор лучших показателей ===
"""
    - Определить найденные лучшие показатели
      (пересечение отчёта и эталона).
    - Определить отсутствующие показатели
      (те, что должны быть в отчёте, но отсутствуют).
    - Определить лишние показатели
      (те, что есть в отчёте, но не входят в лучшие).
    Эталонные лучшие показатели сохранены в неизменяемом наборе (frozenset),
      чтобы они не могли изменяться в процессе обработки данных.
    
    Требования к коду:
    - Получить список показателей из отчёта (через запятую).
    - Получить frozenset лучших показателей (эталонный список).
        - Определить найденные лучшие показатели (пересечение отчёта и эталона).
            Используйте переменную: found_best
        - Определить отсутствующие показатели (есть в эталоне, но не в отчёте).
            Используйте переменную: missing_best
        - Определить лишние показатели (есть в отчёте, но не входят в лучшие).
            Используйте переменную: extra_stats
    - Вывести три множества: Это уже есть в коде
        - Найденные лучшие показатели
        - Отсутствующие лучшие показатели
        - Лишние показатели в отчёте
    Ограничение: не используйте sorted, list, dict, range
    """

# from sys import stdin


def m_10_2_5(data: str):
    lines = data.strip().split("\n")
    report_stats = set(lines[0].split(", "))
    best_stats = frozenset(lines[1].split(", "))

    # решение
    found_best = report_stats & best_stats
    missing_best = best_stats - report_stats
    extra_stats = report_stats - best_stats

    # для тестирования
    return found_best, missing_best, extra_stats
