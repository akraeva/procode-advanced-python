# Stepick.org — PROкод: продвинутый курс по Python
# 6. Практические задания

from sys import stdin


# pylint: disable=W0105

# 6.1 Тайна Затерянного Храма

# === Задача 1. Вход в храм ===
"""
    Ты находишь старый свиток с числами. Нужно ввести их
    и создать кортеж, чтобы открыть врата.
    Твой код должен:
        Считать три целых числа от пользователя.
        Создать из них кортеж.
        Вывести кортеж на экран.

    """

# from sys import stdin


def m_6_1_1(data: str):
    return tuple(map(int, data.strip().split("\n")))


# print(m_6_1_1(stdin.read()))


# === Задача 2. Древний пароль ===
"""
    Ты видишь три числа, высеченные на стене, но их расположение неверное.
    Нужно разложить их по возрастанию, найти второй (средний) элемент
    и активировать рычаг.
    Твой код должен:
        Получить от пользователя три числа.
        Создать кортеж из этих чисел.
        Преобразовать кортеж в список, отсортировать и снова вернуть в кортеж.
        Использовать .index(), чтобы найти средний элемент.
        Вывести второй элемент (по индексу), который теперь стоит в центре.
    """

# from sys import stdin


def m_6_1_2(data: str):
    nums = tuple(map(int, data.strip().split("\n")))
    sorted_nums = tuple(sorted(list(nums)))
    return sorted_nums[1]


# print(m_6_1_2(stdin.read()))


# === Задача 3. Тайна символов судьбы ===
"""
    Ты смотришь на стены и видишь, что некоторые символы повторяются.
    Нужно сосчитать только уникальные знаки, чтобы открыть проход.
    Твой код должен:
        Принять строку с символами (слова через пробел).
        Создать из них кортеж.
        Определить, сколько различных (уникальных) символов в этом кортеже.
        Вывести количество уникальных элементов.
        И кортеж который создан в шаге номер 2.
        Ограничение: не используйте sorted, set, dict, range
    """


def m_6_1_3(data: str):
    characters = tuple(data.strip().split())
    unique = []
    for char in characters:
        if char not in unique:
            unique.append(char)
    return f"{len(unique)}\n{characters}"


# print(m_6_1_3(input()))


# === Задача 4. Открытие тайных дверей ===
"""
    Твой код должен:
        Получить от пользователя несколько чисел через пробел.
        Создать кортеж.
        Вывести минимальное и максимальное числа.
        Вывести кортеж из шага 2 без этих чисел
        Ограничение: не используйте sorted
    """


def m_6_1_4(data: str):
    nums = tuple(map(int, data.strip().split()))
    min_num, max_num = min(nums), max(nums)
    result = tuple(num for num in nums if num not in (min_num, max_num))
    return f"{min_num} {max_num}\n{result}"


# print(m_6_1_4(input()))


# === Задача 5. Вес сокровищ ===
"""
    Твой код должен:
        Получить веса мешков (несколько чисел через запятую).
        Создать кортеж.
        Вычислить сумму всех элементов и вывести ее.
        Создать новый кортеж, в котором каждое значение из кортежа
            шага 2 будет заменено разницей между суммой всех его элементов
            и самим числом. Вывести полученный кортеж на экран!
        Ограничение: не используйте sorted
    """


def m_6_1_5(data: str):
    bags = tuple(int(num.strip()) for num in data.strip().split(","))
    weight = sum(bags)
    result = tuple(weight - bag for bag in bags)
    return f"{weight}\n{result}"


# print(m_6_1_5(input()))


# === Задача 6. Каменная головоломка ===
"""
    Твой код должен:
        Принять строку с символами (разделёнными пробелом).
        Создать из них кортеж.
        Найти количество вхождений символа ☀️
        Найти  индекс символа, который встречается только один раз.
            Если такого нет, определить как: -1
        Вывести кортеж данных: (шаг 3, шаг 4)
    """


def m_6_1_6(data: str):
    characters = tuple(data.strip().split())
    unique = -1
    for char in characters:
        if characters.count(char) == 1:
            unique = characters.index(char)
            break
    return (characters.count("☀️"), unique)


# print(m_6_1_6(input()))


# === Задача 7. Древний свиток ===
"""
    Ты понимаешь, что чтобы расшифровать текст, нужно:
        Удалить повторяющиеся символы.
        Подсчитать, сколько символов было удалено.
        Расставить символы в алфавитном порядке.
    Твой код должен:
        Принять строку из букв (разделённых пробелами).
        Создать кортеж из этих букв.
        Преобразовать кортеж в список, удалить повторяющиеся буквы
            и подсчитать, сколько символов было удалено.
        Отсортировать список.
        Вернуть список обратно в кортеж.
        Вывести полученный кортеж и количество удалённых символов.
    """


def m_6_1_7(data: str):
    letters = tuple(data.strip().split())
    result = tuple(sorted(set(letters)))
    return f"{result}\n{len(letters) - len(result)}"


# print(m_6_1_7(input()))


# === Задача 8. Тайна закрытых врат ===
"""
    Ты понимаешь, что нужно различные действия в зависимости от длины кода.
    Твой код должен:
        Принять строку символов (разделённых пробелами).
        Создать из них кортеж.
        Проверить количество символов в кортеже:
            - Если меньше 3 → Вывести "Ошибка! Недостаточно символов!".
            - Если от 3 до 6 символов → Оставить только три последних символа.
            - Если больше 6 символов → Оставить три первых
              и три последних символа.
        Вывести полученный кортеж.
        Ограничение: не используйте sorted
    """


def m_6_1_8(data: str):
    characters = tuple(data.strip().split())
    if len(characters) < 3:
        return "Ошибка! Недостаточно символов!"
    if len(characters) <= 6:
        return f"{characters[-3:]}"
    return f"{characters[:3] + characters[-3:]}"


# print(m_6_1_8(input()))


# === Задача 9. Финальный артефакт ===
"""
    Твой код должен:
        Принять два набора символов (по отдельности, через пробел).
        Создать два кортежа.
        Объединить их в один кортеж.
        Удалить повторяющиеся символы.
            - Если количество символов чётное → отсортировать.
            - Если количество символов нечётное → перевернуть порядок.
        Вывести итоговый кортеж.
    """

# from sys import stdin


def m_6_1_9(data: str):
    chars1, chars2 = (tuple(line.split()) for line in data.strip().split("\n"))
    chars = []
    for char in chars1 + chars2:
        if char not in chars:
            chars.append(char)
    return tuple(sorted(chars) if len(chars) % 2 == 0 else chars[::-1])


# print(m_6_1_9(stdin.read()))


# === Задача 10. Секретное послание ===
"""
    Ты понимаешь, что:
        Удалять дубликаты нельзя --> буквы должны оставаться на своих местах.
        Лишние символы (*, !, ?) мешают --> их нужно убрать.
        Буквы нужно объединить в единое слово, сохраняя их исходный порядок.
        Только после этого ты найдёшь ключевую букву послания.
    Твой код должен:
        Принять строку из символов (разделённых пробелами).
        Создать кортеж из этих символов.
        Удалить лишние символы, но сохранить порядок букв.
        Объединить буквы в строку.
        Определить ключевую букву (центральную в послании).
        Вывести полученное послание и ключевую букву.
        Ограничение: не используйте sorted
    """


def m_6_1_10(data: str):
    letters = tuple(data.strip().split())
    result = "".join(letter for letter in letters if letter.isalpha())
    return f"{result}\nКлючевая буква: {result[len(result)//2]}"


# print(m_6_1_10(input()))
