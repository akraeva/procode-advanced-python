# Stepick.org — PROкод: продвинутый курс по Python
# 9. Работа с множествами (set)

from sys import stdin


# pylint: disable=W0105

# 9.1  Множества: Особенности и основные характеристики


# === Задача 1. Магическое множество чисел  ===
"""
    Шаг 1. Считайте одну строку с числами, разделёнными пробелами.
    Шаг 2. Преобразуйте введённые значения в множество (повторы удаляются).
    Шаг 3. Найдите минимальное и максимальное число в этом множестве
            и вычислите их сумму.
    Шаг 4. Выведите результат. Округлить до 2х знаков после запятой!
    """


def m_9_1_1(data: str):
    nums = set(map(float, data.split()))
    result = min(nums) + max(nums)
    return f"Сумма минимального и максимального числа: {round(result, 2)}"


# print(m_9_1_1(input()))


# === Задача 2. Уникальные обитатели волшебного леса  ===
"""
    Шаг 1. Считайте первую строку —> список обитателей
            (слова через пробел), в котором возможны повторы.
    Шаг 2. Преобразуйте список в множество, чтобы удалить дубликаты.
    Шаг 3. Выведите количество уникальных обитателей в формате:
            Количество уникальных обитателей в Лесном Реестре: <число>
    Шаг 4. Считайте вторую строку —> имя обитателя для проверки.
            Если имя есть среди уникальных, выведите:
                Обитатель '<имя>' зарегистрирован.
            иначе выведите:
                Обитатель '<имя>' не зарегистрирован.
    """


# from sys import stdin


def m_9_1_2(data: str):
    line1, name = data.strip().split("\n")
    dwellers = set(line1.split())
    return (
        f"Количество уникальных обитателей в Лесном Реестре: {len(dwellers)}\n"
        f"Обитатель '{name}' {'' if name in dwellers else 'не '}зарегистрирован."
    )


# print(m_9_1_2(stdin.read()))


# === Задача 3. Уникальны ли цифры свитка  ===
"""
    Шаг 1. Считайте одну строку, состоящую из цифр.
    Шаг 2. Проверьте, встречаются ли какие-либо цифры более одного раза.
    Шаг 3. Выведите Да, если все цифры уникальны; иначе выведите Нет.
    """


def m_9_1_3(data: str):
    nums = tuple(map(int, data))
    return "Да" if len((nums)) == len(set(nums)) else "Нет"


# print(m_9_1_3(input()))


# === Задача 4. Совпадают ли наборы цифр  ===
"""
    Шаг 1. Считайте две строки, каждая состоит из цифр.
    Шаг 2. Определите наборы цифр, использованных в каждой строке
            (без учёта порядка и количества повторов).
    Шаг 3. Выведите Да, если наборы совпадают, иначе выведите Нет.
    """


# from sys import stdin


def m_9_1_4(data: str):
    nums1, nums2 = (set(map(int, line)) for line in data.strip().split("\n"))
    return "Да" if nums1 == nums2 else "Нет"


# print(m_9_1_4(stdin.read()))


# 9.2  Множества: Основные операции и функции


# === Задача 1. Уникальные зрители кинотеатра  ===
"""
    Шаг 1. Считайте все строки входных данных,
        каждая строка содержит имя зрителя.
    Шаг 2. Определите, сколько уникальных имён
        встретилось во всём списке.
    Шаг 3. Выведите единственное число, общее
        количество уникальных зрителей.
    """

# from sys import stdin


def m_9_2_1(data: str):
    lst = list(map(str.strip, data.strip().split()))
    return len(set(lst))


# print(m_9_2_1(stdin.read()))


# === Задача 2. Ресурсы после ядерной войны  ===
"""
    Шаг 1. Считайте одну строку, содержащую названия ресурсов,
    разделённые символом ;. Пробелы вокруг названий следует игнорировать.
    Шаг 2. Определите множество уникальных ресурсов (без повторов).
    Шаг 3. Найдите:
        — общее количество уникальных ресурсов;
        — самый ценный ресурс --> с максимальной длиной названия;
        — самый редкий ресурс --> с минимальной длиной названия;
        — суммарную «ценность» --> сумму длин всех уникальных названий.
    Шаг 4. Выведите результаты строго в формате строк (каждую с новой строки):
        Общее количество уникальных ресурсов: <число>
        Самый ценный ресурс: <ресурс>
        Самый редкий ресурс: <ресурс>
        Суммарная ценность ресурсов: <число>
        Ресурсы в отсортированном порядке: <ресурс1, ресурс2, ...>
    Ресурсы в последней строке должны быть отсортированы по возрастанию длины
    названия; при равной длине в алфавитном порядке.
    Список выводите через запятую и пробел.
    """


def m_9_2_2(data: str):
    resources = [res.strip() for res in data.split(";")]
    uniq_res = sorted(set(resources), key=lambda r: (len(r), r))
    result = []
    result.append(f"Общее количество уникальных ресурсов: {len(uniq_res)}")
    result.append(f"Самый ценный ресурс: {max(uniq_res, key=len)}")
    result.append(f"Самый редкий ресурс: {min(uniq_res, key=len)}")
    result.append(f"Суммарная ценность ресурсов: {sum(map(len, uniq_res))}")
    result.append(f"Ресурсы в отсортированном порядке: {', '.join(uniq_res)}")
    return "\n".join(result)


# print(m_9_2_2(input()))


# === Задача 3. Зашифрованный сигнал с планеты Алтариус  ===
"""
    Шаг 1. Считайте одну строку текста
        (возможны латинские буквы, пробелы, цифры и другие символы).
    Шаг 2. Выделите все цифры от 0 до 9, которые встречаются в строке
         оставив каждую только один раз.
    Шаг 3. Отсортируйте найденные цифры по возрастанию и выведите
        их через пробел в одной строке.
    Шаг 4. Если в строке нет цифр, выведите ровно: Цифр нет.
    """


def m_9_2_3(data: str):
    nums = sorted(num for num in set(data) if num.isdigit())
    if nums:
        return " ".join(nums)
    return "Цифр нет"


# print(m_9_2_3(input()))


# === Задача 4. Платформа «JobTalk»: уникальные кандидаты  ===
"""
    Шаг 1. Входные данные состоят из нескольких строк формата
        имя кандидата: комментарий
        (имя может содержать пробелы; комментарий --> любые символы).
    Шаг 2. Для каждой строки выделите имя кандидата как подстроку до
        первого символа : (пробелы по краям имени игнорируйте).
    Шаг 3. Определите количество уникальных имён кандидатов
        и выведите одно число.
    """

# from sys import stdin


def m_9_2_4(data: str):
    names = set(line[: line.index(":")].strip() for line in data.strip().split("\n"))
    return len(names)


# print(m_9_2_4(stdin.read()))


# === Задача 5. Дезоксирибонуклеиновая кислота  ===
"""
    Шаг 1. Считайте одну строку, состоящую из заглавных латинских букв.
        Допускаются любые буквы, не только A, C, G, T.
    Шаг 2. Проверьте, содержит ли строка все четыре символа A, C, G, T
        хотя бы по одному разу.
    Шаг 3. Выведите YES, если все символы присутствуют, иначе выведите NO.
    """


def m_9_2_5(data: str):
    test_set = {"A", "C", "G", "T"}
    dna = set(ch for ch in data if ch in test_set)
    return "YES" if test_set == dna else "NO"


# print(m_9_2_5(input()))
