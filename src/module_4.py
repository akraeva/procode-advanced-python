# Stepick.org — PROкод: продвинутый курс по Python
# 4. Работа с функциями. Начало

from string import punctuation


# pylint: disable=W0105

# 4.1 Что такое функции. Их объявление и вызов

# === Задача 1-1. Привет от функции ===
"""
    Напиши только определение функции say_hello(),
    которая при вызове выводит ровно эту строку:
    Привет! Я функция. Я здесь, чтобы работать за тебя. Плати печеньками!
    Вызов функции писать не нужно.
    """


def m_4_1_1():
    def say_hello():
        print("Привет! Я функция. Я здесь, чтобы работать за тебя. Плати печеньками!")


# === Задача 1-2. breaking_bad: I AM THE ONE WHO KNOCKS ===
"""
    Напиши только определение функции breaking_bad(),
    которая при вызове выводит ровно:
    I AM THE ONE WHO KNOCKS
    Вызов функции писать не нужно.
    """


def m_4_1_2():
    def breaking_bad():
        print("I AM THE ONE WHO KNOCKS")


# === Задача 2-1. Поиск магического числа ===
"""
    Считайте одну строку с целыми числами, разделёнными пробелами.
    Преобразуйте её в список чисел и найдите первое число,
    которое делится на 7 без остатка.
    Выведите: это число --> если оно найдено;
    None --> если в последовательности нет подходящих чисел.
    """


def m_4_1_3(data: str):
    nums = map(int, data.split())
    for num in nums:
        if num % 7 == 0:
            return num
    return None


# print(m_4_1_3(input()))


# === Задача 2-2. Послание из космоса: Тайна магического слова ===
"""
    Реализуйте функцию find_magic_word(message), которая принимает одну
    строку с посланием и:
        - разбивает её на слова;
        - для каждого слова удаляет знаки препинания только с начала и конца
          (набор знаков берите из модуля String;
        - определяет, является ли длина очищенного слова простым числом;
        - как только встретится первое слово с простой длиной -->
          выводит это слово с помощью print;
        - если подходящих слов нет --> выводит None.

    Требования:
        - функция работает только с переданной строкой (без input() внутри);
        - вызывать функцию не нужно, нужно только её определить.
    """


def m_4_1_4(data: str):
    # from string import punctuation
    def find_magic_word(message: str):
        words = [word.strip(punctuation) for word in message.split()]
        max_len = len(max(words, key=len))
        primes = tuple(
            num
            for num in range(2, max_len + 1)
            if 1 < num < 4 or not any(num % n == 0 for n in range(2, int(num**0.5) + 1))
        )
        for word in words:
            if len(word) in primes:
                print(word)
                return word
        print(None)
        return None

    return find_magic_word(data)


# 4.2 Оператор return

# === Задача 1. terminator: I’LL BE BACK ===
"""
    Напиши только определение функции terminator(),
    которая возвращает ровно эту строку (через return):
    I’LL BE BACK
    Вызов функции писать не нужно.
    """


def terminator():
    return "I’LL BE BACK"


# === Задача 2. Проверка чётности числа для Шерлока ===
"""
    Создайте функцию check_parity(number), которая принимает
    одно число и возвращает строку:
        - четное --> если число чётное;
        - нечетное --> если число нечётное.
    Требования:
        - используйте ключевое слово return для возврата результата;
        - не меняйте имя функции;
        - не вызывайте функцию и не используйте input(), только определите её.
    """


def check_parity(number):
    if number < 1:
        return None
    if number % 2 == 0:
        return "четное"
    return "нечетное"


# === Задача 3. Можно ли построить треугольник ===
"""
    Объявите функцию can_form_triangle(a, b, c), которая принимает
    три целых числа --> длины сторон --> и возвращает:
        - True, если из этих сторон можно составить треугольник
          (каждая сторона строго меньше суммы двух других);
        - False --> в противном случае.
    Требования:
        - используйте return для возврата результата;
        - не вызывайте функцию и не используйте input(), только определите её.
    """


def can_form_triangle(a, b, c):
    if a + b > c and b + c > a and c + a > b:
        return True
    return False


# === Задача 4. Экстремальные температуры ===
"""
    Считайте одну строку целых чисел через пробел и
    сохраните их в список temps. Далее:
        - объявите функцию, которая принимает два числа -->
          минимальное и максимальное --> и возвращает их произведение;
        - вызовите эту функцию, передав ей min(temps) и max(temps);
        - выведите результат, а затем
          на новой строке выведите сам список temps.
    Формат вывода (две строки):
        - первая строка --> произведение минимума и максимума;
        - вторая строка --> список temps (в стандартном виде Python-списка).
    """


def m_4_2_4(data: str):

    def min_max_product(a, b):
        return a * b

    # data = input()
    temps = [int(x) for x in data.split()]
    result = f"{min_max_product(min(temps), max(temps))}" f"\n{temps}"
    print(result)  # temps по условию требудется, но на деле не нужно
    return result


# === Задача 5. Определить самого сильного ===
"""
    Реализуйте функцию get_strongest_avenger(names, powers), где:
        - names --> список строк с именами Отомстителей;
        - powers --> список целых чисел с соответствующими уровнями силы.
    Функция должна вернуть имя героя с наибольшим значением силы.
    Если максимальное значение встречается у нескольких героев,
    верните первого по порядку.
    Гарантируется, что списки не пустые и имеют одинаковую длину.
    Вызывать функцию не нужно; ввод через input() не использовать
        --> требуется только определить функцию.
    """


def get_strongest_avenger(names, powers):
    avengers = zip(names, powers)
    max_power = max(avengers, key=lambda a: a[1])
    return max_power[0]
