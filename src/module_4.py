# Stepick.org — PROкод: продвинутый курс по Python
# 4. Работа с функциями. Начало

from sys import stdin


# pylint: disable=W0105

# 4.1 Что такое функции. Их объявление и вызов

# === Задача 1-1. Привет от функции ===
"""
    Напиши только определение функции say_hello(),
    которая при вызове выводит ровно эту строку:
    Привет! Я функция. Я здесь, чтобы работать за тебя. Плати печеньками!
    Вызов функции писать не нужно.
    """


def m_4_1_1():
    def say_hello():
        print("Привет! Я функция. Я здесь, чтобы работать за тебя. Плати печеньками!")


# === Задача 1-2. breaking_bad: I AM THE ONE WHO KNOCKS ===
"""
    Напиши только определение функции breaking_bad(),
    которая при вызове выводит ровно:
    I AM THE ONE WHO KNOCKS
    Вызов функции писать не нужно.
    """


def m_4_1_2():
    def breaking_bad():
        print("I AM THE ONE WHO KNOCKS")


# === Задача 2-1. Поиск магического числа ===
"""
    Считайте одну строку с целыми числами, разделёнными пробелами.
    Преобразуйте её в список чисел и найдите первое число,
    которое делится на 7 без остатка.
    Выведите: это число --> если оно найдено;
    None --> если в последовательности нет подходящих чисел.
    """


def m_4_1_3(data: str):
    nums = map(int, data.split())
    for num in nums:
        if num % 7 == 0:
            return num
    return None


# print(m_4_1_3(input()))


# === Задача 2-2. Послание из космоса: Тайна магического слова ===
"""
    Реализуйте функцию find_magic_word(message), которая принимает одну
    строку с посланием и:
        - разбивает её на слова;
        - для каждого слова удаляет знаки препинания только с начала и конца
          (набор знаков берите из модуля String;
        - определяет, является ли длина очищенного слова простым числом;
        - как только встретится первое слово с простой длиной -->
          выводит это слово с помощью print;
        - если подходящих слов нет --> выводит None.

    Требования:
        - функция работает только с переданной строкой (без input() внутри);
        - вызывать функцию не нужно, нужно только её определить.
    """


def m_4_1_4(data: str):
    # from string import punctuation
    def find_magic_word(message: str):
        words = [word.strip(punctuation) for word in message.split()]
        max_len = len(max(words, key=len))
        primes = tuple(
            num
            for num in range(2, max_len + 1)
            if 1 < num < 4 or not any(num % n == 0 for n in range(2, int(num**0.5) + 1))
        )
        for word in words:
            if len(word) in primes:
                print(word)
                return word
        print(None)
        return None

    return find_magic_word(data)


# 4.2 Оператор return

# === Задача 1. terminator: I’LL BE BACK ===
"""
    Напиши только определение функции terminator(),
    которая возвращает ровно эту строку (через return):
    I’LL BE BACK
    Вызов функции писать не нужно.
    """


def terminator():
    return "I’LL BE BACK"


# === Задача 2. Проверка чётности числа для Шерлока ===
"""
    Создайте функцию check_parity(number), которая принимает
    одно число и возвращает строку:
        - четное --> если число чётное;
        - нечетное --> если число нечётное.
    Требования:
        - используйте ключевое слово return для возврата результата;
        - не меняйте имя функции;
        - не вызывайте функцию и не используйте input(), только определите её.
    """


def check_parity(number):
    if number < 1:
        return None
    if number % 2 == 0:
        return "четное"
    return "нечетное"


# === Задача 3. Можно ли построить треугольник ===
"""
    Объявите функцию can_form_triangle(a, b, c), которая принимает
    три целых числа --> длины сторон --> и возвращает:
        - True, если из этих сторон можно составить треугольник
          (каждая сторона строго меньше суммы двух других);
        - False --> в противном случае.
    Требования:
        - используйте return для возврата результата;
        - не вызывайте функцию и не используйте input(), только определите её.
    """


def can_form_triangle(a, b, c):
    if a + b > c and b + c > a and c + a > b:
        return True
    return False


# === Задача 4. Экстремальные температуры ===
"""
    Считайте одну строку целых чисел через пробел и
    сохраните их в список temps. Далее:
        - объявите функцию, которая принимает два числа -->
          минимальное и максимальное --> и возвращает их произведение;
        - вызовите эту функцию, передав ей min(temps) и max(temps);
        - выведите результат, а затем
          на новой строке выведите сам список temps.
    Формат вывода (две строки):
        - первая строка --> произведение минимума и максимума;
        - вторая строка --> список temps (в стандартном виде Python-списка).
    """


def m_4_2_4(data: str):

    def min_max_product(a, b):
        return a * b

    # data = input()
    temps = [int(x) for x in data.split()]
    result = f"{min_max_product(min(temps), max(temps))}" f"\n{temps}"
    print(result)  # temps по условию требудется, но на деле не нужно
    return result


# === Задача 5. Определить самого сильного ===
"""
    Реализуйте функцию get_strongest_avenger(names, powers), где:
        - names --> список строк с именами Отомстителей;
        - powers --> список целых чисел с соответствующими уровнями силы.
    Функция должна вернуть имя героя с наибольшим значением силы.
    Если максимальное значение встречается у нескольких героев,
    верните первого по порядку.
    Гарантируется, что списки не пустые и имеют одинаковую длину.
    Вызывать функцию не нужно; ввод через input() не использовать
        --> требуется только определить функцию.
    """


def get_strongest_avenger(names, powers):
    avengers = zip(names, powers)
    max_power = max(avengers, key=lambda a: a[1])
    return max_power[0]


# 4.3 Именованные аргументы: формальные и фактические параметры

# === Задача 1. Миссия Отомстителей: Приветствие героя ===
"""
    Реализуйте функцию greet_hero(name, greeting="Привет"),
    которая принимает:
        - name --> имя героя (строка);
        - greeting --> приветствие (строка), по умолчанию "Привет".
    Функция должна вывести строку в формате:
        <greeting>, <name>!
    Ввод данных и вызов функции скрыты --> нужно только определить
    функцию, без input() и без явного вызова.
    """


def greet_hero(name, greeting="Привет"):
    print(f"{greeting}, {name}!")


# === Задача 2. Платформа для майнинга ===
"""
    Объявите функцию calculate_platform(length, width, mode=0), где:
        - length --> длина платформы (целое число),
        - width --> ширина платформы (целое число),
        - mode --> режим вычисления (по умолчанию 0).
    Функция должна возвращать (return):
        - периметр по формуле 2 * (length + width), если mode == 0;
        - площадь по формуле length * width, если mode != 0.
    Требования:
        - использовать return;
        - не вызывать функцию и не использовать input(), только объявить.
    """


def calculate_platform(length, width, mode=0):
    if mode == 0:
        return 2 * (length + width)
    return length * width


# === Задача 3. Регистрация участника фестиваля ===
"""
    Реализуйте функцию
    register(name, position="Студент", city="Неизвестен"),
    которая выводит строку:
        Участник {name} зарегистрирован как {position} из города {city}.
    Требования: name --> обязательный параметр (строка).
    Если position или city не переданы или состоят только из пробелов,
        внутри функции нужно подставить значения по умолчанию:
        "Студент" и "Неизвестен" соответственно
        (проверка пробелов --> в теле функции).
    Ввод и вызов функции скрыты --> требуется только определить
    функцию, без input() и без явного вызова.
    """


def register(name: str, position="Студент", city="Неизвестен"):
    if not position or position.isspace():
        position = "Студент"
    if not city or city.isspace():
        city = "Неизвестен"
    res = f"Участник {name} зарегистрирован как {position} из города {city}."
    print(res)
    return res


# === Задача 4. Расчёт итоговой стоимости заказа ===
"""
    Реализуйте функцию
    calculate_final_price(base_price, discount=0, shipping_fee=0),
    где:
        - base_price --> базовая стоимость заказа
          (число, обязательный параметр);
        - discount --> процент скидки
          (число или строка; по умолчанию 0);
        - shipping_fee --> стоимость доставки
          (число или строка; по умолчанию 0).
    Функция должна вычислить:
        final_price = base_price - (base_price * discount / 100) + shipping_fee
    и вывести строку:
        Итоговая сумма заказа: <final_price>
    Особенности:
        Ввод и вызов функции скрыты; нужно только определить функцию,
        без input() и без явного вызова.
        Тесты передают discount и shipping_fee именованными аргументами.
        Если discount или shipping_fee приходят как пустая строка или
        строка из пробелов, внутри функции трактуйте их как 0.
        Если приходят как непустые строки с числами --> преобразуйте к числам.
    """


def calculate_final_price(base_price: int, discount=0, shipping_fee=0):
    def chek(arg):
        if isinstance(arg, str):
            if not arg or arg.isspace():
                return 0
            elif arg.isalnum():
                return int(arg)
            else:
                return 0
        return arg

    final_price = base_price - (base_price * chek(discount) / 100) + chek(shipping_fee)
    result = f"Итоговая сумма заказа: {final_price}"
    print(result)
    return result


# === Задача 5. Регистрация и инициалы: Заркандский формат ===
"""
    Реализуйте функцию create_initials(name, surname, patronymic),
    которая принимает именованные аргументы:
        - name --> имя;
        - surname --> фамилия;
        - patronymic --> отчество.
    Функция должна вывести (через print) инициалы в формате:
        - первая буква фамилии + первая буква имени + первая буква отчества,
          все буквы --> в верхнем регистре.
    Вызов функции и ввод с клавиатуры выполняются во внешнем коде
    --> здесь нужно только объявить функцию.
    """


def create_initials(name, surname, patronymic):
    result = f"{surname[0].upper()}{name[0].upper()}{patronymic[0].upper()}"
    print(result)
    return result


# === Задача 6. Формирование профиля героя ===
"""
    Реализуйте функцию
    create_profile(name, power_level, ability="Неизвестная суперспособность"),
    которая:

    Проверяет имя, если name пустое или состоит только из пробелов --> выведите
        Ошибка: имя не может быть пустым
        и завершите функцию.

    Проверяет уровень силы.
        если power_level не положительное число (≤ 0) --> выведите
        Ошибка: уровень силы должен быть положительным числом
        и завершите функцию.

    Обрабатывает суперспособность.
        если ability пустая или состоит только из пробелов -->
        замените её на "Неизвестная суперспособность".

    Если все проверки пройдены --> выведите профиль героя в точном формате:
            Герой: <name>
            Уровень силы: <power_level>
            Суперспособность: <ability>

    Требования:
        ввод и вызов скрыты; нужно только объявить функцию,
        без input() и без явного вызова;
        проверку «только пробелы» выполняйте внутри функции
        (используйте например strip()).
    """


def create_profile(name, power_level, ability="Неизвестная суперспособность"):
    if not name or name.isspace():
        result = "Ошибка: имя не может быть пустым"
        print(result)
        return result
    if power_level <= 0:
        result = "Ошибка: уровень силы должен быть положительным числом"
        print(result)
        return result
    if not ability or ability.isspace():
        ability = "Неизвестная суперспособность"
    result = f"Герой: {name}\nУровень силы: {power_level}\nСуперспособность: {ability}"
    print(result)
    return result
