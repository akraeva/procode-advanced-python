# Stepick.org — PROкод: продвинутый курс по Python
# 2. Освежаем базовые знания

from sys import stdin


# 2.1 Объявление переменных, ввод (input()) и вывод (print())

# === Задача 1. Пересекаются ли встречи ===
"""
Даны времена начала и конца двух встреч в минутах от начала дня.
Считайте четыре целых числа (по одному в строке):
start1, end1, start2, end2.
Считаем, что встречи пересекаются, если у них есть общий промежуток
положительной длины (простое касание концами,
как end1 == start2, --> не пересечение).
Если встречи пересекаются, выведите на отдельных строках:
- Да
- вторую встречу, преобразованную в формат ЧЧ:ММ - ЧЧ:ММ (с ведущими нулями).
Если не пересекаются --> выведите только Нет.
Гарантируется, что значения не превышают 24 часа (0–1440).
Функция range() недоступна в этой задаче.
"""


def m_2_1_1(data):
    start1, end1, start2, end2 = map(int, data.split("\n"))
    if end1 <= start2:
        return "Нет"
    else:
        res = f"{start2//60:02}:{start2 % 60:02} - {end2//60:02}:{end2 % 60:02}"
        return f"Да\n{res}"


# print(m_2_1_1(stdin.read()))


# === Задача 2. Делим фрукты поровну ===
"""
Считайте из ввода два целых числа (по одному в строке):
сначала количество яблок, затем количество бананов.
Вычислите общее число фруктов и выведите две строки:
Общее количество фруктов: <сумма>
Каждому другу достанется по <поровну> фруктов. -->
где <поровну> равно половине от общей суммы.
Функция range() недоступна для использования в этой задаче.
"""


def m_2_1_2(apples, bananas):
    str_1 = f"Общее количество фруктов: {apples+bananas}"
    str_2 = f"Каждому другу достанется по {(apples+bananas)//2} фруктов."
    return "\n".join((str_1, str_2))


# print(m_2_1_2(int(input()), int(input())))


# === Задача 3. Секретное письмо мага ===
"""
Считайте три значения (по одному в строке):
- имя мага --> строка;
- возраст --> целое число;
- любимое число --> целое число.
Вычислите секретный код по формуле:
(возраст + любимое_число) * длина_имени
Выведите результат в формате:
Секретный код: <код>
Функция range() недоступна для использования в этой задаче.
"""


def m_2_1_3(name, age, number):
    return f"Секретный код: {(age+number)*len(name)}"


# print(m_2_1_3(input(), int(input()), int(input())))


# === Задача 4. Идеальный код замка ===
"""
Считайте два значения (каждое с новой строки):
- имя пользователя --> строка (имя может состоять из
  нескольких слов через пробел);
- любимое число --> целое число.
Вычислите:
- сумму цифр любимого числа;
- количество букв в имени, игнорируя пробелы.
Выведите результат в формате:
Код замка: <сумма_цифр>-<количество_букв>
Функция range() недоступна для использования в этой задаче.
"""


def m_2_1_4(name, number):
    number_sum = sum(int(x) for x in number)
    name_sum = sum(len(word) for word in name.split())
    return f"Код замка: {number_sum}-{name_sum}"


# print(m_2_1_4(input(), input()))


# === Задача 5. Прорыв в будущее ===
"""
Считайте четыре значения (каждое с новой строки):
- текущий год --> целое число;
- количество лет для подготовки --> целое число;
- число технологического развития --> целое число;
- название проекта --> строка.

Вычислите «индекс инноваций» по формуле:
индекс = (сумма цифр числа из пункта 3) + (количество символов в названии без пробелов)
Вычислите год прорыва:
год_прорыва = текущий_год + (количество_лет * индекс)

Выведите результат в формате: Год прорыва: <число>
"""


def m_2_1_5(*args):
    current_year = int(args[0])
    number_of_years = int(args[1])
    tech_number = int(args[2])
    project_name = args[3]
    innovation_index = sum(int(digit) for digit in str(tech_number)) + len(
        project_name.replace(" ", "")
    )
    breakthrough = current_year + number_of_years * innovation_index
    return f"Год прорыва: {breakthrough}"


# data = stdin.read().split("\n")
# print(m_2_1_5(*data))


# 2.2 Основные типы данных (int, float, str, bool)

# === Задача 1. Определение типа данных ===
"""
Ты создаёшь универсальный ввод: пользователь печатает любые значения,
а программа сама распознаёт их типы и сообщает результат.
Считайте четыре значения (каждое с новой строки). Значения могут быть
строками, числами или булевыми константами.
Определите тип каждого введённого значения и выведите четыре строки в формате:
Тип первого значения: <тип>
Тип второго значения: <тип>
Тип третьего значения: <тип>
Тип четвертого значения: <тип>
Где <тип> это результат вызова type(...), например <class 'int'>.

"""

# from sys import stdin


def m_2_2_1(*args):

    def detect_type(a):
        if a in ("True", "False"):
            return "bool"
        try:
            int(a)
            return "int"
        except ValueError:
            try:
                float(a)
                return "float"
            except ValueError:
                return "str"

    nums = ["первого", "второго", "третьего", "четвертого"]
    res = [
        f"Тип {num} значения: <class '{detect_type(arg)}'>"
        for num, arg in zip(nums, args)
    ]
    return "\n".join(res)


# data = (line.strip() for line in stdin)
# print(m_2_2_1(*data))


# === Задача 2. Золото пиратов и их доли ===
"""
Считайте два целых числа (каждое с новой строки):
- общее количество монет;
- количество пиратов.
Сначала вычтите 10% от общего числа монет, это расходы на ремонт.
Оставшиеся монеты поделите между пиратами поровну и определите остаток.

Выведите три строки строго в таком виде:
Монеты на расходы: <число>
Каждый пират получит <число> монет.
Останется <число> монет.
Слово «монет» в выводе остаётся неизменным, независимо от количества.
"""


def m_2_2_2(coins, pirates):
    expenses = coins // 10
    pirate = (coins - expenses) // pirates
    balance = (coins - expenses) % pirates
    res = f"Монеты на расходы: {expenses}\nКаждый пират получит {pirate} монет.\nОстанется {balance} монет."
    return res


# print(m_2_2_2(int(input()), int(input())))


# === Задача 3. Кто лучше охраняет замок ===
"""
Считайте два целых числа (каждое с новой строки):
- площадь участка Виктора;
- площадь участка Михаила.
Выведите одну из строк:
Виктор охраняет больше --> если площадь Виктора больше площади Михаила;
Михаил охраняет больше --> если площадь Михаила больше площади Виктора;
Они охраняют одинаковые участки --> если площади равны.
Если оба охраняли участок не больше 100 кв. м, дополнительно выведите строку:
Ни у кого из стражей нет участка больше 100 квадратных метров
"""


def m_2_2_3(victor: int, mikhail: int):
    supplement = "Ни у кого из стражей нет участка больше 100 квадратных метров"
    if victor > mikhail:
        res = "Виктор охраняет больше"
    elif victor < mikhail:
        res = "Михаил охраняет больше"
    else:
        res = "Они охраняют одинаковые участки"
    if victor <= 100 and mikhail <= 100:
        res += "\n" + supplement
    return res


# print(m_2_2_3(int(input()), int(input())))


# === Задача 4. Инопланетное смешение данных с ошибкой ввода ===
"""
Считайте одну строку с несколькими элементами, разделёнными пробелами.
Для каждого элемента определите тип и выведите его на новой строке.
Допустимые типы:
- целое число → int;
- вещественное число с точкой (например, 0.5, 99.99) → float;
- булево значение True или False (без кавычек) → bool;
- строка в двойных кавычках → str.
Если элемент нельзя отнести ни к одному из допустимых типов, выведите:
Неверный тип данных
"""


def m_2_2_4(data: str):
    def detect_type(a: str):
        if a in ("True", "False"):
            return "bool"
        if a[0] in ("'\"") and a[0] == a[-1]:
            return "str"
        try:
            int(a)
            return "int"
        except ValueError:
            try:
                float(a)
                return "float"
            except ValueError:
                return "Неверный тип данных"

    res = (detect_type(d) for d in data.split())
    return "\n".join(res)


# print(m_2_2_4(input()))


# === Задача 5. Арифметическая битва у волшебника ===
"""
Считайте два целых числа из одной строки через пробел:
первое для Десятикома, второе для Половинника.
Выполните операции:
- Десятиком: умножьте своё число на 2;
- Половинник: разделите своё число на 2.
Сравните полученные значения и выведите ровно одну строку:
Победил Десятиком! --> если результат Десятикома больше;
Победил Половинник! --> если результат Половинника больше;
Ничья! Числа равны. --> если результаты равны.
"""


def m_2_2_5(data: str):
    ten, half = map(int, data.split())
    ten *= 2
    half /= 2
    if ten > half:
        return "Победил Десятиком!"
    elif ten < half:
        return "Победил Половинник!"
    else:
        return "Ничья! Числа равны."


# print(m_2_2_5(input()))


# === Задача 6. Питомец-Счётчик на миссии ===
"""
Считай одно целое число --> стартовую позицию Счётчика.
Выполни шаги в точном порядке:
- умножь число на 2;
--- если исходное число нечётное --> умножь текущее значение ещё на 3;
--- если исходное число чётное --> раздели текущее значение на 3;
- раздели текущее значение на 2;
- прибавь 5.
Выведи итог в формате:
Конечная позиция Счетчика: <число>
Используй целочисленное деление (//) во всех операциях деления.
"""


def m_2_2_6(num: int):
    res = num * 2
    res = (res * 3 if num % 2 != 0 else res // 3) // 2 + 5
    return f"Конечная позиция Счетчика: {res}"


# print(m_2_2_6(int(input())))
