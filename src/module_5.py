# Stepick.org — PROкод: продвинутый курс по Python
# 5. Работа с кортежами (tuple)

from sys import stdin


# pylint: disable=W0105

# 5.1 Что такое кортежи и их отличие от списков

# === Задача 1. Список друзей ===
"""
    Считай три строки по порядку:
        имя друга --> строка;
        возраст --> целое число;
        город --> строка.
    Создай кортеж вида (имя, возраст, город) и выведи строку:
        Информация о друге: (<кортеж>)
    """

# from sys import stdin


def m_5_1_1(data: str):
    result = tuple(
        int(word.strip()) if word.isdigit() else word.strip() for word in data.split()
    )
    return f"Информация о друге: {result}"


# print(m_5_1_1(stdin.read()))


# === Задача 2. Путёвка в мир приключений ===
"""
    Считай две строки:
        - вещи из одежды, перечисленные через пробел;
        - вещи из оборудования, перечисленные через пробел.
    Преобразуй каждую строку в кортеж строк. Объедини два кортежа
    в один и затем удвой его (повторив порядок вещей дважды).
    Выведи результат в формате:
        Список вещей на экспедицию: (<кортеж>)
    """

# from sys import stdin


def m_5_1_2(data: str):
    clothes, equipment = (
        tuple(element for element in line.split()) for line in data.strip().split("\n")
    )

    return f"Список вещей на экспедицию: {(clothes + equipment) * 2}"


# print(m_5_1_2(stdin.read()))

# === Задача 3. САнализ оценок студентов ===
"""
    Считай:
        - целое число N --> количество студентов;
        - затем N целых чисел --> оценки.
    Сформируй кортеж всех оценок. Вычисли среднее значение и выведи его
    с двумя знаками после запятой. Сформируй новый кортеж из оценок,
    которые равны среднему или выше, сохранив порядок появления.
    Выведи три строки:
        - исходный кортеж оценок;
        - среднее значение (с двумя знаками после запятой);
        - кортеж оценок, равных или выше среднего.
    """

# from sys import stdin


def m_5_1_3(data: str):
    grades = tuple(map(int, data[1:].strip().split("\n")))
    average = sum(grades) / len(grades)
    above_average = tuple(grade for grade in grades if grade >= average)
    return f"{grades}\n{average:.2f}\n{above_average}"


# print(m_5_1_3(stdin.read()))


# === Задача 4.Нахождение наиболее удалённого объекта ===
"""
    Считайте:
        - целое число N --> количество объектов;
        - затем для каждого объекта по две строки:
        x и y (вещественные числа).
    Для каждого объекта сформируйте кортеж (x, y). Найдите объект
    с максимальным расстоянием до начала координат, где расстояние
    рассчитывается по формуле длины вектора.
    Выведите две строки:
        - кортеж координат наиболее удалённого объекта
          (как в стандартном представлении Python, с числами типа float);
        - расстояние до этого объекта, округлённое до 2 знаков после запятой.
    """

# from sys import stdin


def m_5_1_4(data: str):
    arr = tuple(map(float, data.strip().split("\n")))
    objects = zip(arr[1::2], arr[2::2])
    most_distant = max(objects, key=lambda c: (c[0] ** 2 + c[1] ** 2) ** 0.5)
    distant = (most_distant[0] ** 2 + most_distant[1] ** 2) ** 0.5
    return f"{most_distant}\n{distant:.2f}"


# print(m_5_1_4(stdin.read()))

# === Задача 5. Определение самого яркого цвета ===
"""
    Считай:
        - целое число N --> количество цветов;
        - затем для каждого цвета три целых числа: R, G, B (каждое с новой строки).
    Для каждого цвета
        - сформируй кортеж (R, G, B),
        - вычисли его яркость как R + G + B
        - найди цвет с максимальной яркостью.
    Выведи две строки:
        - кортеж самого яркого цвета;
        - его яркость (сумму R + G + B).
    """

# from sys import stdin


def m_5_1_5(data: str):
    arr = tuple(map(int, data.strip().split("\n")))
    rgb = zip(arr[1::3], arr[2::3], arr[3::3])
    brightnes = max(rgb, key=lambda c: sum(c))
    return f"{brightnes}\n{sum(brightnes)}"


# print(m_5_1_5(stdin.read()))

# === Задача 6. Циклический сдвиг кортежа инструкций ===
"""
    Считайте:
        - целое число N --> количество инструкций;
        - затем N целых чисел (каждое с новой строки)
          --> идентификаторы команд.
    Сформируйте кортеж из введённых чисел.
    Выполните циклический сдвиг вправо на 1:
    последний элемент становится первым, остальные сдвигаются вправо.
    Выведите две строки строго в таком виде:
        - Исходный кортеж: <кортеж>
        - Кортеж после сдвига: <кортеж>
    Если кортеж состоит из одного элемента, после сдвига он не меняется.
    """

# from sys import stdin


def m_5_1_6(data: str):
    commands = tuple(map(int, data[1:].strip().split("\n")))
    if len(commands) < 2:
        return f"Исходный кортеж: {commands}\nКортеж после сдвига: {commands}"
    shift = commands[-1:] + commands[:-1]
    return f"Исходный кортеж: {commands}\nКортеж после сдвига: {shift}"


# print(m_5_1_6(stdin.read()))


# 5.2 Создание кортежей, доступ к элементам

# === Задача 1. Опытный маг: срезы кортежа ===
"""
    Дан кортеж:
        ingredients = ("мантия", "зелье", "шкура", "песок", "кристалл", "огонь", "вода")       
    Считай два целых числа (каждое с новой строки):
        - начальный индекс start;
        - конечный индекс end.
    Выведи подотрезок кортежа с помощью среза ingredients[start:end]
        (как в Python: индексация с нуля, конечная граница не включается).
    Ограничение: не используйте sorted, list, set, dict, range
    Формат вывода: Результат среза: (<элементы_среза>)
    """

# from sys import stdin


def m_5_2_1(data: str, ingredients=None):
    if not ingredients:
        ingredients = ("мантия", "зелье", "шкура", "песок", "кристалл", "огонь", "вода")
    start, end = map(int, data.strip().split("\n"))
    return f"Результат среза: {ingredients[start:end]}"


# print(m_5_2_1(stdin.read(), ingredients))


# === Задача 2. Поиск элемента в кортеже ===
"""
    Дан кортеж сотрудников:
        employees = (
            ("Иван", 30, "менеджер"),
            ("Алексей", 25, "разработчик"),
            ("Мария", 35, "директор")
            )
    Считайте одну строку
        --> имя сотрудника для поиска (сравнение по точному совпадению).
    Последовательно проверьте записи в кортеже
    (без использования list, set, dict):
        - если сотрудник найден --> выведите строку в формате:
            Возраст: <возраст>, Должность: <должность>
        - если не найден --> выведите:
            Сотрудник не найден.
    """


def m_5_2_2(name: str, employees=None):
    if not employees:
        employees = (
            ("Иван", 30, "менеджер"),
            ("Алексей", 25, "разработчик"),
            ("Мария", 35, "директор"),
        )
    for member in employees:
        if member[0] == name:
            _, age, position = member
            return f"Возраст: {age}, Должность: {position}"
    return "Сотрудник не найден."


# print(m_5_2_2(input(), employees))


# === Задача 3. Волшебные ингредиенты ===
"""
    В программе уже заданы кортежи:
        ingredient1 = ("Перо феникса", 5, "Очень редкий", "Воскрешение")
        ingredient2 = ("Лунный камень", 3, "Редкий", "Усиление магии")
        ingredient3 = ("Черный песок", 2, "Обычный", "Защита от огня")
    Считай одно целое число --> индекс ингредиента (0, 1 или 2).
    Выведи информацию в формате:
        Название: <имя>
        Сила: <сила>
        Редкость: <редкость>
        Эффект: <эффект>
    """

# from sys import stdin


def m_5_2_3(data: str, *args):
    index = int(data)
    if not args:
        ingredient1 = ("Перо феникса", 5, "Очень редкий", "Воскрешение")
        ingredient2 = ("Лунный камень", 3, "Редкий", "Усиление магии")
        ingredient3 = ("Черный песок", 2, "Обычный", "Защита от огня")
        args = [ingredient1, ingredient2, ingredient3]
    name, power, parity, effect = args[index]
    result = f"Название: {name}\nСила: {power}\nРедкость: {parity}\nЭффект: {effect}"
    return result


# print(m_5_2_3(stdin.read(), ingredient1, ingredient2, ingredient3))


# === Задача 4. Магическая карта ===
"""
    Даны кортежи:
        cities = ('Эльдорадо', 'Люминор', 'Арканум')
        populations = (5000, 7000, 12000)
        magics = ('Земная магия', 'Воздушная магия', 'Водная магия')
    Считай три значения (каждое с новой строки):
        - название нового города --> строка;
        - его население --> целое число;
        - тип магии --> строка.
    Создай новые кортежи, добавив введённые данные в конец
    соответствующих кортежей, и выведи их по одному на
    строку в том же формате Python-кортежей:
        (<обновлённый cities>)
        (<обновлённый populations>)
        (<обновлённый magics>)
    """

# from sys import stdin


def m_5_2_4(data: str, *args):
    if not args:
        cities = ("Эльдорадо", "Люминор", "Арканум")
        populations = (5000, 7000, 12000)
        magics = ("Земная магия", "Воздушная магия", "Водная магия")
        args = [cities, populations, magics]
    new_data = (int(x) if x.isdigit() else x for x in data.strip().split("\n"))
    result = (tuple((*old, new)) for old, new in zip(args, new_data))
    return "\n".join(map(str, result))


# print(m_5_2_4(stdin.read(), cities, populations, magics))


# === Задача 5. Персонажи в фильме ===
"""
    Считай:
        - целое число N --> количество персонажей;
        - затем N строк вида: Имя, Роль (после запятой может быть пробел).
    Для каждой строки сформируй кортеж ("Имя", "Роль").
    Выведи:
        - если есть хотя бы один персонаж с ролью
          Главная роль --> сначала строку 
                Персонажи, играющие главную роль:
        - затем по одному на строку каждый найденный кортеж
        (в стандартном виде Python, с двойными кавычками);
        - если таких персонажей нет --> выведи Персонажи отсутствуют.
    """

# from sys import stdin


def m_5_2_5(data: str):
    result = []
    сharacters = tuple(
        (name.strip(), role.strip())
        for line in data.strip().split("\n")[1:]
        for name, role in [line.split(",")]
    )
    for сharacter in сharacters:
        if сharacter[-1] == "Главная роль":
            result.append(str(сharacter))
    if result:
        return f"Персонажи, играющие главную роль:\n{'\n'.join(result)}"
    return "Персонажи отсутствуют"


# print(m_5_2_5(stdin.read()))


# === Задача 6. Подсчёт общего количества заказанных блюд ===
"""
    В программе уже задан кортеж заказов:
        orders = (
            (101, (("Пицца", 2), ("Салат", 1), ("Кола", 3))),
            (102, (("Пицца", 1), ("Сок", 2))),
            (103, (("Салат", 2), ("Кофе", 1))),
            (104, (("Пицца", 3), ("Сок", 1), ("Кофе", 2))),
            (105, (("Кола", 2), ("Салат", 1), ("Пицца", 2)))
        )
    Считай одну строку --> название блюда (строка).
    Просуммируй количества этого блюда по всем заказам
    (точное совпадение названия) и выведи строку:
        Общее количество заказов "<блюдо>": <число>
    """


def m_5_2_6(dish: str, orders=None):
    if not orders:
        orders = (
            (101, (("Пицца", 2), ("Салат", 1), ("Кола", 3))),
            (102, (("Пицца", 1), ("Сок", 2))),
            (103, (("Салат", 2), ("Кофе", 1))),
            (104, (("Пицца", 3), ("Сок", 1), ("Кофе", 2))),
            (105, (("Кола", 2), ("Салат", 1), ("Пицца", 2))),
        )
    number = sum(item[-1] for order in orders for item in order[1] if item[0] == dish)
    return f'Общее количество заказов "{dish}": {number}'


# print(m_5_2_6(input(), orders))
