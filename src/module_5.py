# Stepick.org — PROкод: продвинутый курс по Python
# 5. Работа с кортежами (tuple)

from sys import stdin
import re


# pylint: disable=W0105

# 5.1 Что такое кортежи и их отличие от списков

# === Задача 1. Список друзей ===
"""
    Считай три строки по порядку:
        имя друга --> строка;
        возраст --> целое число;
        город --> строка.
    Создай кортеж вида (имя, возраст, город) и выведи строку:
        Информация о друге: (<кортеж>)
    """

# from sys import stdin


def m_5_1_1(data: str):
    result = tuple(
        int(word.strip()) if word.isdigit() else word.strip() for word in data.split()
    )
    return f"Информация о друге: {result}"


# print(m_5_1_1(stdin.read()))


# === Задача 2. Путёвка в мир приключений ===
"""
    Считай две строки:
        - вещи из одежды, перечисленные через пробел;
        - вещи из оборудования, перечисленные через пробел.
    Преобразуй каждую строку в кортеж строк. Объедини два кортежа
    в один и затем удвой его (повторив порядок вещей дважды).
    Выведи результат в формате:
        Список вещей на экспедицию: (<кортеж>)
    """

# from sys import stdin


def m_5_1_2(data: str):
    clothes, equipment = (
        tuple(element for element in line.split()) for line in data.strip().split("\n")
    )

    return f"Список вещей на экспедицию: {(clothes + equipment) * 2}"


# print(m_5_1_2(stdin.read()))

# === Задача 3. САнализ оценок студентов ===
"""
    Считай:
        - целое число N --> количество студентов;
        - затем N целых чисел --> оценки.
    Сформируй кортеж всех оценок. Вычисли среднее значение и выведи его
    с двумя знаками после запятой. Сформируй новый кортеж из оценок,
    которые равны среднему или выше, сохранив порядок появления.
    Выведи три строки:
        - исходный кортеж оценок;
        - среднее значение (с двумя знаками после запятой);
        - кортеж оценок, равных или выше среднего.
    """

# from sys import stdin


def m_5_1_3(data: str):
    grades = tuple(map(int, data[1:].strip().split("\n")))
    average = sum(grades) / len(grades)
    above_average = tuple(grade for grade in grades if grade >= average)
    return f"{grades}\n{average:.2f}\n{above_average}"


# print(m_5_1_3(stdin.read()))


# === Задача 4.Нахождение наиболее удалённого объекта ===
"""
    Считайте:
        - целое число N --> количество объектов;
        - затем для каждого объекта по две строки:
        x и y (вещественные числа).
    Для каждого объекта сформируйте кортеж (x, y). Найдите объект
    с максимальным расстоянием до начала координат, где расстояние
    рассчитывается по формуле длины вектора.
    Выведите две строки:
        - кортеж координат наиболее удалённого объекта
          (как в стандартном представлении Python, с числами типа float);
        - расстояние до этого объекта, округлённое до 2 знаков после запятой.
    """

# from sys import stdin


def m_5_1_4(data: str):
    arr = tuple(map(float, data.strip().split("\n")))
    objects = zip(arr[1::2], arr[2::2])
    most_distant = max(objects, key=lambda c: (c[0] ** 2 + c[1] ** 2) ** 0.5)
    distant = (most_distant[0] ** 2 + most_distant[1] ** 2) ** 0.5
    return f"{most_distant}\n{distant:.2f}"


# print(m_5_1_4(stdin.read()))

# === Задача 5. Определение самого яркого цвета ===
"""
    Считай:
        - целое число N --> количество цветов;
        - затем для каждого цвета три целых числа: R, G, B (каждое с новой строки).
    Для каждого цвета
        - сформируй кортеж (R, G, B),
        - вычисли его яркость как R + G + B
        - найди цвет с максимальной яркостью.
    Выведи две строки:
        - кортеж самого яркого цвета;
        - его яркость (сумму R + G + B).
    """

# from sys import stdin


def m_5_1_5(data: str):
    arr = tuple(map(int, data.strip().split("\n")))
    rgb = zip(arr[1::3], arr[2::3], arr[3::3])
    brightnes = max(rgb, key=lambda c: sum(c))
    return f"{brightnes}\n{sum(brightnes)}"


# print(m_5_1_5(stdin.read()))

# === Задача 6. Циклический сдвиг кортежа инструкций ===
"""
    Считайте:
        - целое число N --> количество инструкций;
        - затем N целых чисел (каждое с новой строки)
          --> идентификаторы команд.
    Сформируйте кортеж из введённых чисел.
    Выполните циклический сдвиг вправо на 1:
    последний элемент становится первым, остальные сдвигаются вправо.
    Выведите две строки строго в таком виде:
        - Исходный кортеж: <кортеж>
        - Кортеж после сдвига: <кортеж>
    Если кортеж состоит из одного элемента, после сдвига он не меняется.
    """

# from sys import stdin


def m_5_1_6(data: str):
    commands = tuple(map(int, data[1:].strip().split("\n")))
    if len(commands) < 2:
        return f"Исходный кортеж: {commands}\nКортеж после сдвига: {commands}"
    shift = commands[-1:] + commands[:-1]
    return f"Исходный кортеж: {commands}\nКортеж после сдвига: {shift}"


# print(m_5_1_6(stdin.read()))


# 5.2 Создание кортежей, доступ к элементам

# === Задача 1. Опытный маг: срезы кортежа ===
"""
    Дан кортеж:
        ingredients = ("мантия", "зелье", "шкура", "песок", "кристалл", "огонь", "вода")       
    Считай два целых числа (каждое с новой строки):
        - начальный индекс start;
        - конечный индекс end.
    Выведи подотрезок кортежа с помощью среза ingredients[start:end]
        (как в Python: индексация с нуля, конечная граница не включается).
    Ограничение: не используйте sorted, list, set, dict, range
    Формат вывода: Результат среза: (<элементы_среза>)
    """

# from sys import stdin


def m_5_2_1(data: str, ingredients=None):
    if not ingredients:
        ingredients = ("мантия", "зелье", "шкура", "песок", "кристалл", "огонь", "вода")
    start, end = map(int, data.strip().split("\n"))
    return f"Результат среза: {ingredients[start:end]}"


# print(m_5_2_1(stdin.read(), ingredients))


# === Задача 2. Поиск элемента в кортеже ===
"""
    Дан кортеж сотрудников:
        employees = (
            ("Иван", 30, "менеджер"),
            ("Алексей", 25, "разработчик"),
            ("Мария", 35, "директор")
            )
    Считайте одну строку
        --> имя сотрудника для поиска (сравнение по точному совпадению).
    Последовательно проверьте записи в кортеже
    (без использования list, set, dict):
        - если сотрудник найден --> выведите строку в формате:
            Возраст: <возраст>, Должность: <должность>
        - если не найден --> выведите:
            Сотрудник не найден.
    """


def m_5_2_2(name: str, employees=None):
    if not employees:
        employees = (
            ("Иван", 30, "менеджер"),
            ("Алексей", 25, "разработчик"),
            ("Мария", 35, "директор"),
        )
    for member in employees:
        if member[0] == name:
            _, age, position = member
            return f"Возраст: {age}, Должность: {position}"
    return "Сотрудник не найден."


# print(m_5_2_2(input(), employees))


# === Задача 3. Волшебные ингредиенты ===
"""
    В программе уже заданы кортежи:
        ingredient1 = ("Перо феникса", 5, "Очень редкий", "Воскрешение")
        ingredient2 = ("Лунный камень", 3, "Редкий", "Усиление магии")
        ingredient3 = ("Черный песок", 2, "Обычный", "Защита от огня")
    Считай одно целое число --> индекс ингредиента (0, 1 или 2).
    Выведи информацию в формате:
        Название: <имя>
        Сила: <сила>
        Редкость: <редкость>
        Эффект: <эффект>
    """

# from sys import stdin


def m_5_2_3(data: str, *args):
    index = int(data)
    if not args:
        ingredient1 = ("Перо феникса", 5, "Очень редкий", "Воскрешение")
        ingredient2 = ("Лунный камень", 3, "Редкий", "Усиление магии")
        ingredient3 = ("Черный песок", 2, "Обычный", "Защита от огня")
        args = [ingredient1, ingredient2, ingredient3]
    name, power, parity, effect = args[index]
    result = f"Название: {name}\nСила: {power}\nРедкость: {parity}\nЭффект: {effect}"
    return result


# print(m_5_2_3(stdin.read(), ingredient1, ingredient2, ingredient3))


# === Задача 4. Магическая карта ===
"""
    Даны кортежи:
        cities = ('Эльдорадо', 'Люминор', 'Арканум')
        populations = (5000, 7000, 12000)
        magics = ('Земная магия', 'Воздушная магия', 'Водная магия')
    Считай три значения (каждое с новой строки):
        - название нового города --> строка;
        - его население --> целое число;
        - тип магии --> строка.
    Создай новые кортежи, добавив введённые данные в конец
    соответствующих кортежей, и выведи их по одному на
    строку в том же формате Python-кортежей:
        (<обновлённый cities>)
        (<обновлённый populations>)
        (<обновлённый magics>)
    """

# from sys import stdin


def m_5_2_4(data: str, *args):
    if not args:
        cities = ("Эльдорадо", "Люминор", "Арканум")
        populations = (5000, 7000, 12000)
        magics = ("Земная магия", "Воздушная магия", "Водная магия")
        args = [cities, populations, magics]
    new_data = (int(x) if x.isdigit() else x for x in data.strip().split("\n"))
    result = (tuple((*old, new)) for old, new in zip(args, new_data))
    return "\n".join(map(str, result))


# print(m_5_2_4(stdin.read(), cities, populations, magics))


# === Задача 5. Персонажи в фильме ===
"""
    Считай:
        - целое число N --> количество персонажей;
        - затем N строк вида: Имя, Роль (после запятой может быть пробел).
    Для каждой строки сформируй кортеж ("Имя", "Роль").
    Выведи:
        - если есть хотя бы один персонаж с ролью
          Главная роль --> сначала строку 
                Персонажи, играющие главную роль:
        - затем по одному на строку каждый найденный кортеж
        (в стандартном виде Python, с двойными кавычками);
        - если таких персонажей нет --> выведи Персонажи отсутствуют.
    """

# from sys import stdin


def m_5_2_5(data: str):
    result = []
    сharacters = tuple(
        (name.strip(), role.strip())
        for line in data.strip().split("\n")[1:]
        for name, role in [line.split(",")]
    )
    for сharacter in сharacters:
        if сharacter[-1] == "Главная роль":
            result.append(str(сharacter))
    if result:
        return f"Персонажи, играющие главную роль:\n{'\n'.join(result)}"
    return "Персонажи отсутствуют"


# print(m_5_2_5(stdin.read()))


# === Задача 6. Подсчёт общего количества заказанных блюд ===
"""
    В программе уже задан кортеж заказов:
        orders = (
            (101, (("Пицца", 2), ("Салат", 1), ("Кола", 3))),
            (102, (("Пицца", 1), ("Сок", 2))),
            (103, (("Салат", 2), ("Кофе", 1))),
            (104, (("Пицца", 3), ("Сок", 1), ("Кофе", 2))),
            (105, (("Кола", 2), ("Салат", 1), ("Пицца", 2)))
        )
    Считай одну строку --> название блюда (строка).
    Просуммируй количества этого блюда по всем заказам
    (точное совпадение названия) и выведи строку:
        Общее количество заказов "<блюдо>": <число>
    """


def m_5_2_6(dish: str, orders=None):
    if not orders:
        orders = (
            (101, (("Пицца", 2), ("Салат", 1), ("Кола", 3))),
            (102, (("Пицца", 1), ("Сок", 2))),
            (103, (("Салат", 2), ("Кофе", 1))),
            (104, (("Пицца", 3), ("Сок", 1), ("Кофе", 2))),
            (105, (("Кола", 2), ("Салат", 1), ("Пицца", 2))),
        )
    number = sum(item[-1] for order in orders for item in order[1] if item[0] == dish)
    return f'Общее количество заказов "{dish}": {number}'


# print(m_5_2_6(input(), orders))


# 5.3 Использование встроенных функций с кортежами len(), min(), max()


# === Задача 1. Анализ списка фруктов ===
"""
    Считай одну строку с названиями фруктов, разделёнными пробелами.
    Создай кортеж из этих строк. Выведи три строки:
        - Количество фруктов в списке: <число>
        - Фрукт, который идет первым по алфавиту: <фрукт>
        - Фрукт, который идет последним по алфавиту: <фрукт>
    Ограничение: не используйте sorted, list, dict, set
    """


def m_5_3_1(data: str):
    fruit = data.split()
    result = (
        f"Количество фруктов в списке: {len(fruit)}\n"
        f"Фрукт, который идет первым по алфавиту: {min(fruit)}\n"
        f"Фрукт, который идет последним по алфавиту: {max(fruit)}"
    )
    return result


# print(m_5_3_1(input()))


# === Задача 2. Кортеж первым элементом ===
"""
    Считай одну строку с вложенными кортежами,
    записанными через пробел, например:
    (1, 2) (10, 20) (5, 15)
    Определи:
        - кортеж с минимальным первым элементом;
        - кортеж с максимальным первым элементом.
    Ограничение: не используйте sorted, list, set, dict, range, eval
    Выведи две строки строго в таком виде:
        - Кортеж с минимальным первым элементом: (<кортеж>)
        - Кортеж с максимальным первым элементом: (<кортеж>)
    """

# import re


def m_5_3_2(data: str):
    tuples = [
        tuple(int(e) for e in element.split(", "))
        for element in re.findall(r"\((.*?)\)", data)
    ]
    result = (
        f"Кортеж с минимальным первым элементом: {min(tuples)}\n"
        f"Кортеж с максимальным первым элементом: {max(tuples)}"
    )
    return result


# print(m_5_3_2(input()))


# === Задача 3. Призыв к бандитам ===
"""
    В программе задан кортеж имён бандитов, например:
        bandits = ("Джек", "Вячеслав Иваньков", "Vitorio Zanzara")
    Считай одну строку --> имя бандита.
    Если имя присутствует в кортеже, выведи:
        <имя> в сборе!
    Иначе выведи:
        <имя> не найден в списке!
    """


def m_5_3_3(name: str, bandits=None):
    if not bandits:
        bandits = (
            "Vitorio Zanzara",
            "Джек",
            "Dagdarion Dark",
            "Артур",
            "Алекс Глозман",
            "Рик",
            "Dark Horse",
        )
    if name in bandits:
        return f"{name} в сборе!"
    return f"{name} не найден в списке!"


# print(m_5_3_3(input()))


# === Задача 4. Разделение добычи между бандитами ===
"""
    В программе задан кортеж имён бандитов:
        bandits = ("Vitorio Zanzara", "Джек", "Dagdarion Dark", "Артур", "Алекс Глозман", "Рик", "Dark Horse")
    Считай одно целое число --> общую сумму добычи (в монетах).
    Если сумма делится поровну между всеми (без остатка), выведи:
        Каждый бандит получит: <сумма_на_человека> монет.
    Иначе выведи:
        Общая сумма добычи не делится поровну между бандитами.
    """


def m_5_3_4(data: str, bandits=None):
    if not bandits:
        bandits = (
            "Vitorio Zanzara",
            "Джек",
            "Dagdarion Dark",
            "Артур",
            "Алекс Глозман",
            "Рик",
            "Dark Horse",
        )
    loot = int(data)
    if loot % len(bandits) == 0:
        coins = loot // len(bandits)
        return f"Каждый бандит получит: {coins} монет."
    return "Общая сумма добычи не делится поровну между бандитами."


# print(m_5_3_4(input()))


# === Задача 5. Лошади бандитов ===
"""
    В программе задан кортеж лошадей с их скоростями (км/ч):
    horses = (("Буря", 48), ("Черный ворон", 44), ("Молния", 60))
    Считай две строки:
        - кличка лошади (строка, одна из имён в кортеже);
        - расстояние до лагеря в километрах (целое число).
    Рассчитай время в пути:
        - часы = целая часть от расстояние / скорость,
        - минуты = округлённые с помощью round() минуты от дробной части часа (* 60).
    Выведи строку в формате:
        Лошадь <имя> пройдет <расстояние> км за <часы> часов и <минуты> минут.
    """

# from sys import stdin


def m_5_3_5(data: str, horses=None):
    if not horses:
        horses = (("Черный ворон", 45), ("Стальной конь", 50), ("Буря", 48))
    d = data.split()
    distance = int(d[-1])
    name = " ".join(d[:-1])
    try:
        velocity = next(horse[-1] for horse in horses if horse[0] == name)
    except StopIteration:
        return "Лошадь с таким именем не найдена."
    hours = distance // velocity
    minutes = round((distance / velocity - hours) * 60)
    return f"Лошадь {name} пройдет {distance} км за {hours} часов и {minutes} минут."


# print(m_5_3_5(stdin.read()))


# 5.4 Использования sum() в кортежах


# === Задача 1. Волшебный лес ===
"""
    Считай одну строку целых чисел (могут быть отрицательные),
    разделённых пробелами. Преобразуй их в кортеж и выведи
    сумму элементов в формате: Сумма камней: <число>
    """


def m_5_4_1(data: str):
    numbers = tuple(map(int, data.split()))
    return f"Сумма камней: {sum(numbers)}"


# print(m_5_4_1(input()))


# === Задача 2. Волшебный лес: сила магических камней ===
"""
    Считай одну строку целых чисел, разделённых пробелами
    это силы камней (могут быть отрицательными).
    Посчитай:
        - сумму положительных чисел;
        - сумму отрицательных чисел, умноженных на 2
        (то есть каждое отрицательное число учитывается как число * 2);
    Итоговая сила:
        - итог = (сумма положительных) + (сумма отрицательных * 2)
        - если итог < 10, то итог = итог * 2.
    Выведи строку: Сила камней: <итог>
    """


def m_5_4_2(data: str):
    numbers = tuple(map(int, data.split()))
    pos_sum = sum(num for num in numbers if num > 0)
    neg_sum = sum(num for num in numbers if num < 0) * 2
    result = pos_sum + neg_sum
    return f"Сила камней: {result if result >= 10 else result * 2}"


# print(m_5_4_2(input()))


# === Задача 3. Криптики: суммируем силу по типам ===
"""
    Считайте одну строку с данными о камнях. Данные заданы парами
    и разделены запятыми, каждая пара имеет вид: <тип> <сила>
    Требуется:
        - Разбить ввод на пары и для каждой пары
          сформировать кортеж (тип, сила).
        - Собрать кортежи камней в общий кортеж.
        - Для каждого типа отдельно вычислить сумму сил
          (положительные значения прибавляются, отрицательные --> вычитаются).
        - Вывести строки для каждого встреченного типа в порядке
          первого появления в исходных данных в формате:
              Общая сила <тип> камень: <сумма>
    Ограничения: не используйте set - dict-sorted
    """


def m_5_4_3(data: str):
    stones = tuple(
        tuple((stone[0], int(stone[-1])))
        for pair in data.split(", ")
        for stone in [pair.split()]
    )
    types = []
    result = []
    for stone in stones:
        if stone[0] not in types:
            types.append(stone[0])
            power = sum(s[-1] for s in stones if s[0] == stone[0])
            result.append(f"Общая сила {stone[0]} камень: {power}")
    return "\n".join(result)


# print(m_5_4_3(input()))


# 5.5 Методы в кортежах


# === Задача 1. Магический мир ===
"""
    Считай одну строку, введённую пользователем.
    Преобразуй её в кортеж символов
    (каждая буква, пробел или знак --> отдельный элемент).
    Ограничение: не используйте sorted, list, dict, set
    Выведи результат в формате: Кортеж символов: (<кортеж_символов>)
    """


def m_5_5_1(data: str):
    return f"Кортеж символов: {tuple(data)}"


# print(m_5_5_1(input()))


# === Задача 2.  Два героя ===
"""
    Считай:
        - первую строку --> последовательность целых чисел
          через пробел и сформируй из неё кортеж;
        - вторую строку --> целое «магическое» число для поиска.
    Выведи две строки:
        - Число <n> встречается <k> раз(а) в кортеже.
        - Первое вхождение числа <n> находится на индексе <i>.
    Если число отсутствует, считай, что <k> = 0, а <i> = -1.
    Выведи две строки:
        - Число <n> встречается <k> раз(а) в кортеже.
        - Число <n> не найдено в кортеже.
    Ограничение: не используйте sorted, list, dict, set
    """

# from sys import stdin


def m_5_5_2(data: str):
    d = data.strip().split("\n")
    nums = tuple(map(int, d[0].split()))
    magic_num = int(d[-1])
    result = [
        f"Число {magic_num} встречается {nums.count(magic_num)} раз(а) в кортеже."
    ]
    if magic_num in nums:
        result.append(
            f"Первое вхождение числа {magic_num} находится на индексе {nums.index(magic_num)}."
        )
    else:
        result.append(f"Число {magic_num} не найдено в кортеже.")
    return "\n".join(result)


# print(m_5_5_2(stdin.read()))


# === Задача 3. Биржа и доход ===
"""
    Считайте одно целое число n (n ≤ 100) --> количество дней.
    Сформируйте последовательность прибылей длины n, где:
        - первые три дня: 1 1 1;
        - каждый следующий день равен сумме трёх предыдущих:
          a[i] = a[i-1] + a[i-2] + a[i-3] для i ≥ 4.
    Выведите n чисел, разделённых пробелом.
    Ограничение: не используйте sorted, list, dict, set
    """


def m_5_5_3(data: str):
    days = int(data)
    result = [1, 1, 1]
    if days < 4:
        return " ".join(map(str, result[:days]))
    for _ in range(4, days + 1):
        result.append(result[-3] + result[-2] + result[-1])
    return " ".join(map(str, result))


# print(m_5_5_3(input()))


# === Задача 4. История о пиратах: вершина параболы ===
"""
    Считайте три целых числа (каждое с новой строки) -->
        коэффициенты a, b, c уравнения параболы y = a x^2 + b x + c, где a ≠ 0.
    Вычислите координаты вершины параболы: (-b/(2*a); (4ac - b^2)/4a)
    Выведите результат в формате: (x0, y0)
    """

# from sys import stdin


def m_5_5_4(data: str):
    a, b, c = map(int, data.strip().split("\n"))
    apex = -b / (2 * a), (4 * a * c - b**2) / (4 * a)
    return apex


# print(m_5_5_4(stdin.read()))


# === Задача 5. Поиск участника лотереи по номеру ===
"""
    Дан заранее подготовленный кортеж чисел:
    numbers = (
        3, 1, 4, 1, 5, 9, 2, 6, 5, 3,
        5, 8, 9, 7, 9, 3, 2, 3, 8, 4,
        6, 2, 6, 4, 3, 3, 8, 3, 2, 7,
        9, 5, 0, 2, 8, 8, 4, 1, 9, 7,
        1, 6, 9, 3, 9, 9, 3, 7, 5, 1
    )
    Считай три значения (каждое с новой строки):
        - число для поиска;
        - начальный индекс start;
        - конечный индекс end.
    Ограничение: не используйте sorted, list, dict, set
    Найди первое вхождение заданного числа в пределах диапазона индексов
    от start до end (как в Python, end не включается).
    Выведи одну строку:
        - если найдено: Первое вхождение числа <x> в диапазоне
          от <start> до <end> находится на индексе: <idx>
        - если не найдено: Число <x> не найдено
          в диапазоне от <start> до <end>.
    """

# from sys import stdin


def m_5_5_5(data: str, numbers=None):
    if not numbers:
        # fmt: off
        numbers = (
            3, 1, 4, 1, 5, 9, 2, 6, 5, 3,
            5, 8, 9, 7, 9, 3, 2, 3, 8, 4,
            6, 2, 6, 4, 3, 3, 8, 3, 2, 7,
            9, 5, 0, 2, 8, 8, 4, 1, 9, 7,
            1, 6, 9, 3, 9, 9, 3, 7, 5, 1
        )
        # fmt: on
    num, start, end = map(int, data.strip().split("\n"))
    if num in numbers[start:end]:
        return (
            f"Первое вхождение числа {num} в диапазоне от {start} до {end} "
            f"находится на индексе: {numbers.index(num, start, end)}"
        )
    return f"Число {num} не найдено в диапазоне от {start} до {end}."


# print(m_5_5_5(stdin.read(), numbers))


# === Задача 6. Анализ доставок товара от поставщиков ===
"""
    В программе задан вложенный кортеж поставок:
    deliveries = (
        ("Поставщик А", ("яблоко", "банан", "киви", "яблоко", "груша", "яблоко", "банан")),
        ("Поставщик B", ("груша", "яблоко", "банан", "яблоко", "киви", "яблоко")),
        ("Поставщик C", ("киви", "банан", "яблоко", "груша", "банан", "яблоко", "яблоко", "груша"))
        )
    Считай одну строку --> название фрукта (на кириллице), для которого
    нужно собрать статистику (сравнение --> по точному совпадению строки).
    Выполни подсчёт:
        - для каждого поставщика --> сколько раз этот
          фрукт встречается в его поставках;
        - общего количества по всем поставщикам.
    Выведи:
        - если общий счёт больше нуля:
            Общее количество товара "<фрукт>" среди всех поставщиков: <число>
            Статистика по поставщикам:
              Поставщик А: <число> раз(а)
              Поставщик B: <число> раз(а)
              Поставщик C: <число> раз(а)
        (обрати внимание: перед строками с поставщиками --> ровно 2 пробела)
        - если фрукт не встречается ни у одного поставщика:
            Товар "<фрукт>" отсутствует в доставках.
    """


def m_5_5_6(fruit: str, deliveries=None):
    if not deliveries:
        # fmt: off
        deliveries = (
            ("Поставщик А", ("яблоко", "банан", "киви", "яблоко", "груша", "яблоко", "банан")),
            ("Поставщик B", ("груша", "яблоко", "банан", "яблоко", "киви", "яблоко")),
            ("Поставщик C", ("киви", "банан", "яблоко", "груша", "банан", "яблоко", "яблоко", "груша"))
            )
        # fmt: on
    a, b, c = (vendor[-1].count(fruit) for vendor in deliveries)
    if sum((a, b, c)) > 0:
        return (
            f'Общее количество товара "{fruit}" среди всех '
            f"поставщиков: {sum((a, b, c))}\n"
            f"Статистика по поставщикам:\n"
            f"  Поставщик А: {a} раз(а)\n"
            f"  Поставщик В: {b} раз(а)\n"
            f"  Поставщик С: {c} раз(а)"
        )
    return f'Товар "{fruit}" отсутствует в доставках.'


# print(m_5_5_6(input(), deliveries))


# 5.6 Преобразование между кортежами и другими структурами данных


# === Задача 1. Преобразователь данных ===
"""
    В программе уже задан кортеж паролей:
        old_passwords = ('qwerty', '123456', 'abc123')
    Считай одну строку --> новый пароль.
    Далее выполни шаги:
        - преобразуй исходный кортеж в список;
        - добавь в список новый пароль;
        - преобразуй список обратно в кортеж;
        - выведи две строки ровно в таком формате:
            Старый кортеж: (<исходные_пароли>)
            Новый кортеж: (<обновлённые_пароли>)
    """


def m_5_6_1(password: str, old_passwords=None):
    if not old_passwords:
        old_passwords = ("qwerty", "123456", "abc123")
    paswd_list = list(old_passwords)
    paswd_list.append(password)
    new_passwords = tuple(paswd_list)
    return f"Старый кортеж: {old_passwords}\nНовый кортеж: {new_passwords}"


# print(m_5_6_1(input(), old_passwords))


# === Задача 2. Зашифрованное сообщение от агента Кея ===
"""
    Дан исходный кортеж:
        message_tuple = ('Агент', 'Джей,', 'твоя', 'следующая', 'миссия')
    Считай одну строку --> секретное слово.
    Сделай следующее:
        - добавь это слово в конец кортежа;
        - объедини все элементы нового кортежа в одну строку через пробел;
        - выведи:
            - строку с исходным кортежем: Исходное сообщение: (<кортеж>)
            - строку с итоговым текстом: Полное сообщение: <полученная_строка>
    """


def m_5_6_2(word: str, message_tuple=None):
    if not message_tuple:
        message_tuple = ("Агент", "Джей,", "твоя", "следующая", "миссия")
    result = " ".join(message_tuple + (word,))
    return f"Исходное сообщение: {message_tuple}\nПолное сообщение: {result.strip()}"


# print(m_5_6_2(input(), message_tuple))


# === Задача 3. Тайный сейф доктора Редфилда ===
"""
    Исходные данные (кортеж паролей, в котором есть повторы):
        old_passwords = ('virus', 'antivirus', 'zombie', 'virus', 'bio',
            'zombie', 'bio', 'virus', 'biohazard', 'virus', 'biohazard')
    Считай две строки --> два новых пароля (каждый на новой строке).
    Затем выполни шаги:
        - Преобразуй исходный кортеж в список.
        - Добавь в список оба новых пароля.
        - Удали дубликаты (сохраняя первый встретившийся вариант).
          Важно: set не использовать!
        - Отсортируй список по возрастанию длины слова: list.sort(key=len).
        - Преобразуй список обратно в кортеж.
        - Выведи две строки ровно в таком формате:
            Старый кортеж паролей: (<исходный_кортеж>)
            Новый кортеж паролей: (<обновлённый_и_отсортированный_кортеж>)
    """

# from sys import stdin


def m_5_6_3(data: str, old_passwords=None):
    if not old_passwords:
        old_passwords = (
            "virus",
            "antivirus",
            "zombie",
            "virus",
            "bio",
            "zombie",
            "bio",
            "virus",
            "biohazard",
            "virus",
            "biohazard",
        )
    new_paswd_1, new_paswd_2 = data.strip().split("\n")
    paswds_list = list(old_passwords)
    paswds_list.extend((new_paswd_1, new_paswd_2))
    paswds_list_uniq = []
    for paswd in paswds_list:
        if paswd not in paswds_list_uniq:
            paswds_list_uniq.append(paswd)
    paswds_list_uniq.sort(key=len)
    result = tuple(paswds_list_uniq)
    return f"Старый кортеж паролей: {old_passwords}\nНовый кортеж паролей: {result}"


# print(m_5_6_3(stdin.read(), old_passwords))


# === Задача 4. Загадка Хранителя библиотеки ===
"""
    Дан исходный кортеж:
        old_books = (
            'Мастер и Маргарита',
            'Война и мир',
            '1984',
            'Преступление и наказание',
            '451 градус по Фаренгейту',
            '1984'
        )
    Считай одну строку --> названия новых книг через запятую
    (после запятых могут быть пробелы).
    Далее выполни шаги:
        - Выведи строку с исходным кортежем в формате:
            Исходный кортеж книг: (<кортеж>)
        - Разбей ввод по запятым и очисти пробелы вокруг названий.
        - Объедини старые и новые книги.
        - Убери повторяющиеся названия, сохранив первое появление
        каждого (set() не использовать).
        - Отсортируй оставшиеся названия по алфавиту.
        - Преобразуй результат обратно в кортеж и выведи:
            Новый кортеж книг: (<кортеж>)
    """


def m_5_6_4(data: str, old_books=None):
    if not old_books:
        old_books = (
            "Мастер и Маргарита",
            "Война и мир",
            "1984",
            "Преступление и наказание",
            "451 градус по Фаренгейту",
            "1984",
        )
    new_books = tuple(book.strip() for book in data.strip().split(","))
    books = []
    for book in old_books + new_books:
        if book not in books:
            books.append(book)
    result = tuple(sorted(books))
    return f"Исходный кортеж книг: {old_books}\nНовый кортеж книг: {result}"


# print(m_5_6_4(input(), old_books))
