# Stepick.org — PROкод: продвинутый курс по Python
# 14. Работа с файлами

from sys import stdin
import re

# pylint: disable=W0105


# 14.1 Основы работы с файлами


# === Задача 1. Расшифровка утерянного цифрового архива ===
"""
    Шаг 1. Используйте стандартные методы файловых объектов,
        чтобы прочитать всё содержимое виртуального текстового файла.
    Шаг 2. Перед чтением установите указатель в начало файла.
    Шаг 3. Выведите считанный текст на экран.
    Требования:
        - Файл не создавать и не открывать, он уже доступен как txt_file.
        - Использовать только стандартные методы работы с файлами
          (например, seek, read).
        - Никаких функций/input() объявлять/вызывать не нужно, просто
          выполните чтение и вывод.
    """


def m_14_1_1(txt_file):
    print(txt_file.read())


# === Задача 2. Декодирование древних свитков ===
"""
    Шаг 1. Считайте из входа одну строку --> имя файла (например, scroll.txt).
    Шаг 2. Откройте файл в текстовом режиме и выведите всё его содержимое
        целиком (как есть, сохраняя переносы).
    Шаг 3. Затем получите только первую строку файла и выведите её отдельно.
        — Разрешено использовать методы read() и/или readline().
        — Чтобы сначала вывести всё содержимое, а затем первую строку,
          допустимо переоткрыть файл второй раз или сбросить указатель
          чтения в начало (seek(0)).
    Шаг 4. Ничего дополнительно не форматируйте: не добавляйте лишних
        пустых строк, выводите ровно то, что требуется.

    Требования:
        - Файл уже существует на диске; путь к нему поступает на вход.
        - Используйте стандартные операции работы с файлами.
        - Функции объявлять не требуется; просто реализуйте описанную логику.
    """


def m_14_1_2(data: str):
    with open(data, encoding="UTF8") as file:
        content = file.read().rstrip().split("\n")
    return "\n".join(("\n".join(content), content[0]))


# print(m_14_1_2(input().strip()))


# === Задача 3. Анализ таинственного дневника ===
"""
    Шаг 1. Считайте из входа имя файла (одна строка, например scroll.txt).
    Шаг 2. Откройте файл и прочитайте все строки в список (сохраните порядок).
    Шаг 3. Выведите содержимое дневника построчно, удаляя у каждой строки
        ведущие/замыкающие пробелы и перевод строки (strip()).
    Шаг 4. На отдельной строке выведите количество прочитанных строк
        (длину списка).
    Требования:
        - Файл уже существует его не нужно создавать.
        - Используйте стандартные операции работы с файлами.
        - Не добавляйте лишних пустых строк; вывод должен
          идти строго построчно, затем число строк.
    """


def m_14_1_3(data: str):
    with open(data, encoding="UTF8") as file:
        content = list(map(str.strip, file.readlines()))
    result = "\n".join(content)
    return f"{result}\n{len(result)}"


# print(m_14_1_3(input().strip()))

# === Задача 4. Ключ из прошлого ===
"""
    Шаг 1. Открой файл ancient_key.txt (он находится рядом с программой).
    Шаг 2. Считайте из него ровно четыре строки
        и преобразуйте их в целые числа.
    Шаг 3. Вычислите сумму этих четырёх чисел.
    Шаг 4. Выведите сумму одним числом.
    Требования:
        - Программа не получает ввод с клавиатуры.
        - Файл ancient_key.txt уже существует и содержит 4 строки,
          каждая одно целое число.
        - На экран выводится только сумма.
    """


def m_14_1_4():
    name = "ancient_key.txt"
    with open(name, encoding="UTF8") as file:
        nums = [int(file.readline().strip()) for _ in range(4)]
    return sum(nums)


# print(m_14_1_4())


# === Задача 5. Архив разбитых строк ===
"""
    Шаг 1. Открой файл fragments.txt, расположенный рядом с программой.
    Шаг 2. Прочитай все строки файла.
    Шаг 3. Найди все целые числа в порядке появления в тексте
        (включая отрицательные).
            — Число считается последовательностью цифр,
              возможен ведущий минус (например, -15).
            — Числа могут соседствовать с буквами/символами
              (например, №1, B4 → это числа 1 и 4).
    Шаг 4. Выведи найденные числа в одну строку через пробел
        (в порядке встречи в файле).
    Разрешено использовать стандартные методы обработки строк;
        можно применять re.findall с шаблоном для целых чисел.
    Важно:
        - программа не получает ввод с клавиатуры;
        - имя файла фиксированное --> fragments.txt.
        - вывод --> одна строка со всеми найденными числами через пробел.
        - пустых файлов в тестах нет.
    """

# import re


def m_14_1_5():
    name = "fragments.txt"
    with open(name, encoding="UTF8") as file:
        content = file.read()
    nums = re.findall(r"[-+]?\d+", content)
    return " ".join(nums)


# print(m_14_1_5)
